/*
 * generated by Xtext 2.10.0-SNAPSHOT
 */
package sc.modelica.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ModelicaMoGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProgramAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cWithinKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cClassesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cClassesClassDefinitionParserRuleCall_2_0_0 = (RuleCall)cClassesAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//Program:
		//	{Program} ('within' name=Name? ';')? (classes+=ClassDefinition ';')*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Program} ('within' name=Name? ';')? (classes+=ClassDefinition ';')*
		public Group getGroup() { return cGroup; }
		
		//{Program}
		public Action getProgramAction_0() { return cProgramAction_0; }
		
		//('within' name=Name? ';')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'within'
		public Keyword getWithinKeyword_1_0() { return cWithinKeyword_1_0; }
		
		//name=Name?
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//Name
		public RuleCall getNameNameParserRuleCall_1_1_0() { return cNameNameParserRuleCall_1_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_2() { return cSemicolonKeyword_1_2; }
		
		//(classes+=ClassDefinition ';')*
		public Group getGroup_2() { return cGroup_2; }
		
		//classes+=ClassDefinition
		public Assignment getClassesAssignment_2_0() { return cClassesAssignment_2_0; }
		
		//ClassDefinition
		public RuleCall getClassesClassDefinitionParserRuleCall_2_0_0() { return cClassesClassDefinitionParserRuleCall_2_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
	}
	public class ClassDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.ClassDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEncapsulatedAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cEncapsulatedEncapsulatedKeyword_0_0 = (Keyword)cEncapsulatedAssignment_0.eContents().get(0);
		private final Assignment cClassPrefixesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cClassPrefixesClassPrefixesParserRuleCall_1_0 = (RuleCall)cClassPrefixesAssignment_1.eContents().get(0);
		private final Assignment cClassSpecifierAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClassSpecifierClassSpecifierParserRuleCall_2_0 = (RuleCall)cClassSpecifierAssignment_2.eContents().get(0);
		
		//// B.2.2 Class Definition
		//ClassDefinition:
		//	encapsulated?='encapsulated'? classPrefixes=ClassPrefixes classSpecifier=ClassSpecifier;
		@Override public ParserRule getRule() { return rule; }
		
		//encapsulated?='encapsulated'? classPrefixes=ClassPrefixes classSpecifier=ClassSpecifier
		public Group getGroup() { return cGroup; }
		
		//encapsulated?='encapsulated'?
		public Assignment getEncapsulatedAssignment_0() { return cEncapsulatedAssignment_0; }
		
		//'encapsulated'
		public Keyword getEncapsulatedEncapsulatedKeyword_0_0() { return cEncapsulatedEncapsulatedKeyword_0_0; }
		
		//classPrefixes=ClassPrefixes
		public Assignment getClassPrefixesAssignment_1() { return cClassPrefixesAssignment_1; }
		
		//ClassPrefixes
		public RuleCall getClassPrefixesClassPrefixesParserRuleCall_1_0() { return cClassPrefixesClassPrefixesParserRuleCall_1_0; }
		
		//classSpecifier=ClassSpecifier
		public Assignment getClassSpecifierAssignment_2() { return cClassSpecifierAssignment_2; }
		
		//ClassSpecifier
		public RuleCall getClassSpecifierClassSpecifierParserRuleCall_2_0() { return cClassSpecifierClassSpecifierParserRuleCall_2_0; }
	}
	public class ClassPrefixesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.ClassPrefixes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPartialAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPartialPartialKeyword_0_0 = (Keyword)cPartialAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cClassAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cClassClassKeyword_1_0_0 = (Keyword)cClassAssignment_1_0.eContents().get(0);
		private final Assignment cModelAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cModelModelKeyword_1_1_0 = (Keyword)cModelAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Assignment cOperatorAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final Keyword cOperatorOperatorKeyword_1_2_0_0 = (Keyword)cOperatorAssignment_1_2_0.eContents().get(0);
		private final Assignment cRecordAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final Keyword cRecordRecordKeyword_1_2_1_0 = (Keyword)cRecordAssignment_1_2_1.eContents().get(0);
		private final Assignment cBlockAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final Keyword cBlockBlockKeyword_1_3_0 = (Keyword)cBlockAssignment_1_3.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cAlternatives_1.eContents().get(4);
		private final Assignment cExpandableAssignment_1_4_0 = (Assignment)cGroup_1_4.eContents().get(0);
		private final Keyword cExpandableExpandableKeyword_1_4_0_0 = (Keyword)cExpandableAssignment_1_4_0.eContents().get(0);
		private final Assignment cConnectorAssignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final Keyword cConnectorConnectorKeyword_1_4_1_0 = (Keyword)cConnectorAssignment_1_4_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_5 = (Assignment)cAlternatives_1.eContents().get(5);
		private final Keyword cTypeTypeKeyword_1_5_0 = (Keyword)cTypeAssignment_1_5.eContents().get(0);
		private final Assignment cPackageAssignment_1_6 = (Assignment)cAlternatives_1.eContents().get(6);
		private final Keyword cPackagePackageKeyword_1_6_0 = (Keyword)cPackageAssignment_1_6.eContents().get(0);
		private final Group cGroup_1_7 = (Group)cAlternatives_1.eContents().get(7);
		private final Alternatives cAlternatives_1_7_0 = (Alternatives)cGroup_1_7.eContents().get(0);
		private final Assignment cPureAssignment_1_7_0_0 = (Assignment)cAlternatives_1_7_0.eContents().get(0);
		private final Keyword cPurePureKeyword_1_7_0_0_0 = (Keyword)cPureAssignment_1_7_0_0.eContents().get(0);
		private final Keyword cImpureKeyword_1_7_0_1 = (Keyword)cAlternatives_1_7_0.eContents().get(1);
		private final Assignment cOperatorAssignment_1_7_1 = (Assignment)cGroup_1_7.eContents().get(1);
		private final Keyword cOperatorOperatorKeyword_1_7_1_0 = (Keyword)cOperatorAssignment_1_7_1.eContents().get(0);
		private final Assignment cFunctionAssignment_1_7_2 = (Assignment)cGroup_1_7.eContents().get(2);
		private final Keyword cFunctionFunctionKeyword_1_7_2_0 = (Keyword)cFunctionAssignment_1_7_2.eContents().get(0);
		private final Assignment cOperatorAssignment_1_8 = (Assignment)cAlternatives_1.eContents().get(8);
		private final Keyword cOperatorOperatorKeyword_1_8_0 = (Keyword)cOperatorAssignment_1_8.eContents().get(0);
		
		//ClassPrefixes:
		//	partial?='partial'? (class?='class' | model?='model' | operator?='operator'? record?='record' | block?='block' |
		//	expandable?='expandable'? connector?='connector' | type?='type' | package?='package' | (pure?='pure' | 'impure')?
		//	operator?='operator'? function?='function' | operator?='operator');
		@Override public ParserRule getRule() { return rule; }
		
		//partial?='partial'? (class?='class' | model?='model' | operator?='operator'? record?='record' | block?='block' |
		//expandable?='expandable'? connector?='connector' | type?='type' | package?='package' | (pure?='pure' | 'impure')?
		//operator?='operator'? function?='function' | operator?='operator')
		public Group getGroup() { return cGroup; }
		
		//partial?='partial'?
		public Assignment getPartialAssignment_0() { return cPartialAssignment_0; }
		
		//'partial'
		public Keyword getPartialPartialKeyword_0_0() { return cPartialPartialKeyword_0_0; }
		
		//(class?='class' | model?='model' | operator?='operator'? record?='record' | block?='block' | expandable?='expandable'?
		//connector?='connector' | type?='type' | package?='package' | (pure?='pure' | 'impure')? operator?='operator'?
		//function?='function' | operator?='operator')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//class?='class'
		public Assignment getClassAssignment_1_0() { return cClassAssignment_1_0; }
		
		//'class'
		public Keyword getClassClassKeyword_1_0_0() { return cClassClassKeyword_1_0_0; }
		
		//model?='model'
		public Assignment getModelAssignment_1_1() { return cModelAssignment_1_1; }
		
		//'model'
		public Keyword getModelModelKeyword_1_1_0() { return cModelModelKeyword_1_1_0; }
		
		//operator?='operator'? record?='record'
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//operator?='operator'?
		public Assignment getOperatorAssignment_1_2_0() { return cOperatorAssignment_1_2_0; }
		
		//'operator'
		public Keyword getOperatorOperatorKeyword_1_2_0_0() { return cOperatorOperatorKeyword_1_2_0_0; }
		
		//record?='record'
		public Assignment getRecordAssignment_1_2_1() { return cRecordAssignment_1_2_1; }
		
		//'record'
		public Keyword getRecordRecordKeyword_1_2_1_0() { return cRecordRecordKeyword_1_2_1_0; }
		
		//block?='block'
		public Assignment getBlockAssignment_1_3() { return cBlockAssignment_1_3; }
		
		//'block'
		public Keyword getBlockBlockKeyword_1_3_0() { return cBlockBlockKeyword_1_3_0; }
		
		//expandable?='expandable'? connector?='connector'
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//expandable?='expandable'?
		public Assignment getExpandableAssignment_1_4_0() { return cExpandableAssignment_1_4_0; }
		
		//'expandable'
		public Keyword getExpandableExpandableKeyword_1_4_0_0() { return cExpandableExpandableKeyword_1_4_0_0; }
		
		//connector?='connector'
		public Assignment getConnectorAssignment_1_4_1() { return cConnectorAssignment_1_4_1; }
		
		//'connector'
		public Keyword getConnectorConnectorKeyword_1_4_1_0() { return cConnectorConnectorKeyword_1_4_1_0; }
		
		//type?='type'
		public Assignment getTypeAssignment_1_5() { return cTypeAssignment_1_5; }
		
		//'type'
		public Keyword getTypeTypeKeyword_1_5_0() { return cTypeTypeKeyword_1_5_0; }
		
		//package?='package'
		public Assignment getPackageAssignment_1_6() { return cPackageAssignment_1_6; }
		
		//'package'
		public Keyword getPackagePackageKeyword_1_6_0() { return cPackagePackageKeyword_1_6_0; }
		
		//(pure?='pure' | 'impure')? operator?='operator'? function?='function'
		public Group getGroup_1_7() { return cGroup_1_7; }
		
		//(pure?='pure' | 'impure')?
		public Alternatives getAlternatives_1_7_0() { return cAlternatives_1_7_0; }
		
		//pure?='pure'
		public Assignment getPureAssignment_1_7_0_0() { return cPureAssignment_1_7_0_0; }
		
		//'pure'
		public Keyword getPurePureKeyword_1_7_0_0_0() { return cPurePureKeyword_1_7_0_0_0; }
		
		//'impure'
		public Keyword getImpureKeyword_1_7_0_1() { return cImpureKeyword_1_7_0_1; }
		
		//operator?='operator'?
		public Assignment getOperatorAssignment_1_7_1() { return cOperatorAssignment_1_7_1; }
		
		//'operator'
		public Keyword getOperatorOperatorKeyword_1_7_1_0() { return cOperatorOperatorKeyword_1_7_1_0; }
		
		//function?='function'
		public Assignment getFunctionAssignment_1_7_2() { return cFunctionAssignment_1_7_2; }
		
		//'function'
		public Keyword getFunctionFunctionKeyword_1_7_2_0() { return cFunctionFunctionKeyword_1_7_2_0; }
		
		//operator?='operator'
		public Assignment getOperatorAssignment_1_8() { return cOperatorAssignment_1_8; }
		
		//'operator'
		public Keyword getOperatorOperatorKeyword_1_8_0() { return cOperatorOperatorKeyword_1_8_0; }
	}
	public class ClassSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.ClassSpecifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLongClassSpecifierParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cShortClassSpecifierParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDerClassSpecifierParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ClassSpecifier:
		//	LongClassSpecifier | ShortClassSpecifier | DerClassSpecifier;
		@Override public ParserRule getRule() { return rule; }
		
		//LongClassSpecifier | ShortClassSpecifier | DerClassSpecifier
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LongClassSpecifier
		public RuleCall getLongClassSpecifierParserRuleCall_0() { return cLongClassSpecifierParserRuleCall_0; }
		
		//ShortClassSpecifier
		public RuleCall getShortClassSpecifierParserRuleCall_1() { return cShortClassSpecifierParserRuleCall_1; }
		
		//DerClassSpecifier
		public RuleCall getDerClassSpecifierParserRuleCall_2() { return cDerClassSpecifierParserRuleCall_2; }
	}
	public class LongClassSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.LongClassSpecifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameIDENTTerminalRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Assignment cSringCommentAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cSringCommentStringCommentParserRuleCall_0_1_0 = (RuleCall)cSringCommentAssignment_0_1.eContents().get(0);
		private final Assignment cCompositionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cCompositionCompositionParserRuleCall_0_2_0 = (RuleCall)cCompositionAssignment_0_2.eContents().get(0);
		private final Keyword cEndKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cNameEndAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cNameEndIDENTTerminalRuleCall_0_4_0 = (RuleCall)cNameEndAssignment_0_4.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cExtendsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cExtendsExtendClauseParserRuleCall_1_0_0 = (RuleCall)cExtendsAssignment_1_0.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDENTTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Assignment cClassModificationAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cClassModificationClassModificationParserRuleCall_1_2_0 = (RuleCall)cClassModificationAssignment_1_2.eContents().get(0);
		private final Assignment cSringCommentAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cSringCommentStringCommentParserRuleCall_1_3_0 = (RuleCall)cSringCommentAssignment_1_3.eContents().get(0);
		private final Assignment cCompositionAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cCompositionCompositionParserRuleCall_1_4_0 = (RuleCall)cCompositionAssignment_1_4.eContents().get(0);
		private final Keyword cEndKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Assignment cNameEndAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final RuleCall cNameEndIDENTTerminalRuleCall_1_6_0 = (RuleCall)cNameEndAssignment_1_6.eContents().get(0);
		
		//// TODO different from modelica manual: made stringcomment optional 
		//LongClassSpecifier:
		//	name=IDENT sringComment=StringComment? composition=Composition 'end' nameEnd=IDENT | extends=ExtendClause name=IDENT
		//	classModification=ClassModification? sringComment=StringComment? composition=Composition 'end' nameEnd=IDENT;
		@Override public ParserRule getRule() { return rule; }
		
		//name=IDENT sringComment=StringComment? composition=Composition 'end' nameEnd=IDENT | extends=ExtendClause name=IDENT
		//classModification=ClassModification? sringComment=StringComment? composition=Composition 'end' nameEnd=IDENT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//name=IDENT sringComment=StringComment? composition=Composition 'end' nameEnd=IDENT
		public Group getGroup_0() { return cGroup_0; }
		
		//name=IDENT
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }
		
		//IDENT
		public RuleCall getNameIDENTTerminalRuleCall_0_0_0() { return cNameIDENTTerminalRuleCall_0_0_0; }
		
		//sringComment=StringComment?
		public Assignment getSringCommentAssignment_0_1() { return cSringCommentAssignment_0_1; }
		
		//StringComment
		public RuleCall getSringCommentStringCommentParserRuleCall_0_1_0() { return cSringCommentStringCommentParserRuleCall_0_1_0; }
		
		//composition=Composition
		public Assignment getCompositionAssignment_0_2() { return cCompositionAssignment_0_2; }
		
		//Composition
		public RuleCall getCompositionCompositionParserRuleCall_0_2_0() { return cCompositionCompositionParserRuleCall_0_2_0; }
		
		//'end'
		public Keyword getEndKeyword_0_3() { return cEndKeyword_0_3; }
		
		//nameEnd=IDENT
		public Assignment getNameEndAssignment_0_4() { return cNameEndAssignment_0_4; }
		
		//IDENT
		public RuleCall getNameEndIDENTTerminalRuleCall_0_4_0() { return cNameEndIDENTTerminalRuleCall_0_4_0; }
		
		//extends=ExtendClause name=IDENT classModification=ClassModification? sringComment=StringComment? composition=Composition
		//'end' nameEnd=IDENT
		public Group getGroup_1() { return cGroup_1; }
		
		//extends=ExtendClause
		public Assignment getExtendsAssignment_1_0() { return cExtendsAssignment_1_0; }
		
		//ExtendClause
		public RuleCall getExtendsExtendClauseParserRuleCall_1_0_0() { return cExtendsExtendClauseParserRuleCall_1_0_0; }
		
		//name=IDENT
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//IDENT
		public RuleCall getNameIDENTTerminalRuleCall_1_1_0() { return cNameIDENTTerminalRuleCall_1_1_0; }
		
		//classModification=ClassModification?
		public Assignment getClassModificationAssignment_1_2() { return cClassModificationAssignment_1_2; }
		
		//ClassModification
		public RuleCall getClassModificationClassModificationParserRuleCall_1_2_0() { return cClassModificationClassModificationParserRuleCall_1_2_0; }
		
		//sringComment=StringComment?
		public Assignment getSringCommentAssignment_1_3() { return cSringCommentAssignment_1_3; }
		
		//StringComment
		public RuleCall getSringCommentStringCommentParserRuleCall_1_3_0() { return cSringCommentStringCommentParserRuleCall_1_3_0; }
		
		//composition=Composition
		public Assignment getCompositionAssignment_1_4() { return cCompositionAssignment_1_4; }
		
		//Composition
		public RuleCall getCompositionCompositionParserRuleCall_1_4_0() { return cCompositionCompositionParserRuleCall_1_4_0; }
		
		//'end'
		public Keyword getEndKeyword_1_5() { return cEndKeyword_1_5; }
		
		//nameEnd=IDENT
		public Assignment getNameEndAssignment_1_6() { return cNameEndAssignment_1_6; }
		
		//IDENT
		public RuleCall getNameEndIDENTTerminalRuleCall_1_6_0() { return cNameEndIDENTTerminalRuleCall_1_6_0; }
	}
	public class ShortClassSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.ShortClassSpecifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameIDENTTerminalRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cBasePrefixAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cBasePrefixBasePrefixParserRuleCall_0_2_0 = (RuleCall)cBasePrefixAssignment_0_2.eContents().get(0);
		private final Assignment cInstanceNameAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cInstanceNameNameParserRuleCall_0_3_0 = (RuleCall)cInstanceNameAssignment_0_3.eContents().get(0);
		private final Assignment cArraySubscriptsAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cArraySubscriptsArraySubscriptsParserRuleCall_0_4_0 = (RuleCall)cArraySubscriptsAssignment_0_4.eContents().get(0);
		private final Assignment cClassModificationAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final RuleCall cClassModificationClassModificationParserRuleCall_0_5_0 = (RuleCall)cClassModificationAssignment_0_5.eContents().get(0);
		private final Assignment cCommentAssignment_0_6 = (Assignment)cGroup_0.eContents().get(6);
		private final RuleCall cCommentCommentParserRuleCall_0_6_0 = (RuleCall)cCommentAssignment_0_6.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameIDENTTerminalRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cEnumerationKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Alternatives cAlternatives_1_4 = (Alternatives)cGroup_1.eContents().get(4);
		private final Assignment cEnumListAssignment_1_4_0 = (Assignment)cAlternatives_1_4.eContents().get(0);
		private final RuleCall cEnumListEnumListParserRuleCall_1_4_0_0 = (RuleCall)cEnumListAssignment_1_4_0.eContents().get(0);
		private final Keyword cColonKeyword_1_4_1 = (Keyword)cAlternatives_1_4.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Assignment cCommentAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final RuleCall cCommentCommentParserRuleCall_1_6_0 = (RuleCall)cCommentAssignment_1_6.eContents().get(0);
		
		//ShortClassSpecifier:
		//	name=IDENT '=' basePrefix=BasePrefix instanceName=Name arraySubscripts=ArraySubscripts?
		//	classModification=ClassModification? comment=Comment? | name=IDENT '=' 'enumeration' '(' (enumList=EnumList? | ':')
		//	')' comment=Comment?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=IDENT '=' basePrefix=BasePrefix instanceName=Name arraySubscripts=ArraySubscripts?
		//classModification=ClassModification? comment=Comment? | name=IDENT '=' 'enumeration' '(' (enumList=EnumList? | ':') ')'
		//comment=Comment?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//name=IDENT '=' basePrefix=BasePrefix instanceName=Name arraySubscripts=ArraySubscripts?
		//classModification=ClassModification? comment=Comment?
		public Group getGroup_0() { return cGroup_0; }
		
		//name=IDENT
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }
		
		//IDENT
		public RuleCall getNameIDENTTerminalRuleCall_0_0_0() { return cNameIDENTTerminalRuleCall_0_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }
		
		//basePrefix=BasePrefix
		public Assignment getBasePrefixAssignment_0_2() { return cBasePrefixAssignment_0_2; }
		
		//BasePrefix
		public RuleCall getBasePrefixBasePrefixParserRuleCall_0_2_0() { return cBasePrefixBasePrefixParserRuleCall_0_2_0; }
		
		//instanceName=Name
		public Assignment getInstanceNameAssignment_0_3() { return cInstanceNameAssignment_0_3; }
		
		//Name
		public RuleCall getInstanceNameNameParserRuleCall_0_3_0() { return cInstanceNameNameParserRuleCall_0_3_0; }
		
		//arraySubscripts=ArraySubscripts?
		public Assignment getArraySubscriptsAssignment_0_4() { return cArraySubscriptsAssignment_0_4; }
		
		//ArraySubscripts
		public RuleCall getArraySubscriptsArraySubscriptsParserRuleCall_0_4_0() { return cArraySubscriptsArraySubscriptsParserRuleCall_0_4_0; }
		
		//classModification=ClassModification?
		public Assignment getClassModificationAssignment_0_5() { return cClassModificationAssignment_0_5; }
		
		//ClassModification
		public RuleCall getClassModificationClassModificationParserRuleCall_0_5_0() { return cClassModificationClassModificationParserRuleCall_0_5_0; }
		
		//comment=Comment?
		public Assignment getCommentAssignment_0_6() { return cCommentAssignment_0_6; }
		
		//Comment
		public RuleCall getCommentCommentParserRuleCall_0_6_0() { return cCommentCommentParserRuleCall_0_6_0; }
		
		//name=IDENT '=' 'enumeration' '(' (enumList=EnumList? | ':') ')' comment=Comment?
		public Group getGroup_1() { return cGroup_1; }
		
		//name=IDENT
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }
		
		//IDENT
		public RuleCall getNameIDENTTerminalRuleCall_1_0_0() { return cNameIDENTTerminalRuleCall_1_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }
		
		//'enumeration'
		public Keyword getEnumerationKeyword_1_2() { return cEnumerationKeyword_1_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_3() { return cLeftParenthesisKeyword_1_3; }
		
		//(enumList=EnumList? | ':')
		public Alternatives getAlternatives_1_4() { return cAlternatives_1_4; }
		
		//enumList=EnumList?
		public Assignment getEnumListAssignment_1_4_0() { return cEnumListAssignment_1_4_0; }
		
		//EnumList
		public RuleCall getEnumListEnumListParserRuleCall_1_4_0_0() { return cEnumListEnumListParserRuleCall_1_4_0_0; }
		
		//':'
		public Keyword getColonKeyword_1_4_1() { return cColonKeyword_1_4_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_5() { return cRightParenthesisKeyword_1_5; }
		
		//comment=Comment?
		public Assignment getCommentAssignment_1_6() { return cCommentAssignment_1_6; }
		
		//Comment
		public RuleCall getCommentCommentParserRuleCall_1_6_0() { return cCommentCommentParserRuleCall_1_6_0; }
	}
	public class DerClassSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.DerClassSpecifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdIDENTTerminalRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDerKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameNameParserRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final RuleCall cIDENTTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final RuleCall cIDENTTerminalRuleCall_7_1 = (RuleCall)cGroup_7.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cCommentAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cCommentCommentParserRuleCall_9_0 = (RuleCall)cCommentAssignment_9.eContents().get(0);
		
		//DerClassSpecifier:
		//	id=IDENT '=' 'der' '(' name=Name ',' IDENT (',' IDENT)* ')' comment=Comment?;
		@Override public ParserRule getRule() { return rule; }
		
		//id=IDENT '=' 'der' '(' name=Name ',' IDENT (',' IDENT)* ')' comment=Comment?
		public Group getGroup() { return cGroup; }
		
		//id=IDENT
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//IDENT
		public RuleCall getIdIDENTTerminalRuleCall_0_0() { return cIdIDENTTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//'der'
		public Keyword getDerKeyword_2() { return cDerKeyword_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//name=Name
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//Name
		public RuleCall getNameNameParserRuleCall_4_0() { return cNameNameParserRuleCall_4_0; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//IDENT
		public RuleCall getIDENTTerminalRuleCall_6() { return cIDENTTerminalRuleCall_6; }
		
		//(',' IDENT)*
		public Group getGroup_7() { return cGroup_7; }
		
		//','
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }
		
		//IDENT
		public RuleCall getIDENTTerminalRuleCall_7_1() { return cIDENTTerminalRuleCall_7_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
		
		//comment=Comment?
		public Assignment getCommentAssignment_9() { return cCommentAssignment_9; }
		
		//Comment
		public RuleCall getCommentCommentParserRuleCall_9_0() { return cCommentCommentParserRuleCall_9_0; }
	}
	public class BasePrefixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.BasePrefix");
		private final RuleCall cTypePrefixParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//BasePrefix:
		//	TypePrefix;
		@Override public ParserRule getRule() { return rule; }
		
		//TypePrefix
		public RuleCall getTypePrefixParserRuleCall() { return cTypePrefixParserRuleCall; }
	}
	public class EnumListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.EnumList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEnumerationLiteralAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEnumerationLiteralEnumerationLiteralParserRuleCall_0_0 = (RuleCall)cEnumerationLiteralAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cEnumerationLiteralAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEnumerationLiteralEnumerationLiteralParserRuleCall_1_1_0 = (RuleCall)cEnumerationLiteralAssignment_1_1.eContents().get(0);
		
		//EnumList:
		//	enumerationLiteral+=EnumerationLiteral (',' enumerationLiteral+=EnumerationLiteral)*;
		@Override public ParserRule getRule() { return rule; }
		
		//enumerationLiteral+=EnumerationLiteral (',' enumerationLiteral+=EnumerationLiteral)*
		public Group getGroup() { return cGroup; }
		
		//enumerationLiteral+=EnumerationLiteral
		public Assignment getEnumerationLiteralAssignment_0() { return cEnumerationLiteralAssignment_0; }
		
		//EnumerationLiteral
		public RuleCall getEnumerationLiteralEnumerationLiteralParserRuleCall_0_0() { return cEnumerationLiteralEnumerationLiteralParserRuleCall_0_0; }
		
		//(',' enumerationLiteral+=EnumerationLiteral)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//enumerationLiteral+=EnumerationLiteral
		public Assignment getEnumerationLiteralAssignment_1_1() { return cEnumerationLiteralAssignment_1_1; }
		
		//EnumerationLiteral
		public RuleCall getEnumerationLiteralEnumerationLiteralParserRuleCall_1_1_0() { return cEnumerationLiteralEnumerationLiteralParserRuleCall_1_1_0; }
	}
	public class EnumerationLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.EnumerationLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDENTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cCommentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCommentCommentParserRuleCall_1_0 = (RuleCall)cCommentAssignment_1.eContents().get(0);
		
		//EnumerationLiteral:
		//	IDENT comment=Comment;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENT comment=Comment
		public Group getGroup() { return cGroup; }
		
		//IDENT
		public RuleCall getIDENTTerminalRuleCall_0() { return cIDENTTerminalRuleCall_0; }
		
		//comment=Comment
		public Assignment getCommentAssignment_1() { return cCommentAssignment_1; }
		
		//Comment
		public RuleCall getCommentCommentParserRuleCall_1_0() { return cCommentCommentParserRuleCall_1_0; }
	}
	public class CompositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.Composition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementListElementListParserRuleCall_0_0 = (RuleCall)cElementListAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cPublicKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cElementListPublicAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cElementListPublicElementListParserRuleCall_1_0_1_0 = (RuleCall)cElementListPublicAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cProtectedKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cElementListProtectedAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cElementListProtectedElementListParserRuleCall_1_1_1_0 = (RuleCall)cElementListProtectedAssignment_1_1_1.eContents().get(0);
		private final Assignment cEquationSectionsAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cEquationSectionsEquationSectionParserRuleCall_1_2_0 = (RuleCall)cEquationSectionsAssignment_1_2.eContents().get(0);
		private final Assignment cAlgorithmSectionsAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final RuleCall cAlgorithmSectionsAlgorithmSectionParserRuleCall_1_3_0 = (RuleCall)cAlgorithmSectionsAssignment_1_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExternalKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLanguageSpecificationAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLanguageSpecificationLanguageSpecificationParserRuleCall_2_1_0 = (RuleCall)cLanguageSpecificationAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cAnnotationAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cAnnotationAnnotationParserRuleCall_3_0_0 = (RuleCall)cAnnotationAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		
		//Composition:
		//	elementList=ElementList ('public' elementListPublic+=ElementList
		//	| 'protected' elementListProtected+=ElementList
		//	| equationSections+=EquationSection
		//	| algorithmSections+=AlgorithmSection)* ('external' LanguageSpecification=LanguageSpecification)?
		//	(annotation=Annotation ';')?;
		@Override public ParserRule getRule() { return rule; }
		
		//elementList=ElementList ('public' elementListPublic+=ElementList | 'protected' elementListProtected+=ElementList |
		//equationSections+=EquationSection | algorithmSections+=AlgorithmSection)* ('external'
		//LanguageSpecification=LanguageSpecification)? (annotation=Annotation ';')?
		public Group getGroup() { return cGroup; }
		
		//elementList=ElementList
		public Assignment getElementListAssignment_0() { return cElementListAssignment_0; }
		
		//ElementList
		public RuleCall getElementListElementListParserRuleCall_0_0() { return cElementListElementListParserRuleCall_0_0; }
		
		//('public' elementListPublic+=ElementList | 'protected' elementListProtected+=ElementList |
		//equationSections+=EquationSection | algorithmSections+=AlgorithmSection)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'public' elementListPublic+=ElementList
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'public'
		public Keyword getPublicKeyword_1_0_0() { return cPublicKeyword_1_0_0; }
		
		//elementListPublic+=ElementList
		public Assignment getElementListPublicAssignment_1_0_1() { return cElementListPublicAssignment_1_0_1; }
		
		//ElementList
		public RuleCall getElementListPublicElementListParserRuleCall_1_0_1_0() { return cElementListPublicElementListParserRuleCall_1_0_1_0; }
		
		//'protected' elementListProtected+=ElementList
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'protected'
		public Keyword getProtectedKeyword_1_1_0() { return cProtectedKeyword_1_1_0; }
		
		//elementListProtected+=ElementList
		public Assignment getElementListProtectedAssignment_1_1_1() { return cElementListProtectedAssignment_1_1_1; }
		
		//ElementList
		public RuleCall getElementListProtectedElementListParserRuleCall_1_1_1_0() { return cElementListProtectedElementListParserRuleCall_1_1_1_0; }
		
		//equationSections+=EquationSection
		public Assignment getEquationSectionsAssignment_1_2() { return cEquationSectionsAssignment_1_2; }
		
		//EquationSection
		public RuleCall getEquationSectionsEquationSectionParserRuleCall_1_2_0() { return cEquationSectionsEquationSectionParserRuleCall_1_2_0; }
		
		//algorithmSections+=AlgorithmSection
		public Assignment getAlgorithmSectionsAssignment_1_3() { return cAlgorithmSectionsAssignment_1_3; }
		
		//AlgorithmSection
		public RuleCall getAlgorithmSectionsAlgorithmSectionParserRuleCall_1_3_0() { return cAlgorithmSectionsAlgorithmSectionParserRuleCall_1_3_0; }
		
		//('external' LanguageSpecification=LanguageSpecification)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'external'
		public Keyword getExternalKeyword_2_0() { return cExternalKeyword_2_0; }
		
		//LanguageSpecification=LanguageSpecification
		public Assignment getLanguageSpecificationAssignment_2_1() { return cLanguageSpecificationAssignment_2_1; }
		
		//LanguageSpecification
		public RuleCall getLanguageSpecificationLanguageSpecificationParserRuleCall_2_1_0() { return cLanguageSpecificationLanguageSpecificationParserRuleCall_2_1_0; }
		
		//(annotation=Annotation ';')?
		public Group getGroup_3() { return cGroup_3; }
		
		//annotation=Annotation
		public Assignment getAnnotationAssignment_3_0() { return cAnnotationAssignment_3_0; }
		
		//Annotation
		public RuleCall getAnnotationAnnotationParserRuleCall_3_0_0() { return cAnnotationAnnotationParserRuleCall_3_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
	}
	public class LanguageSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.LanguageSpecification");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//LanguageSpecification:
		//	STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	public class ElementListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.ElementList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cElementListAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cElementsElementParserRuleCall_1_0_0 = (RuleCall)cElementsAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//ElementList:
		//	{ElementList} (elements+=Element ';')*;
		@Override public ParserRule getRule() { return rule; }
		
		//{ElementList} (elements+=Element ';')*
		public Group getGroup() { return cGroup; }
		
		//{ElementList}
		public Action getElementListAction_0() { return cElementListAction_0; }
		
		//(elements+=Element ';')*
		public Group getGroup_1() { return cGroup_1; }
		
		//elements+=Element
		public Assignment getElementsAssignment_1_0() { return cElementsAssignment_1_0; }
		
		//Element
		public RuleCall getElementsElementParserRuleCall_1_0_0() { return cElementsElementParserRuleCall_1_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cImportClauseAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cImportClauseImportClauseParserRuleCall_0_0 = (RuleCall)cImportClauseAssignment_0.eContents().get(0);
		private final Assignment cExtendClauseAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cExtendClauseExtendClauseParserRuleCall_1_0 = (RuleCall)cExtendClauseAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cRedeclareAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cRedeclareRedeclareKeyword_2_0_0 = (Keyword)cRedeclareAssignment_2_0.eContents().get(0);
		private final Assignment cFinalAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Keyword cFinalFinalKeyword_2_1_0 = (Keyword)cFinalAssignment_2_1.eContents().get(0);
		private final Assignment cInnerAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final Keyword cInnerInnerKeyword_2_2_0 = (Keyword)cInnerAssignment_2_2.eContents().get(0);
		private final Assignment cOuterAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final Keyword cOuterOuterKeyword_2_3_0 = (Keyword)cOuterAssignment_2_3.eContents().get(0);
		private final Keyword cReplaceableKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Alternatives cAlternatives_2_5 = (Alternatives)cGroup_2.eContents().get(5);
		private final Assignment cClassAssignment_2_5_0 = (Assignment)cAlternatives_2_5.eContents().get(0);
		private final RuleCall cClassClassDefinitionParserRuleCall_2_5_0_0 = (RuleCall)cClassAssignment_2_5_0.eContents().get(0);
		private final Assignment cCompAssignment_2_5_1 = (Assignment)cAlternatives_2_5.eContents().get(1);
		private final RuleCall cCompComponentClauseParserRuleCall_2_5_1_0 = (RuleCall)cCompAssignment_2_5_1.eContents().get(0);
		private final Group cGroup_2_6 = (Group)cGroup_2.eContents().get(6);
		private final Assignment cCcAssignment_2_6_0 = (Assignment)cGroup_2_6.eContents().get(0);
		private final RuleCall cCcConstrainingClauseParserRuleCall_2_6_0_0 = (RuleCall)cCcAssignment_2_6_0.eContents().get(0);
		private final Assignment cCommentAssignment_2_6_1 = (Assignment)cGroup_2_6.eContents().get(1);
		private final RuleCall cCommentCommentParserRuleCall_2_6_1_0 = (RuleCall)cCommentAssignment_2_6_1.eContents().get(0);
		
		//Element:
		//	importClause=ImportClause | extendClause=ExtendClause | redeclare?='redeclare'? final?='final'? inner?='inner'?
		//	outer?='outer'?
		//	//(class=ClassDefinition | comp=ComponentClause) | 
		//	'replaceable'? (class=ClassDefinition | comp=ComponentClause) (cc=ConstrainingClause comment=Comment?)?;
		@Override public ParserRule getRule() { return rule; }
		
		//importClause=ImportClause | extendClause=ExtendClause | redeclare?='redeclare'? final?='final'? inner?='inner'?
		//outer?='outer'? //(class=ClassDefinition | comp=ComponentClause) | 
		//'replaceable'? (class=ClassDefinition | comp=ComponentClause) (cc=ConstrainingClause comment=Comment?)?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//importClause=ImportClause
		public Assignment getImportClauseAssignment_0() { return cImportClauseAssignment_0; }
		
		//ImportClause
		public RuleCall getImportClauseImportClauseParserRuleCall_0_0() { return cImportClauseImportClauseParserRuleCall_0_0; }
		
		//extendClause=ExtendClause
		public Assignment getExtendClauseAssignment_1() { return cExtendClauseAssignment_1; }
		
		//ExtendClause
		public RuleCall getExtendClauseExtendClauseParserRuleCall_1_0() { return cExtendClauseExtendClauseParserRuleCall_1_0; }
		
		//redeclare?='redeclare'? final?='final'? inner?='inner'? outer?='outer'? //(class=ClassDefinition | comp=ComponentClause) | 
		//'replaceable'? (class=ClassDefinition | comp=ComponentClause) (cc=ConstrainingClause comment=Comment?)?
		public Group getGroup_2() { return cGroup_2; }
		
		//redeclare?='redeclare'?
		public Assignment getRedeclareAssignment_2_0() { return cRedeclareAssignment_2_0; }
		
		//'redeclare'
		public Keyword getRedeclareRedeclareKeyword_2_0_0() { return cRedeclareRedeclareKeyword_2_0_0; }
		
		//final?='final'?
		public Assignment getFinalAssignment_2_1() { return cFinalAssignment_2_1; }
		
		//'final'
		public Keyword getFinalFinalKeyword_2_1_0() { return cFinalFinalKeyword_2_1_0; }
		
		//inner?='inner'?
		public Assignment getInnerAssignment_2_2() { return cInnerAssignment_2_2; }
		
		//'inner'
		public Keyword getInnerInnerKeyword_2_2_0() { return cInnerInnerKeyword_2_2_0; }
		
		//outer?='outer'?
		public Assignment getOuterAssignment_2_3() { return cOuterAssignment_2_3; }
		
		//'outer'
		public Keyword getOuterOuterKeyword_2_3_0() { return cOuterOuterKeyword_2_3_0; }
		
		////(class=ClassDefinition | comp=ComponentClause) | 
		//'replaceable'?
		public Keyword getReplaceableKeyword_2_4() { return cReplaceableKeyword_2_4; }
		
		//(class=ClassDefinition | comp=ComponentClause)
		public Alternatives getAlternatives_2_5() { return cAlternatives_2_5; }
		
		//class=ClassDefinition
		public Assignment getClassAssignment_2_5_0() { return cClassAssignment_2_5_0; }
		
		//ClassDefinition
		public RuleCall getClassClassDefinitionParserRuleCall_2_5_0_0() { return cClassClassDefinitionParserRuleCall_2_5_0_0; }
		
		//comp=ComponentClause
		public Assignment getCompAssignment_2_5_1() { return cCompAssignment_2_5_1; }
		
		//ComponentClause
		public RuleCall getCompComponentClauseParserRuleCall_2_5_1_0() { return cCompComponentClauseParserRuleCall_2_5_1_0; }
		
		//(cc=ConstrainingClause comment=Comment?)?
		public Group getGroup_2_6() { return cGroup_2_6; }
		
		//cc=ConstrainingClause
		public Assignment getCcAssignment_2_6_0() { return cCcAssignment_2_6_0; }
		
		//ConstrainingClause
		public RuleCall getCcConstrainingClauseParserRuleCall_2_6_0_0() { return cCcConstrainingClauseParserRuleCall_2_6_0_0; }
		
		//comment=Comment?
		public Assignment getCommentAssignment_2_6_1() { return cCommentAssignment_2_6_1; }
		
		//Comment
		public RuleCall getCommentCommentParserRuleCall_2_6_1_0() { return cCommentCommentParserRuleCall_2_6_1_0; }
	}
	public class ImportClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.ImportClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cIdAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cIdIDENTTerminalRuleCall_1_0_0_0 = (RuleCall)cIdAssignment_1_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cNameAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cNameNameParserRuleCall_1_0_2_0 = (RuleCall)cNameAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cNameAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cNameNameParserRuleCall_1_1_0_0 = (RuleCall)cNameAssignment_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1_1_1 = (Alternatives)cGroup_1_1_1.eContents().get(1);
		private final Keyword cAsteriskKeyword_1_1_1_1_0 = (Keyword)cAlternatives_1_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_1_1_1 = (Group)cAlternatives_1_1_1_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_1_1_1_1_0 = (Keyword)cGroup_1_1_1_1_1.eContents().get(0);
		private final Assignment cImportListAssignment_1_1_1_1_1_1 = (Assignment)cGroup_1_1_1_1_1.eContents().get(1);
		private final RuleCall cImportListImportListParserRuleCall_1_1_1_1_1_1_0 = (RuleCall)cImportListAssignment_1_1_1_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_1_1_1_1_2 = (Keyword)cGroup_1_1_1_1_1.eContents().get(2);
		private final Assignment cCommentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCommentCommentParserRuleCall_2_0 = (RuleCall)cCommentAssignment_2.eContents().get(0);
		
		//ImportClause:
		//	'import' (id=IDENT '=' name=Name | name=Name ('.' ('*' | '{' importList=ImportList '}'))?) comment=Comment?;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' (id=IDENT '=' name=Name | name=Name ('.' ('*' | '{' importList=ImportList '}'))?) comment=Comment?
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//(id=IDENT '=' name=Name | name=Name ('.' ('*' | '{' importList=ImportList '}'))?)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//id=IDENT '=' name=Name
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//id=IDENT
		public Assignment getIdAssignment_1_0_0() { return cIdAssignment_1_0_0; }
		
		//IDENT
		public RuleCall getIdIDENTTerminalRuleCall_1_0_0_0() { return cIdIDENTTerminalRuleCall_1_0_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0_1() { return cEqualsSignKeyword_1_0_1; }
		
		//name=Name
		public Assignment getNameAssignment_1_0_2() { return cNameAssignment_1_0_2; }
		
		//Name
		public RuleCall getNameNameParserRuleCall_1_0_2_0() { return cNameNameParserRuleCall_1_0_2_0; }
		
		//name=Name ('.' ('*' | '{' importList=ImportList '}'))?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//name=Name
		public Assignment getNameAssignment_1_1_0() { return cNameAssignment_1_1_0; }
		
		//Name
		public RuleCall getNameNameParserRuleCall_1_1_0_0() { return cNameNameParserRuleCall_1_1_0_0; }
		
		//('.' ('*' | '{' importList=ImportList '}'))?
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1_1_0() { return cFullStopKeyword_1_1_1_0; }
		
		//('*' | '{' importList=ImportList '}')
		public Alternatives getAlternatives_1_1_1_1() { return cAlternatives_1_1_1_1; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_1_1_1_0() { return cAsteriskKeyword_1_1_1_1_0; }
		
		//'{' importList=ImportList '}'
		public Group getGroup_1_1_1_1_1() { return cGroup_1_1_1_1_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_1_1_1_1_0() { return cLeftCurlyBracketKeyword_1_1_1_1_1_0; }
		
		//importList=ImportList
		public Assignment getImportListAssignment_1_1_1_1_1_1() { return cImportListAssignment_1_1_1_1_1_1; }
		
		//ImportList
		public RuleCall getImportListImportListParserRuleCall_1_1_1_1_1_1_0() { return cImportListImportListParserRuleCall_1_1_1_1_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_1_1_1_1_2() { return cRightCurlyBracketKeyword_1_1_1_1_1_2; }
		
		//comment=Comment?
		public Assignment getCommentAssignment_2() { return cCommentAssignment_2; }
		
		//Comment
		public RuleCall getCommentCommentParserRuleCall_2_0() { return cCommentCommentParserRuleCall_2_0; }
	}
	public class ImportListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.ImportList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdIDENTTerminalRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIdAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIdIDENTTerminalRuleCall_1_1_0 = (RuleCall)cIdAssignment_1_1.eContents().get(0);
		
		//ImportList:
		//	id+=IDENT (',' id+=IDENT)*;
		@Override public ParserRule getRule() { return rule; }
		
		//id+=IDENT (',' id+=IDENT)*
		public Group getGroup() { return cGroup; }
		
		//id+=IDENT
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//IDENT
		public RuleCall getIdIDENTTerminalRuleCall_0_0() { return cIdIDENTTerminalRuleCall_0_0; }
		
		//(',' id+=IDENT)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//id+=IDENT
		public Assignment getIdAssignment_1_1() { return cIdAssignment_1_1; }
		
		//IDENT
		public RuleCall getIdIDENTTerminalRuleCall_1_1_0() { return cIdIDENTTerminalRuleCall_1_1_0; }
	}
	public class ExtendClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.ExtendClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExtendsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cClassModificationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClassModificationClassModificationParserRuleCall_2_0 = (RuleCall)cClassModificationAssignment_2.eContents().get(0);
		private final Assignment cAnnotationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAnnotationAnnotationParserRuleCall_3_0 = (RuleCall)cAnnotationAssignment_3.eContents().get(0);
		
		//// B.2.3 Extends
		//ExtendClause:
		//	'extends' name=Name classModification=ClassModification? annotation=Annotation?;
		@Override public ParserRule getRule() { return rule; }
		
		//'extends' name=Name classModification=ClassModification? annotation=Annotation?
		public Group getGroup() { return cGroup; }
		
		//'extends'
		public Keyword getExtendsKeyword_0() { return cExtendsKeyword_0; }
		
		//name=Name
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Name
		public RuleCall getNameNameParserRuleCall_1_0() { return cNameNameParserRuleCall_1_0; }
		
		//classModification=ClassModification?
		public Assignment getClassModificationAssignment_2() { return cClassModificationAssignment_2; }
		
		//ClassModification
		public RuleCall getClassModificationClassModificationParserRuleCall_2_0() { return cClassModificationClassModificationParserRuleCall_2_0; }
		
		//annotation=Annotation?
		public Assignment getAnnotationAssignment_3() { return cAnnotationAssignment_3; }
		
		//Annotation
		public RuleCall getAnnotationAnnotationParserRuleCall_3_0() { return cAnnotationAnnotationParserRuleCall_3_0; }
	}
	public class ConstrainingClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.ConstrainingClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstrainedbyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cClassModificationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClassModificationClassModificationParserRuleCall_2_0 = (RuleCall)cClassModificationAssignment_2.eContents().get(0);
		
		//ConstrainingClause:
		//	'constrainedby' name=Name classModification=ClassModification?;
		@Override public ParserRule getRule() { return rule; }
		
		//'constrainedby' name=Name classModification=ClassModification?
		public Group getGroup() { return cGroup; }
		
		//'constrainedby'
		public Keyword getConstrainedbyKeyword_0() { return cConstrainedbyKeyword_0; }
		
		//name=Name
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Name
		public RuleCall getNameNameParserRuleCall_1_0() { return cNameNameParserRuleCall_1_0; }
		
		//classModification=ClassModification?
		public Assignment getClassModificationAssignment_2() { return cClassModificationAssignment_2; }
		
		//ClassModification
		public RuleCall getClassModificationClassModificationParserRuleCall_2_0() { return cClassModificationClassModificationParserRuleCall_2_0; }
	}
	public class ModificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.Modification");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cClassModificationAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cClassModificationClassModificationParserRuleCall_0_0_0 = (RuleCall)cClassModificationAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cExpressionAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_0_1_1_0 = (RuleCall)cExpressionAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cColonEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExpressionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_2_1_0 = (RuleCall)cExpressionAssignment_2_1.eContents().get(0);
		
		//Modification:
		//	classModification=ClassModification ('=' expression=Expression)?
		//	| '=' expression=Expression
		//	| ':=' expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//classModification=ClassModification ('=' expression=Expression)? | '=' expression=Expression | ':='
		//expression=Expression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//classModification=ClassModification ('=' expression=Expression)?
		public Group getGroup_0() { return cGroup_0; }
		
		//classModification=ClassModification
		public Assignment getClassModificationAssignment_0_0() { return cClassModificationAssignment_0_0; }
		
		//ClassModification
		public RuleCall getClassModificationClassModificationParserRuleCall_0_0_0() { return cClassModificationClassModificationParserRuleCall_0_0_0; }
		
		//('=' expression=Expression)?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_1_0() { return cEqualsSignKeyword_0_1_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_0_1_1() { return cExpressionAssignment_0_1_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_1_1_0() { return cExpressionExpressionParserRuleCall_0_1_1_0; }
		
		//'=' expression=Expression
		public Group getGroup_1() { return cGroup_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1_1() { return cExpressionAssignment_1_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_1_0() { return cExpressionExpressionParserRuleCall_1_1_0; }
		
		//':=' expression=Expression
		public Group getGroup_2() { return cGroup_2; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_2_0() { return cColonEqualsSignKeyword_2_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2_1() { return cExpressionAssignment_2_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_1_0() { return cExpressionExpressionParserRuleCall_2_1_0; }
	}
	public class ClassModificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.ClassModification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClassModificationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgumentListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgumentListArgumentListParserRuleCall_2_0 = (RuleCall)cArgumentListAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ClassModification:
		//	{ClassModification} '(' argumentList=ArgumentList? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{ClassModification} '(' argumentList=ArgumentList? ')'
		public Group getGroup() { return cGroup; }
		
		//{ClassModification}
		public Action getClassModificationAction_0() { return cClassModificationAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//argumentList=ArgumentList?
		public Assignment getArgumentListAssignment_2() { return cArgumentListAssignment_2; }
		
		//ArgumentList
		public RuleCall getArgumentListArgumentListParserRuleCall_2_0() { return cArgumentListArgumentListParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ArgumentListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.ArgumentList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArgumentsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArgumentsArgumentParserRuleCall_0_0 = (RuleCall)cArgumentsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgumentsArgumentParserRuleCall_1_1_0 = (RuleCall)cArgumentsAssignment_1_1.eContents().get(0);
		
		//ArgumentList:
		//	arguments+=Argument (',' arguments+=Argument)*;
		@Override public ParserRule getRule() { return rule; }
		
		//arguments+=Argument (',' arguments+=Argument)*
		public Group getGroup() { return cGroup; }
		
		//arguments+=Argument
		public Assignment getArgumentsAssignment_0() { return cArgumentsAssignment_0; }
		
		//Argument
		public RuleCall getArgumentsArgumentParserRuleCall_0_0() { return cArgumentsArgumentParserRuleCall_0_0; }
		
		//(',' arguments+=Argument)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//arguments+=Argument
		public Assignment getArgumentsAssignment_1_1() { return cArgumentsAssignment_1_1; }
		
		//Argument
		public RuleCall getArgumentsArgumentParserRuleCall_1_1_0() { return cArgumentsArgumentParserRuleCall_1_1_0; }
	}
	public class ArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.Argument");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cElementModificationOrReplaceableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cElementRedeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Argument:
		//	ElementModificationOrReplaceable | ElementRedeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//ElementModificationOrReplaceable | ElementRedeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ElementModificationOrReplaceable
		public RuleCall getElementModificationOrReplaceableParserRuleCall_0() { return cElementModificationOrReplaceableParserRuleCall_0; }
		
		//ElementRedeclaration
		public RuleCall getElementRedeclarationParserRuleCall_1() { return cElementRedeclarationParserRuleCall_1; }
	}
	public class ElementModificationOrReplaceableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.ElementModificationOrReplaceable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEachAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cEachEachKeyword_0_0 = (Keyword)cEachAssignment_0.eContents().get(0);
		private final Assignment cFinalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cFinalFinalKeyword_1_0 = (Keyword)cFinalAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cElementModOrRepAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cElementModOrRepElementModificationParserRuleCall_2_0_0 = (RuleCall)cElementModOrRepAssignment_2_0.eContents().get(0);
		private final Assignment cElementModOrRepAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cElementModOrRepElementReplaceableParserRuleCall_2_1_0 = (RuleCall)cElementModOrRepAssignment_2_1.eContents().get(0);
		
		//ElementModificationOrReplaceable:
		//	each?='each'? final?='final'? (elementModOrRep=ElementModification | elementModOrRep=ElementReplaceable);
		@Override public ParserRule getRule() { return rule; }
		
		//each?='each'? final?='final'? (elementModOrRep=ElementModification | elementModOrRep=ElementReplaceable)
		public Group getGroup() { return cGroup; }
		
		//each?='each'?
		public Assignment getEachAssignment_0() { return cEachAssignment_0; }
		
		//'each'
		public Keyword getEachEachKeyword_0_0() { return cEachEachKeyword_0_0; }
		
		//final?='final'?
		public Assignment getFinalAssignment_1() { return cFinalAssignment_1; }
		
		//'final'
		public Keyword getFinalFinalKeyword_1_0() { return cFinalFinalKeyword_1_0; }
		
		//(elementModOrRep=ElementModification | elementModOrRep=ElementReplaceable)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//elementModOrRep=ElementModification
		public Assignment getElementModOrRepAssignment_2_0() { return cElementModOrRepAssignment_2_0; }
		
		//ElementModification
		public RuleCall getElementModOrRepElementModificationParserRuleCall_2_0_0() { return cElementModOrRepElementModificationParserRuleCall_2_0_0; }
		
		//elementModOrRep=ElementReplaceable
		public Assignment getElementModOrRepAssignment_2_1() { return cElementModOrRepAssignment_2_1; }
		
		//ElementReplaceable
		public RuleCall getElementModOrRepElementReplaceableParserRuleCall_2_1_0() { return cElementModOrRepElementReplaceableParserRuleCall_2_1_0; }
	}
	public class ElementModificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.ElementModification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cModificationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModificationModificationParserRuleCall_1_0 = (RuleCall)cModificationAssignment_1.eContents().get(0);
		private final Assignment cStringCommentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStringCommentStringCommentParserRuleCall_2_0 = (RuleCall)cStringCommentAssignment_2.eContents().get(0);
		
		//ElementModification:
		//	name=Name modification=Modification? stringComment=StringComment?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=Name modification=Modification? stringComment=StringComment?
		public Group getGroup() { return cGroup; }
		
		//name=Name
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//Name
		public RuleCall getNameNameParserRuleCall_0_0() { return cNameNameParserRuleCall_0_0; }
		
		//modification=Modification?
		public Assignment getModificationAssignment_1() { return cModificationAssignment_1; }
		
		//Modification
		public RuleCall getModificationModificationParserRuleCall_1_0() { return cModificationModificationParserRuleCall_1_0; }
		
		//stringComment=StringComment?
		public Assignment getStringCommentAssignment_2() { return cStringCommentAssignment_2; }
		
		//StringComment
		public RuleCall getStringCommentStringCommentParserRuleCall_2_0() { return cStringCommentStringCommentParserRuleCall_2_0; }
	}
	public class ElementRedeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.ElementRedeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRedeclareAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cRedeclareRedeclareKeyword_0_0 = (Keyword)cRedeclareAssignment_0.eContents().get(0);
		private final Assignment cEachAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cEachEachKeyword_1_0 = (Keyword)cEachAssignment_1.eContents().get(0);
		private final Assignment cFinalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cFinalFinalKeyword_2_0 = (Keyword)cFinalAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cAlternatives_3.eContents().get(0);
		private final Assignment cClassDefinitionAssignment_3_0_0 = (Assignment)cAlternatives_3_0.eContents().get(0);
		private final RuleCall cClassDefinitionShortClassDefinitionParserRuleCall_3_0_0_0 = (RuleCall)cClassDefinitionAssignment_3_0_0.eContents().get(0);
		private final Assignment cComponentClauseAssignment_3_0_1 = (Assignment)cAlternatives_3_0.eContents().get(1);
		private final RuleCall cComponentClauseComponentClause1ParserRuleCall_3_0_1_0 = (RuleCall)cComponentClauseAssignment_3_0_1.eContents().get(0);
		private final Assignment cElementAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cElementElementReplaceableParserRuleCall_3_1_0 = (RuleCall)cElementAssignment_3_1.eContents().get(0);
		
		//ElementRedeclaration:
		//	redeclare?='redeclare' each?='each'? final?='final'? ((classDefinition=ShortClassDefinition |
		//	componentClause=ComponentClause1) | element=ElementReplaceable);
		@Override public ParserRule getRule() { return rule; }
		
		//redeclare?='redeclare' each?='each'? final?='final'? ((classDefinition=ShortClassDefinition |
		//componentClause=ComponentClause1) | element=ElementReplaceable)
		public Group getGroup() { return cGroup; }
		
		//redeclare?='redeclare'
		public Assignment getRedeclareAssignment_0() { return cRedeclareAssignment_0; }
		
		//'redeclare'
		public Keyword getRedeclareRedeclareKeyword_0_0() { return cRedeclareRedeclareKeyword_0_0; }
		
		//each?='each'?
		public Assignment getEachAssignment_1() { return cEachAssignment_1; }
		
		//'each'
		public Keyword getEachEachKeyword_1_0() { return cEachEachKeyword_1_0; }
		
		//final?='final'?
		public Assignment getFinalAssignment_2() { return cFinalAssignment_2; }
		
		//'final'
		public Keyword getFinalFinalKeyword_2_0() { return cFinalFinalKeyword_2_0; }
		
		//((classDefinition=ShortClassDefinition | componentClause=ComponentClause1) | element=ElementReplaceable)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//(classDefinition=ShortClassDefinition | componentClause=ComponentClause1)
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }
		
		//classDefinition=ShortClassDefinition
		public Assignment getClassDefinitionAssignment_3_0_0() { return cClassDefinitionAssignment_3_0_0; }
		
		//ShortClassDefinition
		public RuleCall getClassDefinitionShortClassDefinitionParserRuleCall_3_0_0_0() { return cClassDefinitionShortClassDefinitionParserRuleCall_3_0_0_0; }
		
		//componentClause=ComponentClause1
		public Assignment getComponentClauseAssignment_3_0_1() { return cComponentClauseAssignment_3_0_1; }
		
		//ComponentClause1
		public RuleCall getComponentClauseComponentClause1ParserRuleCall_3_0_1_0() { return cComponentClauseComponentClause1ParserRuleCall_3_0_1_0; }
		
		//element=ElementReplaceable
		public Assignment getElementAssignment_3_1() { return cElementAssignment_3_1; }
		
		//ElementReplaceable
		public RuleCall getElementElementReplaceableParserRuleCall_3_1_0() { return cElementElementReplaceableParserRuleCall_3_1_0; }
	}
	public class ElementReplaceableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.ElementReplaceable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReplaceableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cReplaceableReplaceableKeyword_0_0 = (Keyword)cReplaceableAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cElementAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cElementShortClassDefinitionParserRuleCall_1_0_0 = (RuleCall)cElementAssignment_1_0.eContents().get(0);
		private final Assignment cElementAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cElementComponentClause1ParserRuleCall_1_1_0 = (RuleCall)cElementAssignment_1_1.eContents().get(0);
		private final Assignment cConstraintAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstraintConstrainingClauseParserRuleCall_2_0 = (RuleCall)cConstraintAssignment_2.eContents().get(0);
		
		//ElementReplaceable:
		//	replaceable?='replaceable' (element=ShortClassDefinition | element=ComponentClause1) constraint=ConstrainingClause?;
		@Override public ParserRule getRule() { return rule; }
		
		//replaceable?='replaceable' (element=ShortClassDefinition | element=ComponentClause1) constraint=ConstrainingClause?
		public Group getGroup() { return cGroup; }
		
		//replaceable?='replaceable'
		public Assignment getReplaceableAssignment_0() { return cReplaceableAssignment_0; }
		
		//'replaceable'
		public Keyword getReplaceableReplaceableKeyword_0_0() { return cReplaceableReplaceableKeyword_0_0; }
		
		//(element=ShortClassDefinition | element=ComponentClause1)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//element=ShortClassDefinition
		public Assignment getElementAssignment_1_0() { return cElementAssignment_1_0; }
		
		//ShortClassDefinition
		public RuleCall getElementShortClassDefinitionParserRuleCall_1_0_0() { return cElementShortClassDefinitionParserRuleCall_1_0_0; }
		
		//element=ComponentClause1
		public Assignment getElementAssignment_1_1() { return cElementAssignment_1_1; }
		
		//ComponentClause1
		public RuleCall getElementComponentClause1ParserRuleCall_1_1_0() { return cElementComponentClause1ParserRuleCall_1_1_0; }
		
		//constraint=ConstrainingClause?
		public Assignment getConstraintAssignment_2() { return cConstraintAssignment_2; }
		
		//ConstrainingClause
		public RuleCall getConstraintConstrainingClauseParserRuleCall_2_0() { return cConstraintConstrainingClauseParserRuleCall_2_0; }
	}
	public class ComponentClause1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.ComponentClause1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypePrefixAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypePrefixTypePrefixParserRuleCall_0_0 = (RuleCall)cTypePrefixAssignment_0.eContents().get(0);
		private final Assignment cTypeSpecifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeSpecifierTypeSpecifierParserRuleCall_1_0 = (RuleCall)cTypeSpecifierAssignment_1.eContents().get(0);
		private final Assignment cComponentDeclarationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cComponentDeclarationComponentDeclaration1ParserRuleCall_2_0 = (RuleCall)cComponentDeclarationAssignment_2.eContents().get(0);
		
		//ComponentClause1:
		//	typePrefix=TypePrefix typeSpecifier=TypeSpecifier componentDeclaration=ComponentDeclaration1;
		@Override public ParserRule getRule() { return rule; }
		
		//typePrefix=TypePrefix typeSpecifier=TypeSpecifier componentDeclaration=ComponentDeclaration1
		public Group getGroup() { return cGroup; }
		
		//typePrefix=TypePrefix
		public Assignment getTypePrefixAssignment_0() { return cTypePrefixAssignment_0; }
		
		//TypePrefix
		public RuleCall getTypePrefixTypePrefixParserRuleCall_0_0() { return cTypePrefixTypePrefixParserRuleCall_0_0; }
		
		//typeSpecifier=TypeSpecifier
		public Assignment getTypeSpecifierAssignment_1() { return cTypeSpecifierAssignment_1; }
		
		//TypeSpecifier
		public RuleCall getTypeSpecifierTypeSpecifierParserRuleCall_1_0() { return cTypeSpecifierTypeSpecifierParserRuleCall_1_0; }
		
		//componentDeclaration=ComponentDeclaration1
		public Assignment getComponentDeclarationAssignment_2() { return cComponentDeclarationAssignment_2; }
		
		//ComponentDeclaration1
		public RuleCall getComponentDeclarationComponentDeclaration1ParserRuleCall_2_0() { return cComponentDeclarationComponentDeclaration1ParserRuleCall_2_0; }
	}
	public class ComponentDeclaration1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.ComponentDeclaration1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cCommentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCommentCommentParserRuleCall_1_0 = (RuleCall)cCommentAssignment_1.eContents().get(0);
		
		//ComponentDeclaration1:
		//	Declaration comment=Comment?;
		@Override public ParserRule getRule() { return rule; }
		
		//Declaration comment=Comment?
		public Group getGroup() { return cGroup; }
		
		//Declaration
		public RuleCall getDeclarationParserRuleCall_0() { return cDeclarationParserRuleCall_0; }
		
		//comment=Comment?
		public Assignment getCommentAssignment_1() { return cCommentAssignment_1; }
		
		//Comment
		public RuleCall getCommentCommentParserRuleCall_1_0() { return cCommentCommentParserRuleCall_1_0; }
	}
	public class ShortClassDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.ShortClassDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cClassPrefixesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cClassPrefixesClassPrefixesParserRuleCall_0_0 = (RuleCall)cClassPrefixesAssignment_0.eContents().get(0);
		private final Assignment cClassSpecifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cClassSpecifierShortClassSpecifierParserRuleCall_1_0 = (RuleCall)cClassSpecifierAssignment_1.eContents().get(0);
		
		//ShortClassDefinition:
		//	classPrefixes=ClassPrefixes classSpecifier=ShortClassSpecifier;
		@Override public ParserRule getRule() { return rule; }
		
		//classPrefixes=ClassPrefixes classSpecifier=ShortClassSpecifier
		public Group getGroup() { return cGroup; }
		
		//classPrefixes=ClassPrefixes
		public Assignment getClassPrefixesAssignment_0() { return cClassPrefixesAssignment_0; }
		
		//ClassPrefixes
		public RuleCall getClassPrefixesClassPrefixesParserRuleCall_0_0() { return cClassPrefixesClassPrefixesParserRuleCall_0_0; }
		
		//classSpecifier=ShortClassSpecifier
		public Assignment getClassSpecifierAssignment_1() { return cClassSpecifierAssignment_1; }
		
		//ShortClassSpecifier
		public RuleCall getClassSpecifierShortClassSpecifierParserRuleCall_1_0() { return cClassSpecifierShortClassSpecifierParserRuleCall_1_0; }
	}
	public class ComponentClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.ComponentClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypePrefixAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypePrefixTypePrefixParserRuleCall_0_0 = (RuleCall)cTypePrefixAssignment_0.eContents().get(0);
		private final Assignment cTypeSpecAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeSpecTypeSpecifierParserRuleCall_1_0 = (RuleCall)cTypeSpecAssignment_1.eContents().get(0);
		private final Assignment cArraySubscriptsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArraySubscriptsArraySubscriptsParserRuleCall_2_0 = (RuleCall)cArraySubscriptsAssignment_2.eContents().get(0);
		private final Assignment cComponentListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cComponentListComponentListParserRuleCall_3_0 = (RuleCall)cComponentListAssignment_3.eContents().get(0);
		
		//ComponentClause:
		//	typePrefix=TypePrefix typeSpec=TypeSpecifier arraySubscripts=ArraySubscripts? componentList=ComponentList;
		@Override public ParserRule getRule() { return rule; }
		
		//typePrefix=TypePrefix typeSpec=TypeSpecifier arraySubscripts=ArraySubscripts? componentList=ComponentList
		public Group getGroup() { return cGroup; }
		
		//typePrefix=TypePrefix
		public Assignment getTypePrefixAssignment_0() { return cTypePrefixAssignment_0; }
		
		//TypePrefix
		public RuleCall getTypePrefixTypePrefixParserRuleCall_0_0() { return cTypePrefixTypePrefixParserRuleCall_0_0; }
		
		//typeSpec=TypeSpecifier
		public Assignment getTypeSpecAssignment_1() { return cTypeSpecAssignment_1; }
		
		//TypeSpecifier
		public RuleCall getTypeSpecTypeSpecifierParserRuleCall_1_0() { return cTypeSpecTypeSpecifierParserRuleCall_1_0; }
		
		//arraySubscripts=ArraySubscripts?
		public Assignment getArraySubscriptsAssignment_2() { return cArraySubscriptsAssignment_2; }
		
		//ArraySubscripts
		public RuleCall getArraySubscriptsArraySubscriptsParserRuleCall_2_0() { return cArraySubscriptsArraySubscriptsParserRuleCall_2_0; }
		
		//componentList=ComponentList
		public Assignment getComponentListAssignment_3() { return cComponentListAssignment_3; }
		
		//ComponentList
		public RuleCall getComponentListComponentListParserRuleCall_3_0() { return cComponentListComponentListParserRuleCall_3_0; }
	}
	public class TypePrefixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.TypePrefix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTypePrefixAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cFlowAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cFlowFlowKeyword_1_0_0 = (Keyword)cFlowAssignment_1_0.eContents().get(0);
		private final Assignment cStreamAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cStreamStreamKeyword_1_1_0 = (Keyword)cStreamAssignment_1_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cConstantAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final Keyword cConstantConstantKeyword_2_0_0 = (Keyword)cConstantAssignment_2_0.eContents().get(0);
		private final Assignment cParameterAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final Keyword cParameterParameterKeyword_2_1_0 = (Keyword)cParameterAssignment_2_1.eContents().get(0);
		private final Assignment cDiscreteAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final Keyword cDiscreteDiscreteKeyword_2_2_0 = (Keyword)cDiscreteAssignment_2_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cInputAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final Keyword cInputInputKeyword_3_0_0 = (Keyword)cInputAssignment_3_0.eContents().get(0);
		private final Assignment cOutputAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final Keyword cOutputOutputKeyword_3_1_0 = (Keyword)cOutputAssignment_3_1.eContents().get(0);
		
		//TypePrefix:
		//	{TypePrefix} (flow?='flow' | stream?='stream')? (constant?='constant' | parameter?='parameter' |
		//	discrete?='discrete')? (input?='input' | output?='output')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{TypePrefix} (flow?='flow' | stream?='stream')? (constant?='constant' | parameter?='parameter' | discrete?='discrete')?
		//(input?='input' | output?='output')?
		public Group getGroup() { return cGroup; }
		
		//{TypePrefix}
		public Action getTypePrefixAction_0() { return cTypePrefixAction_0; }
		
		//(flow?='flow' | stream?='stream')?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//flow?='flow'
		public Assignment getFlowAssignment_1_0() { return cFlowAssignment_1_0; }
		
		//'flow'
		public Keyword getFlowFlowKeyword_1_0_0() { return cFlowFlowKeyword_1_0_0; }
		
		//stream?='stream'
		public Assignment getStreamAssignment_1_1() { return cStreamAssignment_1_1; }
		
		//'stream'
		public Keyword getStreamStreamKeyword_1_1_0() { return cStreamStreamKeyword_1_1_0; }
		
		//(constant?='constant' | parameter?='parameter' | discrete?='discrete')?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//constant?='constant'
		public Assignment getConstantAssignment_2_0() { return cConstantAssignment_2_0; }
		
		//'constant'
		public Keyword getConstantConstantKeyword_2_0_0() { return cConstantConstantKeyword_2_0_0; }
		
		//parameter?='parameter'
		public Assignment getParameterAssignment_2_1() { return cParameterAssignment_2_1; }
		
		//'parameter'
		public Keyword getParameterParameterKeyword_2_1_0() { return cParameterParameterKeyword_2_1_0; }
		
		//discrete?='discrete'
		public Assignment getDiscreteAssignment_2_2() { return cDiscreteAssignment_2_2; }
		
		//'discrete'
		public Keyword getDiscreteDiscreteKeyword_2_2_0() { return cDiscreteDiscreteKeyword_2_2_0; }
		
		//(input?='input' | output?='output')?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//input?='input'
		public Assignment getInputAssignment_3_0() { return cInputAssignment_3_0; }
		
		//'input'
		public Keyword getInputInputKeyword_3_0_0() { return cInputInputKeyword_3_0_0; }
		
		//output?='output'
		public Assignment getOutputAssignment_3_1() { return cOutputAssignment_3_1; }
		
		//'output'
		public Keyword getOutputOutputKeyword_3_1_0() { return cOutputOutputKeyword_3_1_0; }
	}
	public class TypeSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.TypeSpecifier");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//TypeSpecifier:
		//	name=Name;
		@Override public ParserRule getRule() { return rule; }
		
		//name=Name
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//Name
		public RuleCall getNameNameParserRuleCall_0() { return cNameNameParserRuleCall_0; }
	}
	public class ComponentListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.ComponentList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cComponentsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cComponentsComponentDeclarationParserRuleCall_0_0 = (RuleCall)cComponentsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cComponentsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cComponentsComponentDeclarationParserRuleCall_1_1_0 = (RuleCall)cComponentsAssignment_1_1.eContents().get(0);
		
		//ComponentList:
		//	components+=ComponentDeclaration ("," components+=ComponentDeclaration)*;
		@Override public ParserRule getRule() { return rule; }
		
		//components+=ComponentDeclaration ("," components+=ComponentDeclaration)*
		public Group getGroup() { return cGroup; }
		
		//components+=ComponentDeclaration
		public Assignment getComponentsAssignment_0() { return cComponentsAssignment_0; }
		
		//ComponentDeclaration
		public RuleCall getComponentsComponentDeclarationParserRuleCall_0_0() { return cComponentsComponentDeclarationParserRuleCall_0_0; }
		
		//("," components+=ComponentDeclaration)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//components+=ComponentDeclaration
		public Assignment getComponentsAssignment_1_1() { return cComponentsAssignment_1_1; }
		
		//ComponentDeclaration
		public RuleCall getComponentsComponentDeclarationParserRuleCall_1_1_0() { return cComponentsComponentDeclarationParserRuleCall_1_1_0; }
	}
	public class ComponentDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.ComponentDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDeclarationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDeclarationDeclarationParserRuleCall_0_0 = (RuleCall)cDeclarationAssignment_0.eContents().get(0);
		private final Assignment cConditionAttributeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionAttributeConditionAttributeParserRuleCall_1_0 = (RuleCall)cConditionAttributeAssignment_1.eContents().get(0);
		private final Assignment cCommentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCommentStringCommentParserRuleCall_2_0 = (RuleCall)cCommentAssignment_2.eContents().get(0);
		private final Assignment cAnnotationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAnnotationAnnotationParserRuleCall_3_0 = (RuleCall)cAnnotationAssignment_3.eContents().get(0);
		
		//// TODO modified comment with respect to the modelica manual
		//ComponentDeclaration:
		//	declaration=Declaration conditionAttribute=ConditionAttribute? comment=StringComment? annotation=Annotation?;
		@Override public ParserRule getRule() { return rule; }
		
		//declaration=Declaration conditionAttribute=ConditionAttribute? comment=StringComment? annotation=Annotation?
		public Group getGroup() { return cGroup; }
		
		//declaration=Declaration
		public Assignment getDeclarationAssignment_0() { return cDeclarationAssignment_0; }
		
		//Declaration
		public RuleCall getDeclarationDeclarationParserRuleCall_0_0() { return cDeclarationDeclarationParserRuleCall_0_0; }
		
		//conditionAttribute=ConditionAttribute?
		public Assignment getConditionAttributeAssignment_1() { return cConditionAttributeAssignment_1; }
		
		//ConditionAttribute
		public RuleCall getConditionAttributeConditionAttributeParserRuleCall_1_0() { return cConditionAttributeConditionAttributeParserRuleCall_1_0; }
		
		//comment=StringComment?
		public Assignment getCommentAssignment_2() { return cCommentAssignment_2; }
		
		//StringComment
		public RuleCall getCommentStringCommentParserRuleCall_2_0() { return cCommentStringCommentParserRuleCall_2_0; }
		
		//annotation=Annotation?
		public Assignment getAnnotationAssignment_3() { return cAnnotationAssignment_3; }
		
		//Annotation
		public RuleCall getAnnotationAnnotationParserRuleCall_3_0() { return cAnnotationAnnotationParserRuleCall_3_0; }
	}
	public class ConditionAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.ConditionAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		
		//ConditionAttribute:
		//	'if' condition=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' condition=Expression
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//condition=Expression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_1_0() { return cConditionExpressionParserRuleCall_1_0; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.Declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDENTTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cArraySubscriptsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArraySubscriptsArraySubscriptsParserRuleCall_1_0 = (RuleCall)cArraySubscriptsAssignment_1.eContents().get(0);
		private final Assignment cModificationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cModificationModificationParserRuleCall_2_0 = (RuleCall)cModificationAssignment_2.eContents().get(0);
		
		//// TODO modified with respect to the modelica manual: modification is now optional
		//Declaration:
		//	name=IDENT arraySubscripts=ArraySubscripts? modification=Modification?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=IDENT arraySubscripts=ArraySubscripts? modification=Modification?
		public Group getGroup() { return cGroup; }
		
		//name=IDENT
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//IDENT
		public RuleCall getNameIDENTTerminalRuleCall_0_0() { return cNameIDENTTerminalRuleCall_0_0; }
		
		//arraySubscripts=ArraySubscripts?
		public Assignment getArraySubscriptsAssignment_1() { return cArraySubscriptsAssignment_1; }
		
		//ArraySubscripts
		public RuleCall getArraySubscriptsArraySubscriptsParserRuleCall_1_0() { return cArraySubscriptsArraySubscriptsParserRuleCall_1_0; }
		
		//modification=Modification?
		public Assignment getModificationAssignment_2() { return cModificationAssignment_2; }
		
		//Modification
		public RuleCall getModificationModificationParserRuleCall_2_0() { return cModificationModificationParserRuleCall_2_0; }
	}
	public class EquationSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.EquationSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInitialAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cInitialInitialKeyword_0_0 = (Keyword)cInitialAssignment_0.eContents().get(0);
		private final Assignment cEquationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cEquationEquationKeyword_1_0 = (Keyword)cEquationAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cEquationsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cEquationsEquationParserRuleCall_2_0_0 = (RuleCall)cEquationsAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//// B.2.6 Equations
		//EquationSection:
		//	initial?='initial'? equation='equation' (equations+=Equation ';')*;
		@Override public ParserRule getRule() { return rule; }
		
		//initial?='initial'? equation='equation' (equations+=Equation ';')*
		public Group getGroup() { return cGroup; }
		
		//initial?='initial'?
		public Assignment getInitialAssignment_0() { return cInitialAssignment_0; }
		
		//'initial'
		public Keyword getInitialInitialKeyword_0_0() { return cInitialInitialKeyword_0_0; }
		
		//equation='equation'
		public Assignment getEquationAssignment_1() { return cEquationAssignment_1; }
		
		//'equation'
		public Keyword getEquationEquationKeyword_1_0() { return cEquationEquationKeyword_1_0; }
		
		//(equations+=Equation ';')*
		public Group getGroup_2() { return cGroup_2; }
		
		//equations+=Equation
		public Assignment getEquationsAssignment_2_0() { return cEquationsAssignment_2_0; }
		
		//Equation
		public RuleCall getEquationsEquationParserRuleCall_2_0_0() { return cEquationsEquationParserRuleCall_2_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
	}
	public class AlgorithmSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.AlgorithmSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInitialAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cInitialInitialKeyword_0_0 = (Keyword)cInitialAssignment_0.eContents().get(0);
		private final Assignment cAlgorithmAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cAlgorithmAlgorithmKeyword_1_0 = (Keyword)cAlgorithmAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cStatementsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cStatementsStatementParserRuleCall_2_0_0 = (RuleCall)cStatementsAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//AlgorithmSection:
		//	initial?='initial'? algorithm='algorithm' (statements+=Statement ';')*;
		@Override public ParserRule getRule() { return rule; }
		
		//initial?='initial'? algorithm='algorithm' (statements+=Statement ';')*
		public Group getGroup() { return cGroup; }
		
		//initial?='initial'?
		public Assignment getInitialAssignment_0() { return cInitialAssignment_0; }
		
		//'initial'
		public Keyword getInitialInitialKeyword_0_0() { return cInitialInitialKeyword_0_0; }
		
		//algorithm='algorithm'
		public Assignment getAlgorithmAssignment_1() { return cAlgorithmAssignment_1; }
		
		//'algorithm'
		public Keyword getAlgorithmAlgorithmKeyword_1_0() { return cAlgorithmAlgorithmKeyword_1_0; }
		
		//(statements+=Statement ';')*
		public Group getGroup_2() { return cGroup_2; }
		
		//statements+=Statement
		public Assignment getStatementsAssignment_2_0() { return cStatementsAssignment_2_0; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_2_0_0() { return cStatementsStatementParserRuleCall_2_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
	}
	public class EquationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.Equation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Group cGroup_0_0_0 = (Group)cAlternatives_0_0.eContents().get(0);
		private final RuleCall cSimpleExpressionParserRuleCall_0_0_0_0 = (RuleCall)cGroup_0_0_0.eContents().get(0);
		private final Group cGroup_0_0_0_1 = (Group)cGroup_0_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0_0_0_1_0 = (Keyword)cGroup_0_0_0_1.eContents().get(0);
		private final Assignment cEquationAssignment_0_0_0_1_1 = (Assignment)cGroup_0_0_0_1.eContents().get(1);
		private final RuleCall cEquationExpressionParserRuleCall_0_0_0_1_1_0 = (RuleCall)cEquationAssignment_0_0_0_1_1.eContents().get(0);
		private final RuleCall cEquationIfParserRuleCall_0_0_1 = (RuleCall)cAlternatives_0_0.eContents().get(1);
		private final RuleCall cEquationForParserRuleCall_0_0_2 = (RuleCall)cAlternatives_0_0.eContents().get(2);
		private final RuleCall cEquationWhenParserRuleCall_0_0_3 = (RuleCall)cAlternatives_0_0.eContents().get(3);
		private final Assignment cCommAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cCommCommentParserRuleCall_0_1_0 = (RuleCall)cCommAssignment_0_1.eContents().get(0);
		private final Assignment cConnectionAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cConnectionConnectClauseParserRuleCall_1_0 = (RuleCall)cConnectionAssignment_1.eContents().get(0);
		private final RuleCall cAssertParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//// TODO modified with respect to the modelica manual: connection closed moved outside
		//// also functioncall args removed here as it appears below in Primary (the highest priority element of an equation)
		//Equation:
		//	(SimpleExpression ('=' equation=Expression)?
		//	| EquationIf
		//	| EquationFor
		//	| EquationWhen
		//	/ *| name=Name fca=FunctionCallArgs* /) comm=Comment?
		//	| connection=ConnectClause
		//	| Assert;
		@Override public ParserRule getRule() { return rule; }
		
		//(SimpleExpression ('=' equation=Expression)? | EquationIf | EquationFor | EquationWhen
		/// *| name=Name fca=FunctionCallArgs* /) comm=Comment? | connection=ConnectClause | Assert
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(SimpleExpression ('=' equation=Expression)? | EquationIf | EquationFor | EquationWhen
		/// *| name=Name fca=FunctionCallArgs* /) comm=Comment?
		public Group getGroup_0() { return cGroup_0; }
		
		//(SimpleExpression ('=' equation=Expression)? | EquationIf | EquationFor | EquationWhen
		/// *| name=Name fca=FunctionCallArgs* /)
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }
		
		//SimpleExpression ('=' equation=Expression)?
		public Group getGroup_0_0_0() { return cGroup_0_0_0; }
		
		//SimpleExpression
		public RuleCall getSimpleExpressionParserRuleCall_0_0_0_0() { return cSimpleExpressionParserRuleCall_0_0_0_0; }
		
		//('=' equation=Expression)?
		public Group getGroup_0_0_0_1() { return cGroup_0_0_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_0_0_1_0() { return cEqualsSignKeyword_0_0_0_1_0; }
		
		//equation=Expression
		public Assignment getEquationAssignment_0_0_0_1_1() { return cEquationAssignment_0_0_0_1_1; }
		
		//Expression
		public RuleCall getEquationExpressionParserRuleCall_0_0_0_1_1_0() { return cEquationExpressionParserRuleCall_0_0_0_1_1_0; }
		
		//EquationIf
		public RuleCall getEquationIfParserRuleCall_0_0_1() { return cEquationIfParserRuleCall_0_0_1; }
		
		//EquationFor
		public RuleCall getEquationForParserRuleCall_0_0_2() { return cEquationForParserRuleCall_0_0_2; }
		
		//EquationWhen
		public RuleCall getEquationWhenParserRuleCall_0_0_3() { return cEquationWhenParserRuleCall_0_0_3; }
		
		//comm=Comment?
		public Assignment getCommAssignment_0_1() { return cCommAssignment_0_1; }
		
		//Comment
		public RuleCall getCommCommentParserRuleCall_0_1_0() { return cCommCommentParserRuleCall_0_1_0; }
		
		//connection=ConnectClause
		public Assignment getConnectionAssignment_1() { return cConnectionAssignment_1; }
		
		//ConnectClause
		public RuleCall getConnectionConnectClauseParserRuleCall_1_0() { return cConnectionConnectClauseParserRuleCall_1_0; }
		
		//Assert
		public RuleCall getAssertParserRuleCall_2() { return cAssertParserRuleCall_2; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Assignment cComponentAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final RuleCall cComponentComponentReferenceParserRuleCall_0_0_0_0 = (RuleCall)cComponentAssignment_0_0_0.eContents().get(0);
		private final Alternatives cAlternatives_0_0_1 = (Alternatives)cGroup_0_0.eContents().get(1);
		private final Group cGroup_0_0_1_0 = (Group)cAlternatives_0_0_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_0_0_1_0_0 = (Keyword)cGroup_0_0_1_0.eContents().get(0);
		private final Assignment cExpressionAssignment_0_0_1_0_1 = (Assignment)cGroup_0_0_1_0.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_0_0_1_0_1_0 = (RuleCall)cExpressionAssignment_0_0_1_0_1.eContents().get(0);
		private final Assignment cFcaAssignment_0_0_1_1 = (Assignment)cAlternatives_0_0_1.eContents().get(1);
		private final RuleCall cFcaFunctionCallArgsParserRuleCall_0_0_1_1_0 = (RuleCall)cFcaAssignment_0_0_1_1.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cExpressionAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cExpressionOutputExpressionListParserRuleCall_0_1_1_0 = (RuleCall)cExpressionAssignment_0_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final Keyword cColonEqualsSignKeyword_0_1_3 = (Keyword)cGroup_0_1.eContents().get(3);
		private final Assignment cComponentAssignment_0_1_4 = (Assignment)cGroup_0_1.eContents().get(4);
		private final RuleCall cComponentComponentReferenceParserRuleCall_0_1_4_0 = (RuleCall)cComponentAssignment_0_1_4.eContents().get(0);
		private final Assignment cFcaAssignment_0_1_5 = (Assignment)cGroup_0_1.eContents().get(5);
		private final RuleCall cFcaFunctionCallArgsParserRuleCall_0_1_5_0 = (RuleCall)cFcaAssignment_0_1_5.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cAlternatives_0.eContents().get(2);
		private final Action cStatementAction_0_2_0 = (Action)cGroup_0_2.eContents().get(0);
		private final Keyword cReturnKeyword_0_2_1 = (Keyword)cGroup_0_2.eContents().get(1);
		private final Group cGroup_0_3 = (Group)cAlternatives_0.eContents().get(3);
		private final Action cStatementAction_0_3_0 = (Action)cGroup_0_3.eContents().get(0);
		private final Keyword cBreakKeyword_0_3_1 = (Keyword)cGroup_0_3.eContents().get(1);
		private final RuleCall cStatementIfParserRuleCall_0_4 = (RuleCall)cAlternatives_0.eContents().get(4);
		private final RuleCall cStatementForParserRuleCall_0_5 = (RuleCall)cAlternatives_0.eContents().get(5);
		private final RuleCall cStatementWhileParserRuleCall_0_6 = (RuleCall)cAlternatives_0.eContents().get(6);
		private final RuleCall cStatementWhenParserRuleCall_0_7 = (RuleCall)cAlternatives_0.eContents().get(7);
		private final Assignment cCommAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCommCommentParserRuleCall_1_0 = (RuleCall)cCommAssignment_1.eContents().get(0);
		
		//Statement:
		//	(component=ComponentReference (':=' expression=Expression | fca=FunctionCallArgs) | '('
		//	expression=OutputExpressionList ')' ':=' component=ComponentReference fca=FunctionCallArgs
		//	| {Statement} 'return' | {Statement} 'break'
		//	| StatementIf | StatementFor | StatementWhile | StatementWhen) comm=Comment;
		@Override public ParserRule getRule() { return rule; }
		
		//(component=ComponentReference (':=' expression=Expression | fca=FunctionCallArgs) | '(' expression=OutputExpressionList
		//')' ':=' component=ComponentReference fca=FunctionCallArgs | {Statement} 'return' | {Statement} 'break' | StatementIf |
		//StatementFor | StatementWhile | StatementWhen) comm=Comment
		public Group getGroup() { return cGroup; }
		
		//(component=ComponentReference (':=' expression=Expression | fca=FunctionCallArgs) | '(' expression=OutputExpressionList
		//')' ':=' component=ComponentReference fca=FunctionCallArgs | {Statement} 'return' | {Statement} 'break' | StatementIf |
		//StatementFor | StatementWhile | StatementWhen)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//component=ComponentReference (':=' expression=Expression | fca=FunctionCallArgs)
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//component=ComponentReference
		public Assignment getComponentAssignment_0_0_0() { return cComponentAssignment_0_0_0; }
		
		//ComponentReference
		public RuleCall getComponentComponentReferenceParserRuleCall_0_0_0_0() { return cComponentComponentReferenceParserRuleCall_0_0_0_0; }
		
		//(':=' expression=Expression | fca=FunctionCallArgs)
		public Alternatives getAlternatives_0_0_1() { return cAlternatives_0_0_1; }
		
		//':=' expression=Expression
		public Group getGroup_0_0_1_0() { return cGroup_0_0_1_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_0_0_1_0_0() { return cColonEqualsSignKeyword_0_0_1_0_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_0_0_1_0_1() { return cExpressionAssignment_0_0_1_0_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_0_1_0_1_0() { return cExpressionExpressionParserRuleCall_0_0_1_0_1_0; }
		
		//fca=FunctionCallArgs
		public Assignment getFcaAssignment_0_0_1_1() { return cFcaAssignment_0_0_1_1; }
		
		//FunctionCallArgs
		public RuleCall getFcaFunctionCallArgsParserRuleCall_0_0_1_1_0() { return cFcaFunctionCallArgsParserRuleCall_0_0_1_1_0; }
		
		//'(' expression=OutputExpressionList ')' ':=' component=ComponentReference fca=FunctionCallArgs
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1_0() { return cLeftParenthesisKeyword_0_1_0; }
		
		//expression=OutputExpressionList
		public Assignment getExpressionAssignment_0_1_1() { return cExpressionAssignment_0_1_1; }
		
		//OutputExpressionList
		public RuleCall getExpressionOutputExpressionListParserRuleCall_0_1_1_0() { return cExpressionOutputExpressionListParserRuleCall_0_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_1_2() { return cRightParenthesisKeyword_0_1_2; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_0_1_3() { return cColonEqualsSignKeyword_0_1_3; }
		
		//component=ComponentReference
		public Assignment getComponentAssignment_0_1_4() { return cComponentAssignment_0_1_4; }
		
		//ComponentReference
		public RuleCall getComponentComponentReferenceParserRuleCall_0_1_4_0() { return cComponentComponentReferenceParserRuleCall_0_1_4_0; }
		
		//fca=FunctionCallArgs
		public Assignment getFcaAssignment_0_1_5() { return cFcaAssignment_0_1_5; }
		
		//FunctionCallArgs
		public RuleCall getFcaFunctionCallArgsParserRuleCall_0_1_5_0() { return cFcaFunctionCallArgsParserRuleCall_0_1_5_0; }
		
		//{Statement} 'return'
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//{Statement}
		public Action getStatementAction_0_2_0() { return cStatementAction_0_2_0; }
		
		//'return'
		public Keyword getReturnKeyword_0_2_1() { return cReturnKeyword_0_2_1; }
		
		//{Statement} 'break'
		public Group getGroup_0_3() { return cGroup_0_3; }
		
		//{Statement}
		public Action getStatementAction_0_3_0() { return cStatementAction_0_3_0; }
		
		//'break'
		public Keyword getBreakKeyword_0_3_1() { return cBreakKeyword_0_3_1; }
		
		//StatementIf
		public RuleCall getStatementIfParserRuleCall_0_4() { return cStatementIfParserRuleCall_0_4; }
		
		//StatementFor
		public RuleCall getStatementForParserRuleCall_0_5() { return cStatementForParserRuleCall_0_5; }
		
		//StatementWhile
		public RuleCall getStatementWhileParserRuleCall_0_6() { return cStatementWhileParserRuleCall_0_6; }
		
		//StatementWhen
		public RuleCall getStatementWhenParserRuleCall_0_7() { return cStatementWhenParserRuleCall_0_7; }
		
		//comm=Comment
		public Assignment getCommAssignment_1() { return cCommAssignment_1; }
		
		//Comment
		public RuleCall getCommCommentParserRuleCall_1_0() { return cCommCommentParserRuleCall_1_0; }
	}
	public class EquationIfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.EquationIf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIfExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIfExpExpressionParserRuleCall_1_0 = (RuleCall)cIfExpAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cIfEqsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cIfEqsEquationParserRuleCall_3_0_0 = (RuleCall)cIfEqsAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cElseifKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cElseifExpAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cElseifExpExpressionParserRuleCall_4_1_0 = (RuleCall)cElseifExpAssignment_4_1.eContents().get(0);
		private final Keyword cThenKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Assignment cElseIfEqsAssignment_4_3_0 = (Assignment)cGroup_4_3.eContents().get(0);
		private final RuleCall cElseIfEqsEquationParserRuleCall_4_3_0_0 = (RuleCall)cElseIfEqsAssignment_4_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_3_1 = (Keyword)cGroup_4_3.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Assignment cElseEqsAssignment_5_1_0 = (Assignment)cGroup_5_1.eContents().get(0);
		private final RuleCall cElseEqsEquationParserRuleCall_5_1_0_0 = (RuleCall)cElseEqsAssignment_5_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_1_1 = (Keyword)cGroup_5_1.eContents().get(1);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cIfKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//EquationIf:
		//	'if' ifExp=Expression 'then' (ifEqs+=Equation ';')* ('elseif' elseifExp+=Expression 'then' (elseIfEqs+=Equation
		//	';')*)* ('else' (elseEqs+=Equation ';')*)?
		//	'end' 'if';
		@Override public ParserRule getRule() { return rule; }
		
		//'if' ifExp=Expression 'then' (ifEqs+=Equation ';')* ('elseif' elseifExp+=Expression 'then' (elseIfEqs+=Equation ';')*)*
		//('else' (elseEqs+=Equation ';')*)? 'end' 'if'
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//ifExp=Expression
		public Assignment getIfExpAssignment_1() { return cIfExpAssignment_1; }
		
		//Expression
		public RuleCall getIfExpExpressionParserRuleCall_1_0() { return cIfExpExpressionParserRuleCall_1_0; }
		
		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//(ifEqs+=Equation ';')*
		public Group getGroup_3() { return cGroup_3; }
		
		//ifEqs+=Equation
		public Assignment getIfEqsAssignment_3_0() { return cIfEqsAssignment_3_0; }
		
		//Equation
		public RuleCall getIfEqsEquationParserRuleCall_3_0_0() { return cIfEqsEquationParserRuleCall_3_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
		
		//('elseif' elseifExp+=Expression 'then' (elseIfEqs+=Equation ';')*)*
		public Group getGroup_4() { return cGroup_4; }
		
		//'elseif'
		public Keyword getElseifKeyword_4_0() { return cElseifKeyword_4_0; }
		
		//elseifExp+=Expression
		public Assignment getElseifExpAssignment_4_1() { return cElseifExpAssignment_4_1; }
		
		//Expression
		public RuleCall getElseifExpExpressionParserRuleCall_4_1_0() { return cElseifExpExpressionParserRuleCall_4_1_0; }
		
		//'then'
		public Keyword getThenKeyword_4_2() { return cThenKeyword_4_2; }
		
		//(elseIfEqs+=Equation ';')*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//elseIfEqs+=Equation
		public Assignment getElseIfEqsAssignment_4_3_0() { return cElseIfEqsAssignment_4_3_0; }
		
		//Equation
		public RuleCall getElseIfEqsEquationParserRuleCall_4_3_0_0() { return cElseIfEqsEquationParserRuleCall_4_3_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4_3_1() { return cSemicolonKeyword_4_3_1; }
		
		//('else' (elseEqs+=Equation ';')*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'else'
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }
		
		//(elseEqs+=Equation ';')*
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//elseEqs+=Equation
		public Assignment getElseEqsAssignment_5_1_0() { return cElseEqsAssignment_5_1_0; }
		
		//Equation
		public RuleCall getElseEqsEquationParserRuleCall_5_1_0_0() { return cElseEqsEquationParserRuleCall_5_1_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5_1_1() { return cSemicolonKeyword_5_1_1; }
		
		//'end'
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }
		
		//'if'
		public Keyword getIfKeyword_7() { return cIfKeyword_7; }
	}
	public class StatementIfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.StatementIf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIfExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIfExpExpressionParserRuleCall_1_0 = (RuleCall)cIfExpAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cIfEqsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cIfEqsStatementParserRuleCall_3_0_0 = (RuleCall)cIfEqsAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cElseifKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cElseifExpAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cElseifExpExpressionParserRuleCall_4_1_0 = (RuleCall)cElseifExpAssignment_4_1.eContents().get(0);
		private final Keyword cThenKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Assignment cElseIfEqsAssignment_4_3_0 = (Assignment)cGroup_4_3.eContents().get(0);
		private final RuleCall cElseIfEqsStatementParserRuleCall_4_3_0_0 = (RuleCall)cElseIfEqsAssignment_4_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_3_1 = (Keyword)cGroup_4_3.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Assignment cElseEqsAssignment_5_1_0 = (Assignment)cGroup_5_1.eContents().get(0);
		private final RuleCall cElseEqsStatementParserRuleCall_5_1_0_0 = (RuleCall)cElseEqsAssignment_5_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_1_1 = (Keyword)cGroup_5_1.eContents().get(1);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cIfKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//StatementIf:
		//	'if' ifExp=Expression 'then' (ifEqs+=Statement ';')* ('elseif' elseifExp+=Expression 'then' (elseIfEqs+=Statement
		//	';')*)* ('else' (elseEqs+=Statement ';')*)?
		//	'end' 'if';
		@Override public ParserRule getRule() { return rule; }
		
		//'if' ifExp=Expression 'then' (ifEqs+=Statement ';')* ('elseif' elseifExp+=Expression 'then' (elseIfEqs+=Statement
		//';')*)* ('else' (elseEqs+=Statement ';')*)? 'end' 'if'
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//ifExp=Expression
		public Assignment getIfExpAssignment_1() { return cIfExpAssignment_1; }
		
		//Expression
		public RuleCall getIfExpExpressionParserRuleCall_1_0() { return cIfExpExpressionParserRuleCall_1_0; }
		
		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//(ifEqs+=Statement ';')*
		public Group getGroup_3() { return cGroup_3; }
		
		//ifEqs+=Statement
		public Assignment getIfEqsAssignment_3_0() { return cIfEqsAssignment_3_0; }
		
		//Statement
		public RuleCall getIfEqsStatementParserRuleCall_3_0_0() { return cIfEqsStatementParserRuleCall_3_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
		
		//('elseif' elseifExp+=Expression 'then' (elseIfEqs+=Statement ';')*)*
		public Group getGroup_4() { return cGroup_4; }
		
		//'elseif'
		public Keyword getElseifKeyword_4_0() { return cElseifKeyword_4_0; }
		
		//elseifExp+=Expression
		public Assignment getElseifExpAssignment_4_1() { return cElseifExpAssignment_4_1; }
		
		//Expression
		public RuleCall getElseifExpExpressionParserRuleCall_4_1_0() { return cElseifExpExpressionParserRuleCall_4_1_0; }
		
		//'then'
		public Keyword getThenKeyword_4_2() { return cThenKeyword_4_2; }
		
		//(elseIfEqs+=Statement ';')*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//elseIfEqs+=Statement
		public Assignment getElseIfEqsAssignment_4_3_0() { return cElseIfEqsAssignment_4_3_0; }
		
		//Statement
		public RuleCall getElseIfEqsStatementParserRuleCall_4_3_0_0() { return cElseIfEqsStatementParserRuleCall_4_3_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4_3_1() { return cSemicolonKeyword_4_3_1; }
		
		//('else' (elseEqs+=Statement ';')*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'else'
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }
		
		//(elseEqs+=Statement ';')*
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//elseEqs+=Statement
		public Assignment getElseEqsAssignment_5_1_0() { return cElseEqsAssignment_5_1_0; }
		
		//Statement
		public RuleCall getElseEqsStatementParserRuleCall_5_1_0_0() { return cElseEqsStatementParserRuleCall_5_1_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5_1_1() { return cSemicolonKeyword_5_1_1; }
		
		//'end'
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }
		
		//'if'
		public Keyword getIfKeyword_7() { return cIfKeyword_7; }
	}
	public class EquationForElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.EquationFor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIteratorsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIteratorsForIndicesParserRuleCall_1_0 = (RuleCall)cIteratorsAssignment_1.eContents().get(0);
		private final Keyword cLoopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cForEqsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cForEqsEquationParserRuleCall_3_0_0 = (RuleCall)cForEqsAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cForKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//EquationFor:
		//	'for' iterators=ForIndices 'loop' (forEqs+=Equation ';')* 'end' 'for';
		@Override public ParserRule getRule() { return rule; }
		
		//'for' iterators=ForIndices 'loop' (forEqs+=Equation ';')* 'end' 'for'
		public Group getGroup() { return cGroup; }
		
		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//iterators=ForIndices
		public Assignment getIteratorsAssignment_1() { return cIteratorsAssignment_1; }
		
		//ForIndices
		public RuleCall getIteratorsForIndicesParserRuleCall_1_0() { return cIteratorsForIndicesParserRuleCall_1_0; }
		
		//'loop'
		public Keyword getLoopKeyword_2() { return cLoopKeyword_2; }
		
		//(forEqs+=Equation ';')*
		public Group getGroup_3() { return cGroup_3; }
		
		//forEqs+=Equation
		public Assignment getForEqsAssignment_3_0() { return cForEqsAssignment_3_0; }
		
		//Equation
		public RuleCall getForEqsEquationParserRuleCall_3_0_0() { return cForEqsEquationParserRuleCall_3_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
		
		//'end'
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
		
		//'for'
		public Keyword getForKeyword_5() { return cForKeyword_5; }
	}
	public class StatementForElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.StatementFor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIteratorsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIteratorsForIndicesParserRuleCall_1_0 = (RuleCall)cIteratorsAssignment_1.eContents().get(0);
		private final Keyword cLoopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cForEqsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cForEqsStatementParserRuleCall_3_0_0 = (RuleCall)cForEqsAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cForKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//StatementFor:
		//	'for' iterators=ForIndices 'loop' (forEqs+=Statement ';')* 'end' 'for';
		@Override public ParserRule getRule() { return rule; }
		
		//'for' iterators=ForIndices 'loop' (forEqs+=Statement ';')* 'end' 'for'
		public Group getGroup() { return cGroup; }
		
		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//iterators=ForIndices
		public Assignment getIteratorsAssignment_1() { return cIteratorsAssignment_1; }
		
		//ForIndices
		public RuleCall getIteratorsForIndicesParserRuleCall_1_0() { return cIteratorsForIndicesParserRuleCall_1_0; }
		
		//'loop'
		public Keyword getLoopKeyword_2() { return cLoopKeyword_2; }
		
		//(forEqs+=Statement ';')*
		public Group getGroup_3() { return cGroup_3; }
		
		//forEqs+=Statement
		public Assignment getForEqsAssignment_3_0() { return cForEqsAssignment_3_0; }
		
		//Statement
		public RuleCall getForEqsStatementParserRuleCall_3_0_0() { return cForEqsStatementParserRuleCall_3_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
		
		//'end'
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
		
		//'for'
		public Keyword getForKeyword_5() { return cForKeyword_5; }
	}
	public class ForIndicesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.ForIndices");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cForIndexAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cForIndexForIndexParserRuleCall_0_0 = (RuleCall)cForIndexAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cForIndexAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cForIndexForIndexParserRuleCall_1_1_0 = (RuleCall)cForIndexAssignment_1_1.eContents().get(0);
		
		//ForIndices:
		//	forIndex+=ForIndex (',' forIndex+=ForIndex)*;
		@Override public ParserRule getRule() { return rule; }
		
		//forIndex+=ForIndex (',' forIndex+=ForIndex)*
		public Group getGroup() { return cGroup; }
		
		//forIndex+=ForIndex
		public Assignment getForIndexAssignment_0() { return cForIndexAssignment_0; }
		
		//ForIndex
		public RuleCall getForIndexForIndexParserRuleCall_0_0() { return cForIndexForIndexParserRuleCall_0_0; }
		
		//(',' forIndex+=ForIndex)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//forIndex+=ForIndex
		public Assignment getForIndexAssignment_1_1() { return cForIndexAssignment_1_1; }
		
		//ForIndex
		public RuleCall getForIndexForIndexParserRuleCall_1_1_0() { return cForIndexForIndexParserRuleCall_1_1_0; }
	}
	public class ForIndexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.ForIndex");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdIDENTTerminalRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Keyword cInKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//ForIndex:
		//	id=IDENT 'in' expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//id=IDENT 'in' expression=Expression
		public Group getGroup() { return cGroup; }
		
		//id=IDENT
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//IDENT
		public RuleCall getIdIDENTTerminalRuleCall_0_0() { return cIdIDENTTerminalRuleCall_0_0; }
		
		//'in'
		public Keyword getInKeyword_1() { return cInKeyword_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}
	public class StatementWhileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.StatementWhile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBoolExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBoolExprExpressionParserRuleCall_1_0 = (RuleCall)cBoolExprAssignment_1.eContents().get(0);
		private final Keyword cLoopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cStatAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cStatStatementParserRuleCall_3_0_0 = (RuleCall)cStatAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cWhileKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//StatementWhile:
		//	'while' boolExpr=Expression 'loop' (stat+=Statement ";")* 'end' 'while';
		@Override public ParserRule getRule() { return rule; }
		
		//'while' boolExpr=Expression 'loop' (stat+=Statement ";")* 'end' 'while'
		public Group getGroup() { return cGroup; }
		
		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//boolExpr=Expression
		public Assignment getBoolExprAssignment_1() { return cBoolExprAssignment_1; }
		
		//Expression
		public RuleCall getBoolExprExpressionParserRuleCall_1_0() { return cBoolExprExpressionParserRuleCall_1_0; }
		
		//'loop'
		public Keyword getLoopKeyword_2() { return cLoopKeyword_2; }
		
		//(stat+=Statement ";")*
		public Group getGroup_3() { return cGroup_3; }
		
		//stat+=Statement
		public Assignment getStatAssignment_3_0() { return cStatAssignment_3_0; }
		
		//Statement
		public RuleCall getStatStatementParserRuleCall_3_0_0() { return cStatStatementParserRuleCall_3_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
		
		//'end'
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
		
		//'while'
		public Keyword getWhileKeyword_5() { return cWhileKeyword_5; }
	}
	public class EquationWhenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.EquationWhen");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cWhenExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWhenExpExpressionParserRuleCall_1_0 = (RuleCall)cWhenExpAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cWhenEquationsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cWhenEquationsEquationParserRuleCall_3_0_0 = (RuleCall)cWhenEquationsAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cElsewhenKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cExpAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_4_1_0 = (RuleCall)cExpAssignment_4_1.eContents().get(0);
		private final Keyword cThenKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Assignment cEquationItemAssignment_4_3_0 = (Assignment)cGroup_4_3.eContents().get(0);
		private final RuleCall cEquationItemEquationParserRuleCall_4_3_0_0 = (RuleCall)cEquationItemAssignment_4_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_3_1 = (Keyword)cGroup_4_3.eContents().get(1);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cWhenKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//EquationWhen:
		//	'when' whenExp=Expression 'then' (whenEquations+=Equation ';')* ('elsewhen' exp+=Expression 'then'
		//	(equationItem+=Equation ';')*)*
		//	'end' 'when';
		@Override public ParserRule getRule() { return rule; }
		
		//'when' whenExp=Expression 'then' (whenEquations+=Equation ';')* ('elsewhen' exp+=Expression 'then'
		//(equationItem+=Equation ';')*)* 'end' 'when'
		public Group getGroup() { return cGroup; }
		
		//'when'
		public Keyword getWhenKeyword_0() { return cWhenKeyword_0; }
		
		//whenExp=Expression
		public Assignment getWhenExpAssignment_1() { return cWhenExpAssignment_1; }
		
		//Expression
		public RuleCall getWhenExpExpressionParserRuleCall_1_0() { return cWhenExpExpressionParserRuleCall_1_0; }
		
		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//(whenEquations+=Equation ';')*
		public Group getGroup_3() { return cGroup_3; }
		
		//whenEquations+=Equation
		public Assignment getWhenEquationsAssignment_3_0() { return cWhenEquationsAssignment_3_0; }
		
		//Equation
		public RuleCall getWhenEquationsEquationParserRuleCall_3_0_0() { return cWhenEquationsEquationParserRuleCall_3_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
		
		//('elsewhen' exp+=Expression 'then' (equationItem+=Equation ';')*)*
		public Group getGroup_4() { return cGroup_4; }
		
		//'elsewhen'
		public Keyword getElsewhenKeyword_4_0() { return cElsewhenKeyword_4_0; }
		
		//exp+=Expression
		public Assignment getExpAssignment_4_1() { return cExpAssignment_4_1; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_4_1_0() { return cExpExpressionParserRuleCall_4_1_0; }
		
		//'then'
		public Keyword getThenKeyword_4_2() { return cThenKeyword_4_2; }
		
		//(equationItem+=Equation ';')*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//equationItem+=Equation
		public Assignment getEquationItemAssignment_4_3_0() { return cEquationItemAssignment_4_3_0; }
		
		//Equation
		public RuleCall getEquationItemEquationParserRuleCall_4_3_0_0() { return cEquationItemEquationParserRuleCall_4_3_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4_3_1() { return cSemicolonKeyword_4_3_1; }
		
		//'end'
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }
		
		//'when'
		public Keyword getWhenKeyword_6() { return cWhenKeyword_6; }
	}
	public class StatementWhenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.StatementWhen");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cWhenExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWhenExpExpressionParserRuleCall_1_0 = (RuleCall)cWhenExpAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cWhenEquationsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cWhenEquationsStatementParserRuleCall_3_0_0 = (RuleCall)cWhenEquationsAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cElsewhenKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cExpAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_4_1_0 = (RuleCall)cExpAssignment_4_1.eContents().get(0);
		private final Keyword cThenKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Assignment cEquationItemAssignment_4_3_0 = (Assignment)cGroup_4_3.eContents().get(0);
		private final RuleCall cEquationItemStatementParserRuleCall_4_3_0_0 = (RuleCall)cEquationItemAssignment_4_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_3_1 = (Keyword)cGroup_4_3.eContents().get(1);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cWhenKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//StatementWhen:
		//	'when' whenExp=Expression 'then' (whenEquations+=Statement ';')* ('elsewhen' exp+=Expression 'then'
		//	(equationItem+=Statement ';')*)*
		//	'end' 'when';
		@Override public ParserRule getRule() { return rule; }
		
		//'when' whenExp=Expression 'then' (whenEquations+=Statement ';')* ('elsewhen' exp+=Expression 'then'
		//(equationItem+=Statement ';')*)* 'end' 'when'
		public Group getGroup() { return cGroup; }
		
		//'when'
		public Keyword getWhenKeyword_0() { return cWhenKeyword_0; }
		
		//whenExp=Expression
		public Assignment getWhenExpAssignment_1() { return cWhenExpAssignment_1; }
		
		//Expression
		public RuleCall getWhenExpExpressionParserRuleCall_1_0() { return cWhenExpExpressionParserRuleCall_1_0; }
		
		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//(whenEquations+=Statement ';')*
		public Group getGroup_3() { return cGroup_3; }
		
		//whenEquations+=Statement
		public Assignment getWhenEquationsAssignment_3_0() { return cWhenEquationsAssignment_3_0; }
		
		//Statement
		public RuleCall getWhenEquationsStatementParserRuleCall_3_0_0() { return cWhenEquationsStatementParserRuleCall_3_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
		
		//('elsewhen' exp+=Expression 'then' (equationItem+=Statement ';')*)*
		public Group getGroup_4() { return cGroup_4; }
		
		//'elsewhen'
		public Keyword getElsewhenKeyword_4_0() { return cElsewhenKeyword_4_0; }
		
		//exp+=Expression
		public Assignment getExpAssignment_4_1() { return cExpAssignment_4_1; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_4_1_0() { return cExpExpressionParserRuleCall_4_1_0; }
		
		//'then'
		public Keyword getThenKeyword_4_2() { return cThenKeyword_4_2; }
		
		//(equationItem+=Statement ';')*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//equationItem+=Statement
		public Assignment getEquationItemAssignment_4_3_0() { return cEquationItemAssignment_4_3_0; }
		
		//Statement
		public RuleCall getEquationItemStatementParserRuleCall_4_3_0_0() { return cEquationItemStatementParserRuleCall_4_3_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4_3_1() { return cSemicolonKeyword_4_3_1; }
		
		//'end'
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }
		
		//'when'
		public Keyword getWhenKeyword_6() { return cWhenKeyword_6; }
	}
	public class ConnectClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.ConnectClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConnectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNode1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNode1ComponentReferenceParserRuleCall_2_0 = (RuleCall)cNode1Assignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNode2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNode2ComponentReferenceParserRuleCall_4_0 = (RuleCall)cNode2Assignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cAnnotationAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAnnotationAnnotationParserRuleCall_6_0 = (RuleCall)cAnnotationAssignment_6.eContents().get(0);
		
		//// TODO modified with respect to the modelica manual: connectionclause can have annotation
		//ConnectClause:
		//	'connect' '(' node1=ComponentReference ',' node2=ComponentReference ')' annotation=Annotation?;
		@Override public ParserRule getRule() { return rule; }
		
		//'connect' '(' node1=ComponentReference ',' node2=ComponentReference ')' annotation=Annotation?
		public Group getGroup() { return cGroup; }
		
		//'connect'
		public Keyword getConnectKeyword_0() { return cConnectKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//node1=ComponentReference
		public Assignment getNode1Assignment_2() { return cNode1Assignment_2; }
		
		//ComponentReference
		public RuleCall getNode1ComponentReferenceParserRuleCall_2_0() { return cNode1ComponentReferenceParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//node2=ComponentReference
		public Assignment getNode2Assignment_4() { return cNode2Assignment_4; }
		
		//ComponentReference
		public RuleCall getNode2ComponentReferenceParserRuleCall_4_0() { return cNode2ComponentReferenceParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//annotation=Annotation?
		public Assignment getAnnotationAssignment_6() { return cAnnotationAssignment_6; }
		
		//Annotation
		public RuleCall getAnnotationAnnotationParserRuleCall_6_0() { return cAnnotationAnnotationParserRuleCall_6_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cIfKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIfAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIfExpressionParserRuleCall_1_1_0 = (RuleCall)cIfAssignment_1_1.eContents().get(0);
		private final Keyword cThenKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cThenAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cThenExpressionParserRuleCall_1_3_0 = (RuleCall)cThenAssignment_1_3.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Keyword cElseifKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Assignment cElseifAssignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final RuleCall cElseifExpressionParserRuleCall_1_4_1_0 = (RuleCall)cElseifAssignment_1_4_1.eContents().get(0);
		private final Keyword cThenKeyword_1_4_2 = (Keyword)cGroup_1_4.eContents().get(2);
		private final Assignment cElseifthenAssignment_1_4_3 = (Assignment)cGroup_1_4.eContents().get(3);
		private final RuleCall cElseifthenExpressionParserRuleCall_1_4_3_0 = (RuleCall)cElseifthenAssignment_1_4_3.eContents().get(0);
		private final Keyword cElseKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Assignment cElseAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final RuleCall cElseExpressionParserRuleCall_1_6_0 = (RuleCall)cElseAssignment_1_6.eContents().get(0);
		
		//// B.2.7 Expressions
		//Expression:
		//	SimpleExpression |
		//	'if' if=Expression 'then' then=Expression ('elseif' elseif+=Expression 'then' elseifthen+=Expression)*
		//	'else' else=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleExpression | 'if' if=Expression 'then' then=Expression ('elseif' elseif+=Expression 'then'
		//elseifthen+=Expression)* 'else' else=Expression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SimpleExpression
		public RuleCall getSimpleExpressionParserRuleCall_0() { return cSimpleExpressionParserRuleCall_0; }
		
		//'if' if=Expression 'then' then=Expression ('elseif' elseif+=Expression 'then' elseifthen+=Expression)* 'else'
		//else=Expression
		public Group getGroup_1() { return cGroup_1; }
		
		//'if'
		public Keyword getIfKeyword_1_0() { return cIfKeyword_1_0; }
		
		//if=Expression
		public Assignment getIfAssignment_1_1() { return cIfAssignment_1_1; }
		
		//Expression
		public RuleCall getIfExpressionParserRuleCall_1_1_0() { return cIfExpressionParserRuleCall_1_1_0; }
		
		//'then'
		public Keyword getThenKeyword_1_2() { return cThenKeyword_1_2; }
		
		//then=Expression
		public Assignment getThenAssignment_1_3() { return cThenAssignment_1_3; }
		
		//Expression
		public RuleCall getThenExpressionParserRuleCall_1_3_0() { return cThenExpressionParserRuleCall_1_3_0; }
		
		//('elseif' elseif+=Expression 'then' elseifthen+=Expression)*
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//'elseif'
		public Keyword getElseifKeyword_1_4_0() { return cElseifKeyword_1_4_0; }
		
		//elseif+=Expression
		public Assignment getElseifAssignment_1_4_1() { return cElseifAssignment_1_4_1; }
		
		//Expression
		public RuleCall getElseifExpressionParserRuleCall_1_4_1_0() { return cElseifExpressionParserRuleCall_1_4_1_0; }
		
		//'then'
		public Keyword getThenKeyword_1_4_2() { return cThenKeyword_1_4_2; }
		
		//elseifthen+=Expression
		public Assignment getElseifthenAssignment_1_4_3() { return cElseifthenAssignment_1_4_3; }
		
		//Expression
		public RuleCall getElseifthenExpressionParserRuleCall_1_4_3_0() { return cElseifthenExpressionParserRuleCall_1_4_3_0; }
		
		//'else'
		public Keyword getElseKeyword_1_5() { return cElseKeyword_1_5; }
		
		//else=Expression
		public Assignment getElseAssignment_1_6() { return cElseAssignment_1_6; }
		
		//Expression
		public RuleCall getElseExpressionParserRuleCall_1_6_0() { return cElseExpressionParserRuleCall_1_6_0; }
	}
	public class SimpleExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.SimpleExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStartAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStartLogicalExpressionParserRuleCall_0_0 = (RuleCall)cStartAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cStepAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cStepLogicalExpressionParserRuleCall_1_1_0 = (RuleCall)cStepAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cColonKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cStopAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cStopLogicalExpressionParserRuleCall_1_2_1_0 = (RuleCall)cStopAssignment_1_2_1.eContents().get(0);
		
		//SimpleExpression Expression:
		//	start=LogicalExpression (':' step=LogicalExpression (':' stop=LogicalExpression)?)?
		@Override public ParserRule getRule() { return rule; }
		
		//start=LogicalExpression (':' step=LogicalExpression (':' stop=LogicalExpression)?)?
		public Group getGroup() { return cGroup; }
		
		//start=LogicalExpression
		public Assignment getStartAssignment_0() { return cStartAssignment_0; }
		
		//LogicalExpression
		public RuleCall getStartLogicalExpressionParserRuleCall_0_0() { return cStartLogicalExpressionParserRuleCall_0_0; }
		
		//(':' step=LogicalExpression (':' stop=LogicalExpression)?)?
		public Group getGroup_1() { return cGroup_1; }
		
		//':'
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }
		
		//step=LogicalExpression
		public Assignment getStepAssignment_1_1() { return cStepAssignment_1_1; }
		
		//LogicalExpression
		public RuleCall getStepLogicalExpressionParserRuleCall_1_1_0() { return cStepLogicalExpressionParserRuleCall_1_1_0; }
		
		//(':' stop=LogicalExpression)?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//':'
		public Keyword getColonKeyword_1_2_0() { return cColonKeyword_1_2_0; }
		
		//stop=LogicalExpression
		public Assignment getStopAssignment_1_2_1() { return cStopAssignment_1_2_1; }
		
		//LogicalExpression
		public RuleCall getStopLogicalExpressionParserRuleCall_1_2_1_0() { return cStopLogicalExpressionParserRuleCall_1_2_1_0; }
	}
	public class LogicalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.LogicalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogicalTermParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLogicalExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cOrKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightLogicalTermParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//LogicalExpression Expression:
		//	LogicalTerm ({LogicalExpression.left=current} 'or' right+=LogicalTerm)*
		@Override public ParserRule getRule() { return rule; }
		
		//LogicalTerm ({LogicalExpression.left=current} 'or' right+=LogicalTerm)*
		public Group getGroup() { return cGroup; }
		
		//LogicalTerm
		public RuleCall getLogicalTermParserRuleCall_0() { return cLogicalTermParserRuleCall_0; }
		
		//({LogicalExpression.left=current} 'or' right+=LogicalTerm)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{LogicalExpression.left=current}
		public Action getLogicalExpressionLeftAction_1_0() { return cLogicalExpressionLeftAction_1_0; }
		
		//'or'
		public Keyword getOrKeyword_1_1() { return cOrKeyword_1_1; }
		
		//right+=LogicalTerm
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//LogicalTerm
		public RuleCall getRightLogicalTermParserRuleCall_1_2_0() { return cRightLogicalTermParserRuleCall_1_2_0; }
	}
	public class LogicalTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.LogicalTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogicalFactorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLogicalTermLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAndKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightLogicalFactorParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//LogicalTerm Expression:
		//	LogicalFactor ({LogicalTerm.left=current} 'and' right=LogicalFactor)*
		@Override public ParserRule getRule() { return rule; }
		
		//LogicalFactor ({LogicalTerm.left=current} 'and' right=LogicalFactor)*
		public Group getGroup() { return cGroup; }
		
		//LogicalFactor
		public RuleCall getLogicalFactorParserRuleCall_0() { return cLogicalFactorParserRuleCall_0; }
		
		//({LogicalTerm.left=current} 'and' right=LogicalFactor)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{LogicalTerm.left=current}
		public Action getLogicalTermLeftAction_1_0() { return cLogicalTermLeftAction_1_0; }
		
		//'and'
		public Keyword getAndKeyword_1_1() { return cAndKeyword_1_1; }
		
		//right=LogicalFactor
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//LogicalFactor
		public RuleCall getRightLogicalFactorParserRuleCall_1_2_0() { return cRightLogicalFactorParserRuleCall_1_2_0; }
	}
	public class LogicalFactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.LogicalFactor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cRelationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//LogicalFactor Expression:
		//	'not'? Relation
		@Override public ParserRule getRule() { return rule; }
		
		//'not'? Relation
		public Group getGroup() { return cGroup; }
		
		//'not'?
		public Keyword getNotKeyword_0() { return cNotKeyword_0; }
		
		//Relation
		public RuleCall getRelationParserRuleCall_1() { return cRelationParserRuleCall_1; }
	}
	public class RelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.Relation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cArithmeticExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cRelationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cRelOpParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightArithmeticExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Relation Expression:
		//	ArithmeticExpression ({Relation.left=current} RelOp right=ArithmeticExpression)?
		@Override public ParserRule getRule() { return rule; }
		
		//ArithmeticExpression ({Relation.left=current} RelOp right=ArithmeticExpression)?
		public Group getGroup() { return cGroup; }
		
		//ArithmeticExpression
		public RuleCall getArithmeticExpressionParserRuleCall_0() { return cArithmeticExpressionParserRuleCall_0; }
		
		//({Relation.left=current} RelOp right=ArithmeticExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{Relation.left=current}
		public Action getRelationLeftAction_1_0() { return cRelationLeftAction_1_0; }
		
		//RelOp
		public RuleCall getRelOpParserRuleCall_1_1() { return cRelOpParserRuleCall_1_1; }
		
		//right=ArithmeticExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//ArithmeticExpression
		public RuleCall getRightArithmeticExpressionParserRuleCall_1_2_0() { return cRightArithmeticExpressionParserRuleCall_1_2_0; }
	}
	public class RelOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.RelOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cEqualsSignEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cLessThanSignGreaterThanSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//RelOp:
		//	'>' | '>=' | '<' | '<=' | '==' | '<>';
		@Override public ParserRule getRule() { return rule; }
		
		//'>' | '>=' | '<' | '<=' | '==' | '<>'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_0() { return cGreaterThanSignKeyword_0; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_1() { return cGreaterThanSignEqualsSignKeyword_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_3() { return cLessThanSignEqualsSignKeyword_3; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_4() { return cEqualsSignEqualsSignKeyword_4; }
		
		//'<>'
		public Keyword getLessThanSignGreaterThanSignKeyword_5() { return cLessThanSignGreaterThanSignKeyword_5; }
	}
	public class ArithmeticExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.ArithmeticExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cArithmeticExpressionUnaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cArithmeticExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cAddOpParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightArithmeticExpression2ParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//// TODO modified the original rule below to add support for unary arithmetics 
		////ArithmeticExpression returns Expression:
		////	Term ({ArithmeticExpression.left=current} AddOp right=Term)?
		////;
		//ArithmeticExpression Expression:
		//	ArithmeticExpressionUnary ({ArithmeticExpression.left=current} AddOp right=ArithmeticExpression2)?
		@Override public ParserRule getRule() { return rule; }
		
		//ArithmeticExpressionUnary ({ArithmeticExpression.left=current} AddOp right=ArithmeticExpression2)?
		public Group getGroup() { return cGroup; }
		
		//ArithmeticExpressionUnary
		public RuleCall getArithmeticExpressionUnaryParserRuleCall_0() { return cArithmeticExpressionUnaryParserRuleCall_0; }
		
		//({ArithmeticExpression.left=current} AddOp right=ArithmeticExpression2)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{ArithmeticExpression.left=current}
		public Action getArithmeticExpressionLeftAction_1_0() { return cArithmeticExpressionLeftAction_1_0; }
		
		//AddOp
		public RuleCall getAddOpParserRuleCall_1_1() { return cAddOpParserRuleCall_1_1; }
		
		//right=ArithmeticExpression2
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//ArithmeticExpression2
		public RuleCall getRightArithmeticExpression2ParserRuleCall_1_2_0() { return cRightArithmeticExpression2ParserRuleCall_1_2_0; }
	}
	public class ArithmeticExpression2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.ArithmeticExpression2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTermParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cArithmeticExpression2LeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cAddOpParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightArithmeticExpression2ParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ArithmeticExpression2 Expression:
		//	Term ({ArithmeticExpression2.left=current} AddOp right=ArithmeticExpression2)?
		@Override public ParserRule getRule() { return rule; }
		
		//Term ({ArithmeticExpression2.left=current} AddOp right=ArithmeticExpression2)?
		public Group getGroup() { return cGroup; }
		
		//Term
		public RuleCall getTermParserRuleCall_0() { return cTermParserRuleCall_0; }
		
		//({ArithmeticExpression2.left=current} AddOp right=ArithmeticExpression2)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{ArithmeticExpression2.left=current}
		public Action getArithmeticExpression2LeftAction_1_0() { return cArithmeticExpression2LeftAction_1_0; }
		
		//AddOp
		public RuleCall getAddOpParserRuleCall_1_1() { return cAddOpParserRuleCall_1_1; }
		
		//right=ArithmeticExpression2
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//ArithmeticExpression2
		public RuleCall getRightArithmeticExpression2ParserRuleCall_1_2_0() { return cRightArithmeticExpression2ParserRuleCall_1_2_0; }
	}
	public class ArithmeticExpressionUnaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.ArithmeticExpressionUnary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTermParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cAddOpParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cExpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpTermParserRuleCall_1_1_0 = (RuleCall)cExpAssignment_1_1.eContents().get(0);
		
		//ArithmeticExpressionUnary Expression:
		//	Term | AddOp exp=Term
		@Override public ParserRule getRule() { return rule; }
		
		//Term | AddOp exp=Term
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Term
		public RuleCall getTermParserRuleCall_0() { return cTermParserRuleCall_0; }
		
		//AddOp exp=Term
		public Group getGroup_1() { return cGroup_1; }
		
		//AddOp
		public RuleCall getAddOpParserRuleCall_1_0() { return cAddOpParserRuleCall_1_0; }
		
		//exp=Term
		public Assignment getExpAssignment_1_1() { return cExpAssignment_1_1; }
		
		//Term
		public RuleCall getExpTermParserRuleCall_1_1_0() { return cExpTermParserRuleCall_1_1_0; }
	}
	public class AddOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.AddOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cFullStopPlusSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cFullStopHyphenMinusKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//AddOp:
		//	'+' | '-' | '.+' | '.-';
		@Override public ParserRule getRule() { return rule; }
		
		//'+' | '-' | '.+' | '.-'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//'.+'
		public Keyword getFullStopPlusSignKeyword_2() { return cFullStopPlusSignKeyword_2; }
		
		//'.-'
		public Keyword getFullStopHyphenMinusKeyword_3() { return cFullStopHyphenMinusKeyword_3; }
	}
	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.Term");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFactorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cTermLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cMulOpParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightFactorParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Term Expression:
		//	Factor ({Term.left=current} MulOp right=Factor)?
		@Override public ParserRule getRule() { return rule; }
		
		//Factor ({Term.left=current} MulOp right=Factor)?
		public Group getGroup() { return cGroup; }
		
		//Factor
		public RuleCall getFactorParserRuleCall_0() { return cFactorParserRuleCall_0; }
		
		//({Term.left=current} MulOp right=Factor)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{Term.left=current}
		public Action getTermLeftAction_1_0() { return cTermLeftAction_1_0; }
		
		//MulOp
		public RuleCall getMulOpParserRuleCall_1_1() { return cMulOpParserRuleCall_1_1; }
		
		//right=Factor
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Factor
		public RuleCall getRightFactorParserRuleCall_1_2_0() { return cRightFactorParserRuleCall_1_2_0; }
	}
	public class MulOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.MulOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cFullStopAsteriskKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cFullStopSolidusKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//MulOp:
		//	'*' | '/' | '.*' | './';
		@Override public ParserRule getRule() { return rule; }
		
		//'*' | '/' | '.*' | './'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'*'
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }
		
		//'.*'
		public Keyword getFullStopAsteriskKeyword_2() { return cFullStopAsteriskKeyword_2; }
		
		//'./'
		public Keyword getFullStopSolidusKeyword_3() { return cFullStopSolidusKeyword_3; }
	}
	public class FactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.Factor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cFactorLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Keyword cCircumflexAccentKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Keyword cFullStopCircumflexAccentKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Factor Expression:
		//	Primary ({Factor.left=current} ('^' | '.^') right=Primary)?
		@Override public ParserRule getRule() { return rule; }
		
		//Primary ({Factor.left=current} ('^' | '.^') right=Primary)?
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//({Factor.left=current} ('^' | '.^') right=Primary)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{Factor.left=current}
		public Action getFactorLeftAction_1_0() { return cFactorLeftAction_1_0; }
		
		//('^' | '.^')
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//'^'
		public Keyword getCircumflexAccentKeyword_1_1_0() { return cCircumflexAccentKeyword_1_1_0; }
		
		//'.^'
		public Keyword getFullStopCircumflexAccentKeyword_1_1_1() { return cFullStopCircumflexAccentKeyword_1_1_1; }
		
		//right=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cPrimaryAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cUNSIGNED_INTEGERTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cPrimaryAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cUNSIGNED_NUMBERTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cPrimaryAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cPrimaryAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cFalseKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cPrimaryAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cTrueKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cPrimaryAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Alternatives cAlternatives_5_1 = (Alternatives)cGroup_5.eContents().get(1);
		private final Assignment cNameAssignment_5_1_0 = (Assignment)cAlternatives_5_1.eContents().get(0);
		private final RuleCall cNameNameParserRuleCall_5_1_0_0 = (RuleCall)cNameAssignment_5_1_0.eContents().get(0);
		private final Keyword cDerKeyword_5_1_1 = (Keyword)cAlternatives_5_1.eContents().get(1);
		private final Keyword cInitialKeyword_5_1_2 = (Keyword)cAlternatives_5_1.eContents().get(2);
		private final Assignment cFcaAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cFcaFunctionCallArgsParserRuleCall_5_2_0 = (RuleCall)cFcaAssignment_5_2.eContents().get(0);
		private final RuleCall cComponentReferenceParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Keyword cLeftParenthesisKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final RuleCall cOutputExpressionListParserRuleCall_7_1 = (RuleCall)cGroup_7.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Keyword cLeftSquareBracketKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cListAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cListExprExpressionListParserRuleCall_8_1_0 = (RuleCall)cListAssignment_8_1.eContents().get(0);
		private final Group cGroup_8_2 = (Group)cGroup_8.eContents().get(2);
		private final Keyword cSemicolonKeyword_8_2_0 = (Keyword)cGroup_8_2.eContents().get(0);
		private final Assignment cListAssignment_8_2_1 = (Assignment)cGroup_8_2.eContents().get(1);
		private final RuleCall cListExprExpressionListParserRuleCall_8_2_1_0 = (RuleCall)cListAssignment_8_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Keyword cLeftCurlyBracketKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cFaAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cFaFunctionArgumentsParserRuleCall_9_1_0 = (RuleCall)cFaAssignment_9_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9_2 = (Keyword)cGroup_9.eContents().get(2);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Action cPrimaryAction_10_0 = (Action)cGroup_10.eContents().get(0);
		private final Keyword cEndKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		
		//Primary Expression:
		//	{Primary} UNSIGNED_INTEGER | {Primary} UNSIGNED_NUMBER | {Primary} STRING | {Primary} 'false' | {Primary} 'true'
		//	| {Primary} (name=Name | 'der' | 'initial') fca=FunctionCallArgs
		//	| ComponentReference
		//	| '(' OutputExpressionList ')'
		//	| '[' list+=ExprExpressionList (';' list+=ExprExpressionList)* ']'
		//	| '{' fa=FunctionArguments '}'
		//	| {Primary} 'end'
		@Override public ParserRule getRule() { return rule; }
		
		//{Primary} UNSIGNED_INTEGER | {Primary} UNSIGNED_NUMBER | {Primary} STRING | {Primary} 'false' | {Primary} 'true' |
		//{Primary} (name=Name | 'der' | 'initial') fca=FunctionCallArgs | ComponentReference | '(' OutputExpressionList ')' |
		//'[' list+=ExprExpressionList (';' list+=ExprExpressionList)* ']' | '{' fa=FunctionArguments '}' | {Primary} 'end'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Primary} UNSIGNED_INTEGER
		public Group getGroup_0() { return cGroup_0; }
		
		//{Primary}
		public Action getPrimaryAction_0_0() { return cPrimaryAction_0_0; }
		
		//UNSIGNED_INTEGER
		public RuleCall getUNSIGNED_INTEGERTerminalRuleCall_0_1() { return cUNSIGNED_INTEGERTerminalRuleCall_0_1; }
		
		//{Primary} UNSIGNED_NUMBER
		public Group getGroup_1() { return cGroup_1; }
		
		//{Primary}
		public Action getPrimaryAction_1_0() { return cPrimaryAction_1_0; }
		
		//UNSIGNED_NUMBER
		public RuleCall getUNSIGNED_NUMBERTerminalRuleCall_1_1() { return cUNSIGNED_NUMBERTerminalRuleCall_1_1; }
		
		//{Primary} STRING
		public Group getGroup_2() { return cGroup_2; }
		
		//{Primary}
		public Action getPrimaryAction_2_0() { return cPrimaryAction_2_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2_1() { return cSTRINGTerminalRuleCall_2_1; }
		
		//{Primary} 'false'
		public Group getGroup_3() { return cGroup_3; }
		
		//{Primary}
		public Action getPrimaryAction_3_0() { return cPrimaryAction_3_0; }
		
		//'false'
		public Keyword getFalseKeyword_3_1() { return cFalseKeyword_3_1; }
		
		//{Primary} 'true'
		public Group getGroup_4() { return cGroup_4; }
		
		//{Primary}
		public Action getPrimaryAction_4_0() { return cPrimaryAction_4_0; }
		
		//'true'
		public Keyword getTrueKeyword_4_1() { return cTrueKeyword_4_1; }
		
		//{Primary} (name=Name | 'der' | 'initial') fca=FunctionCallArgs
		public Group getGroup_5() { return cGroup_5; }
		
		//{Primary}
		public Action getPrimaryAction_5_0() { return cPrimaryAction_5_0; }
		
		//(name=Name | 'der' | 'initial')
		public Alternatives getAlternatives_5_1() { return cAlternatives_5_1; }
		
		//name=Name
		public Assignment getNameAssignment_5_1_0() { return cNameAssignment_5_1_0; }
		
		//Name
		public RuleCall getNameNameParserRuleCall_5_1_0_0() { return cNameNameParserRuleCall_5_1_0_0; }
		
		//'der'
		public Keyword getDerKeyword_5_1_1() { return cDerKeyword_5_1_1; }
		
		//'initial'
		public Keyword getInitialKeyword_5_1_2() { return cInitialKeyword_5_1_2; }
		
		//fca=FunctionCallArgs
		public Assignment getFcaAssignment_5_2() { return cFcaAssignment_5_2; }
		
		//FunctionCallArgs
		public RuleCall getFcaFunctionCallArgsParserRuleCall_5_2_0() { return cFcaFunctionCallArgsParserRuleCall_5_2_0; }
		
		//ComponentReference
		public RuleCall getComponentReferenceParserRuleCall_6() { return cComponentReferenceParserRuleCall_6; }
		
		//'(' OutputExpressionList ')'
		public Group getGroup_7() { return cGroup_7; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_7_0() { return cLeftParenthesisKeyword_7_0; }
		
		//OutputExpressionList
		public RuleCall getOutputExpressionListParserRuleCall_7_1() { return cOutputExpressionListParserRuleCall_7_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7_2() { return cRightParenthesisKeyword_7_2; }
		
		//'[' list+=ExprExpressionList (';' list+=ExprExpressionList)* ']'
		public Group getGroup_8() { return cGroup_8; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_8_0() { return cLeftSquareBracketKeyword_8_0; }
		
		//list+=ExprExpressionList
		public Assignment getListAssignment_8_1() { return cListAssignment_8_1; }
		
		//ExprExpressionList
		public RuleCall getListExprExpressionListParserRuleCall_8_1_0() { return cListExprExpressionListParserRuleCall_8_1_0; }
		
		//(';' list+=ExprExpressionList)*
		public Group getGroup_8_2() { return cGroup_8_2; }
		
		//';'
		public Keyword getSemicolonKeyword_8_2_0() { return cSemicolonKeyword_8_2_0; }
		
		//list+=ExprExpressionList
		public Assignment getListAssignment_8_2_1() { return cListAssignment_8_2_1; }
		
		//ExprExpressionList
		public RuleCall getListExprExpressionListParserRuleCall_8_2_1_0() { return cListExprExpressionListParserRuleCall_8_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_8_3() { return cRightSquareBracketKeyword_8_3; }
		
		//'{' fa=FunctionArguments '}'
		public Group getGroup_9() { return cGroup_9; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_9_0() { return cLeftCurlyBracketKeyword_9_0; }
		
		//fa=FunctionArguments
		public Assignment getFaAssignment_9_1() { return cFaAssignment_9_1; }
		
		//FunctionArguments
		public RuleCall getFaFunctionArgumentsParserRuleCall_9_1_0() { return cFaFunctionArgumentsParserRuleCall_9_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9_2() { return cRightCurlyBracketKeyword_9_2; }
		
		//{Primary} 'end'
		public Group getGroup_10() { return cGroup_10; }
		
		//{Primary}
		public Action getPrimaryAction_10_0() { return cPrimaryAction_10_0; }
		
		//'end'
		public Keyword getEndKeyword_10_1() { return cEndKeyword_10_1; }
	}
	public class NameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.Name");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNameAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cIDENTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFullStopKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cIdAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cIdIDENTTerminalRuleCall_3_1_0 = (RuleCall)cIdAssignment_3_1.eContents().get(0);
		
		//Name:
		//	{Name} '.'? IDENT ('.' id+=IDENT)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Name} '.'? IDENT ('.' id+=IDENT)*
		public Group getGroup() { return cGroup; }
		
		//{Name}
		public Action getNameAction_0() { return cNameAction_0; }
		
		//'.'?
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//IDENT
		public RuleCall getIDENTTerminalRuleCall_2() { return cIDENTTerminalRuleCall_2; }
		
		//('.' id+=IDENT)*
		public Group getGroup_3() { return cGroup_3; }
		
		//'.'
		public Keyword getFullStopKeyword_3_0() { return cFullStopKeyword_3_0; }
		
		//id+=IDENT
		public Assignment getIdAssignment_3_1() { return cIdAssignment_3_1; }
		
		//IDENT
		public RuleCall getIdIDENTTerminalRuleCall_3_1_0() { return cIdIDENTTerminalRuleCall_3_1_0; }
	}
	public class ComponentReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.ComponentReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cComponentReferenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cIDENTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cSubsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSubsArraySubscriptsParserRuleCall_3_0 = (RuleCall)cSubsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cFullStopKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cIdAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cIdIDENTTerminalRuleCall_4_1_0 = (RuleCall)cIdAssignment_4_1.eContents().get(0);
		private final Assignment cSubsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cSubsArraySubscriptsParserRuleCall_4_2_0 = (RuleCall)cSubsAssignment_4_2.eContents().get(0);
		
		//ComponentReference:
		//	{ComponentReference} '.'? IDENT subs+=ArraySubscripts? ('.' id+=IDENT subs+=ArraySubscripts?)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{ComponentReference} '.'? IDENT subs+=ArraySubscripts? ('.' id+=IDENT subs+=ArraySubscripts?)*
		public Group getGroup() { return cGroup; }
		
		//{ComponentReference}
		public Action getComponentReferenceAction_0() { return cComponentReferenceAction_0; }
		
		//'.'?
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//IDENT
		public RuleCall getIDENTTerminalRuleCall_2() { return cIDENTTerminalRuleCall_2; }
		
		//subs+=ArraySubscripts?
		public Assignment getSubsAssignment_3() { return cSubsAssignment_3; }
		
		//ArraySubscripts
		public RuleCall getSubsArraySubscriptsParserRuleCall_3_0() { return cSubsArraySubscriptsParserRuleCall_3_0; }
		
		//('.' id+=IDENT subs+=ArraySubscripts?)*
		public Group getGroup_4() { return cGroup_4; }
		
		//'.'
		public Keyword getFullStopKeyword_4_0() { return cFullStopKeyword_4_0; }
		
		//id+=IDENT
		public Assignment getIdAssignment_4_1() { return cIdAssignment_4_1; }
		
		//IDENT
		public RuleCall getIdIDENTTerminalRuleCall_4_1_0() { return cIdIDENTTerminalRuleCall_4_1_0; }
		
		//subs+=ArraySubscripts?
		public Assignment getSubsAssignment_4_2() { return cSubsAssignment_4_2; }
		
		//ArraySubscripts
		public RuleCall getSubsArraySubscriptsParserRuleCall_4_2_0() { return cSubsArraySubscriptsParserRuleCall_4_2_0; }
	}
	public class FunctionCallArgsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.FunctionCallArgs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionCallArgsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFunctionArgsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFunctionArgsFunctionArgumentsParserRuleCall_2_0 = (RuleCall)cFunctionArgsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FunctionCallArgs:
		//	{FunctionCallArgs} '(' functionArgs=FunctionArguments? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{FunctionCallArgs} '(' functionArgs=FunctionArguments? ')'
		public Group getGroup() { return cGroup; }
		
		//{FunctionCallArgs}
		public Action getFunctionCallArgsAction_0() { return cFunctionCallArgsAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//functionArgs=FunctionArguments?
		public Assignment getFunctionArgsAssignment_2() { return cFunctionArgsAssignment_2; }
		
		//FunctionArguments
		public RuleCall getFunctionArgsFunctionArgumentsParserRuleCall_2_0() { return cFunctionArgsFunctionArgumentsParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class FunctionArgumentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.FunctionArguments");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cFunctionArgumentAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cFunctionArgumentFunctionArgumentParserRuleCall_0_0_0 = (RuleCall)cFunctionArgumentAssignment_0_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Group cGroup_0_1_0 = (Group)cAlternatives_0_1.eContents().get(0);
		private final Keyword cCommaKeyword_0_1_0_0 = (Keyword)cGroup_0_1_0.eContents().get(0);
		private final Assignment cArgsAssignment_0_1_0_1 = (Assignment)cGroup_0_1_0.eContents().get(1);
		private final RuleCall cArgsFunctionArgumentsParserRuleCall_0_1_0_1_0 = (RuleCall)cArgsAssignment_0_1_0_1.eContents().get(0);
		private final Group cGroup_0_1_1 = (Group)cAlternatives_0_1.eContents().get(1);
		private final Keyword cForKeyword_0_1_1_0 = (Keyword)cGroup_0_1_1.eContents().get(0);
		private final Assignment cForIndicesAssignment_0_1_1_1 = (Assignment)cGroup_0_1_1.eContents().get(1);
		private final RuleCall cForIndicesForIndicesParserRuleCall_0_1_1_1_0 = (RuleCall)cForIndicesAssignment_0_1_1_1.eContents().get(0);
		private final Assignment cNamedArgumentsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNamedArgumentsNamedArgumentsParserRuleCall_1_0 = (RuleCall)cNamedArgumentsAssignment_1.eContents().get(0);
		
		//FunctionArguments:
		//	functionArgument=FunctionArgument (',' args+=FunctionArguments | 'for' forIndices+=ForIndices)?
		//	| namedArguments=NamedArguments;
		@Override public ParserRule getRule() { return rule; }
		
		//functionArgument=FunctionArgument (',' args+=FunctionArguments | 'for' forIndices+=ForIndices)? |
		//namedArguments=NamedArguments
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//functionArgument=FunctionArgument (',' args+=FunctionArguments | 'for' forIndices+=ForIndices)?
		public Group getGroup_0() { return cGroup_0; }
		
		//functionArgument=FunctionArgument
		public Assignment getFunctionArgumentAssignment_0_0() { return cFunctionArgumentAssignment_0_0; }
		
		//FunctionArgument
		public RuleCall getFunctionArgumentFunctionArgumentParserRuleCall_0_0_0() { return cFunctionArgumentFunctionArgumentParserRuleCall_0_0_0; }
		
		//(',' args+=FunctionArguments | 'for' forIndices+=ForIndices)?
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//',' args+=FunctionArguments
		public Group getGroup_0_1_0() { return cGroup_0_1_0; }
		
		//','
		public Keyword getCommaKeyword_0_1_0_0() { return cCommaKeyword_0_1_0_0; }
		
		//args+=FunctionArguments
		public Assignment getArgsAssignment_0_1_0_1() { return cArgsAssignment_0_1_0_1; }
		
		//FunctionArguments
		public RuleCall getArgsFunctionArgumentsParserRuleCall_0_1_0_1_0() { return cArgsFunctionArgumentsParserRuleCall_0_1_0_1_0; }
		
		//'for' forIndices+=ForIndices
		public Group getGroup_0_1_1() { return cGroup_0_1_1; }
		
		//'for'
		public Keyword getForKeyword_0_1_1_0() { return cForKeyword_0_1_1_0; }
		
		//forIndices+=ForIndices
		public Assignment getForIndicesAssignment_0_1_1_1() { return cForIndicesAssignment_0_1_1_1; }
		
		//ForIndices
		public RuleCall getForIndicesForIndicesParserRuleCall_0_1_1_1_0() { return cForIndicesForIndicesParserRuleCall_0_1_1_1_0; }
		
		//namedArguments=NamedArguments
		public Assignment getNamedArgumentsAssignment_1() { return cNamedArgumentsAssignment_1; }
		
		//NamedArguments
		public RuleCall getNamedArgumentsNamedArgumentsParserRuleCall_1_0() { return cNamedArgumentsNamedArgumentsParserRuleCall_1_0; }
	}
	public class NamedArgumentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.NamedArguments");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNamedArgumentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNamedArgumentNamedArgumentParserRuleCall_0_0 = (RuleCall)cNamedArgumentAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNamedArgumentsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNamedArgumentsNamedArgumentsParserRuleCall_1_1_0 = (RuleCall)cNamedArgumentsAssignment_1_1.eContents().get(0);
		
		//NamedArguments:
		//	namedArgument+=NamedArgument (',' namedArguments=NamedArguments)?;
		@Override public ParserRule getRule() { return rule; }
		
		//namedArgument+=NamedArgument (',' namedArguments=NamedArguments)?
		public Group getGroup() { return cGroup; }
		
		//namedArgument+=NamedArgument
		public Assignment getNamedArgumentAssignment_0() { return cNamedArgumentAssignment_0; }
		
		//NamedArgument
		public RuleCall getNamedArgumentNamedArgumentParserRuleCall_0_0() { return cNamedArgumentNamedArgumentParserRuleCall_0_0; }
		
		//(',' namedArguments=NamedArguments)?
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//namedArguments=NamedArguments
		public Assignment getNamedArgumentsAssignment_1_1() { return cNamedArgumentsAssignment_1_1; }
		
		//NamedArguments
		public RuleCall getNamedArgumentsNamedArgumentsParserRuleCall_1_1_0() { return cNamedArgumentsNamedArgumentsParserRuleCall_1_1_0; }
	}
	public class NamedArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.NamedArgument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDENTTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFunctionArgumentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFunctionArgumentFunctionArgumentParserRuleCall_2_0 = (RuleCall)cFunctionArgumentAssignment_2.eContents().get(0);
		
		//NamedArgument:
		//	name=IDENT '=' functionArgument=FunctionArgument;
		@Override public ParserRule getRule() { return rule; }
		
		//name=IDENT '=' functionArgument=FunctionArgument
		public Group getGroup() { return cGroup; }
		
		//name=IDENT
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//IDENT
		public RuleCall getNameIDENTTerminalRuleCall_0_0() { return cNameIDENTTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//functionArgument=FunctionArgument
		public Assignment getFunctionArgumentAssignment_2() { return cFunctionArgumentAssignment_2; }
		
		//FunctionArgument
		public RuleCall getFunctionArgumentFunctionArgumentParserRuleCall_2_0() { return cFunctionArgumentFunctionArgumentParserRuleCall_2_0; }
	}
	public class FunctionArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.FunctionArgument");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cFunctionKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cNamedArgumentsAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cNamedArgumentsNamedArgumentsParserRuleCall_0_3_0 = (RuleCall)cNamedArgumentsAssignment_0_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cExpressionAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//FunctionArgument:
		//	'function' name=Name '(' namedArguments=NamedArguments? ')' | expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'function' name=Name '(' namedArguments=NamedArguments? ')' | expression=Expression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'function' name=Name '(' namedArguments=NamedArguments? ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'function'
		public Keyword getFunctionKeyword_0_0() { return cFunctionKeyword_0_0; }
		
		//name=Name
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//Name
		public RuleCall getNameNameParserRuleCall_0_1_0() { return cNameNameParserRuleCall_0_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_2() { return cLeftParenthesisKeyword_0_2; }
		
		//namedArguments=NamedArguments?
		public Assignment getNamedArgumentsAssignment_0_3() { return cNamedArgumentsAssignment_0_3; }
		
		//NamedArguments
		public RuleCall getNamedArgumentsNamedArgumentsParserRuleCall_0_3_0() { return cNamedArgumentsNamedArgumentsParserRuleCall_0_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_4() { return cRightParenthesisKeyword_0_4; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}
	public class OutputExpressionListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.OutputExpressionList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOutputExpresionListAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExpressionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionsExpressionParserRuleCall_1_0 = (RuleCall)cExpressionsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExpressionsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExpressionsExpressionParserRuleCall_2_1_0 = (RuleCall)cExpressionsAssignment_2_1.eContents().get(0);
		
		//OutputExpressionList:
		//	{OutputExpresionList} expressions+=Expression? (',' expressions+=Expression?)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{OutputExpresionList} expressions+=Expression? (',' expressions+=Expression?)*
		public Group getGroup() { return cGroup; }
		
		//{OutputExpresionList}
		public Action getOutputExpresionListAction_0() { return cOutputExpresionListAction_0; }
		
		//expressions+=Expression?
		public Assignment getExpressionsAssignment_1() { return cExpressionsAssignment_1; }
		
		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_1_0() { return cExpressionsExpressionParserRuleCall_1_0; }
		
		//(',' expressions+=Expression?)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//expressions+=Expression?
		public Assignment getExpressionsAssignment_2_1() { return cExpressionsAssignment_2_1; }
		
		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_2_1_0() { return cExpressionsExpressionParserRuleCall_2_1_0; }
	}
	public class ExprExpressionListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.ExprExpressionList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpExpressionParserRuleCall_0_0 = (RuleCall)cExpAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_1_1_0 = (RuleCall)cExpAssignment_1_1.eContents().get(0);
		
		//ExprExpressionList:
		//	exp+=Expression (',' exp+=Expression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//exp+=Expression (',' exp+=Expression)*
		public Group getGroup() { return cGroup; }
		
		//exp+=Expression
		public Assignment getExpAssignment_0() { return cExpAssignment_0; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_0_0() { return cExpExpressionParserRuleCall_0_0; }
		
		//(',' exp+=Expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//exp+=Expression
		public Assignment getExpAssignment_1_1() { return cExpAssignment_1_1; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_1_1_0() { return cExpExpressionParserRuleCall_1_1_0; }
	}
	public class ArraySubscriptsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.ArraySubscripts");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSubscriptsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubscriptsSubscriptParserRuleCall_1_0 = (RuleCall)cSubscriptsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSubscriptsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSubscriptsSubscriptParserRuleCall_2_1_0 = (RuleCall)cSubscriptsAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ArraySubscripts:
		//	'[' subscripts+=Subscript (',' subscripts+=Subscript)* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' subscripts+=Subscript (',' subscripts+=Subscript)* ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//subscripts+=Subscript
		public Assignment getSubscriptsAssignment_1() { return cSubscriptsAssignment_1; }
		
		//Subscript
		public RuleCall getSubscriptsSubscriptParserRuleCall_1_0() { return cSubscriptsSubscriptParserRuleCall_1_0; }
		
		//(',' subscripts+=Subscript)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//subscripts+=Subscript
		public Assignment getSubscriptsAssignment_2_1() { return cSubscriptsAssignment_2_1; }
		
		//Subscript
		public RuleCall getSubscriptsSubscriptParserRuleCall_2_1_0() { return cSubscriptsSubscriptParserRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class SubscriptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.Subscript");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cSubscriptAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Subscript:
		//	{Subscript} ':' | Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//{Subscript} ':' | Expression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Subscript} ':'
		public Group getGroup_0() { return cGroup_0; }
		
		//{Subscript}
		public Action getSubscriptAction_0_0() { return cSubscriptAction_0_0; }
		
		//':'
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }
	}
	public class CommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.Comment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStringCommentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStringCommentStringCommentParserRuleCall_0_0 = (RuleCall)cStringCommentAssignment_0.eContents().get(0);
		private final Assignment cAnnotationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationAssignment_1.eContents().get(0);
		
		//Comment:
		//	stringComment=StringComment annotation=Annotation?;
		@Override public ParserRule getRule() { return rule; }
		
		//stringComment=StringComment annotation=Annotation?
		public Group getGroup() { return cGroup; }
		
		//stringComment=StringComment
		public Assignment getStringCommentAssignment_0() { return cStringCommentAssignment_0; }
		
		//StringComment
		public RuleCall getStringCommentStringCommentParserRuleCall_0_0() { return cStringCommentStringCommentParserRuleCall_0_0; }
		
		//annotation=Annotation?
		public Assignment getAnnotationAssignment_1() { return cAnnotationAssignment_1; }
		
		//Annotation
		public RuleCall getAnnotationAnnotationParserRuleCall_1_0() { return cAnnotationAnnotationParserRuleCall_1_0; }
	}
	public class StringCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.StringComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringCommentAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cPlusSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cStrAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cStrSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cStrAssignment_2_1.eContents().get(0);
		
		//StringComment:
		//	{StringComment} STRING ('+' str+=STRING)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{StringComment} STRING ('+' str+=STRING)*
		public Group getGroup() { return cGroup; }
		
		//{StringComment}
		public Action getStringCommentAction_0() { return cStringCommentAction_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
		
		//('+' str+=STRING)*
		public Group getGroup_2() { return cGroup_2; }
		
		//'+'
		public Keyword getPlusSignKeyword_2_0() { return cPlusSignKeyword_2_0; }
		
		//str+=STRING
		public Assignment getStrAssignment_2_1() { return cStrAssignment_2_1; }
		
		//STRING
		public RuleCall getStrSTRINGTerminalRuleCall_2_1_0() { return cStrSTRINGTerminalRuleCall_2_1_0; }
	}
	public class AssertElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.Assert");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssertKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionExpressionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMessageAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMessageExpressionParserRuleCall_4_0 = (RuleCall)cMessageAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cLevelKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_5_1_1 = (Keyword)cGroup_5_1.eContents().get(1);
		private final Assignment cLevelAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cLevelAssertionLevelEnumRuleCall_5_2_0 = (RuleCall)cLevelAssignment_5_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Assert:
		//	'assert' '(' condition=Expression ',' message=Expression (',' ('level' '=')? level=AssertionLevel)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'assert' '(' condition=Expression ',' message=Expression (',' ('level' '=')? level=AssertionLevel)? ')'
		public Group getGroup() { return cGroup; }
		
		//'assert'
		public Keyword getAssertKeyword_0() { return cAssertKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//condition=Expression
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_2_0() { return cConditionExpressionParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//message=Expression
		public Assignment getMessageAssignment_4() { return cMessageAssignment_4; }
		
		//Expression
		public RuleCall getMessageExpressionParserRuleCall_4_0() { return cMessageExpressionParserRuleCall_4_0; }
		
		//(',' ('level' '=')? level=AssertionLevel)?
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//('level' '=')?
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//'level'
		public Keyword getLevelKeyword_5_1_0() { return cLevelKeyword_5_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_5_1_1() { return cEqualsSignKeyword_5_1_1; }
		
		//level=AssertionLevel
		public Assignment getLevelAssignment_5_2() { return cLevelAssignment_5_2; }
		
		//AssertionLevel
		public RuleCall getLevelAssertionLevelEnumRuleCall_5_2_0() { return cLevelAssertionLevelEnumRuleCall_5_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class AnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.Annotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnnotationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgsAnnotationArgParserRuleCall_2_0 = (RuleCall)cArgsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cArgsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cArgsAnnotationArgParserRuleCall_3_1_0 = (RuleCall)cArgsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// ANNOTATIONS
		//// TODO modified with respect to the modelica manual: modification is now optional
		////Annotation: 'annotation' ClassModification ;
		//Annotation:
		//	'annotation' '(' args+=AnnotationArg (',' args+=AnnotationArg)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'annotation' '(' args+=AnnotationArg (',' args+=AnnotationArg)* ')'
		public Group getGroup() { return cGroup; }
		
		//'annotation'
		public Keyword getAnnotationKeyword_0() { return cAnnotationKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//args+=AnnotationArg
		public Assignment getArgsAssignment_2() { return cArgsAssignment_2; }
		
		//AnnotationArg
		public RuleCall getArgsAnnotationArgParserRuleCall_2_0() { return cArgsAnnotationArgParserRuleCall_2_0; }
		
		//(',' args+=AnnotationArg)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//args+=AnnotationArg
		public Assignment getArgsAssignment_3_1() { return cArgsAssignment_3_1; }
		
		//AnnotationArg
		public RuleCall getArgsAnnotationArgParserRuleCall_3_1_0() { return cArgsAnnotationArgParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class AnnotationArgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.AnnotationArg");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAnnotationCodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPlacementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLineParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAnnotationLayerParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cAnnotationDocumentationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDialogParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cAnnotationExperimentParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cChoicesParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cDefComponentNameParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		////AnnotationGraphical
		//AnnotationArg:
		//	AnnotationCode | Placement | Line | AnnotationLayer | AnnotationDocumentation | Dialog
		//	| AnnotationExperiment | Choices | DefComponentName;
		@Override public ParserRule getRule() { return rule; }
		
		//AnnotationCode | Placement | Line | AnnotationLayer | AnnotationDocumentation | Dialog | AnnotationExperiment | Choices
		//| DefComponentName
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AnnotationCode
		public RuleCall getAnnotationCodeParserRuleCall_0() { return cAnnotationCodeParserRuleCall_0; }
		
		//Placement
		public RuleCall getPlacementParserRuleCall_1() { return cPlacementParserRuleCall_1; }
		
		//Line
		public RuleCall getLineParserRuleCall_2() { return cLineParserRuleCall_2; }
		
		//AnnotationLayer
		public RuleCall getAnnotationLayerParserRuleCall_3() { return cAnnotationLayerParserRuleCall_3; }
		
		//AnnotationDocumentation
		public RuleCall getAnnotationDocumentationParserRuleCall_4() { return cAnnotationDocumentationParserRuleCall_4; }
		
		//Dialog
		public RuleCall getDialogParserRuleCall_5() { return cDialogParserRuleCall_5; }
		
		//AnnotationExperiment
		public RuleCall getAnnotationExperimentParserRuleCall_6() { return cAnnotationExperimentParserRuleCall_6; }
		
		//Choices
		public RuleCall getChoicesParserRuleCall_7() { return cChoicesParserRuleCall_7; }
		
		//DefComponentName
		public RuleCall getDefComponentNameParserRuleCall_8() { return cDefComponentNameParserRuleCall_8; }
	}
	public class DefComponentNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.DefComponentName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefaultComponentNameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//DefComponentName:
		//	'defaultComponentName' '=' value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'defaultComponentName' '=' value=STRING
		public Group getGroup() { return cGroup; }
		
		//'defaultComponentName'
		public Keyword getDefaultComponentNameKeyword_0() { return cDefaultComponentNameKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}
	public class ChoicesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.Choices");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChoicesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypesIDENTTerminalRuleCall_2_0 = (RuleCall)cTypesAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValuesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Alternatives cValuesAlternatives_4_0 = (Alternatives)cValuesAssignment_4.eContents().get(0);
		private final Keyword cValuesTrueKeyword_4_0_0 = (Keyword)cValuesAlternatives_4_0.eContents().get(0);
		private final Keyword cValuesFalseKeyword_4_0_1 = (Keyword)cValuesAlternatives_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cTypesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cTypesIDENTTerminalRuleCall_5_1_0 = (RuleCall)cTypesAssignment_5_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cValuesAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final Alternatives cValuesAlternatives_5_3_0 = (Alternatives)cValuesAssignment_5_3.eContents().get(0);
		private final Keyword cValuesTrueKeyword_5_3_0_0 = (Keyword)cValuesAlternatives_5_3_0.eContents().get(0);
		private final Keyword cValuesFalseKeyword_5_3_0_1 = (Keyword)cValuesAlternatives_5_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Choices:
		//	'choices' '(' types+=IDENT '=' values+=('true' | 'false') (',' types+=IDENT '=' values+=('true' | 'false'))* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'choices' '(' types+=IDENT '=' values+=('true' | 'false') (',' types+=IDENT '=' values+=('true' | 'false'))* ')'
		public Group getGroup() { return cGroup; }
		
		//'choices'
		public Keyword getChoicesKeyword_0() { return cChoicesKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//types+=IDENT
		public Assignment getTypesAssignment_2() { return cTypesAssignment_2; }
		
		//IDENT
		public RuleCall getTypesIDENTTerminalRuleCall_2_0() { return cTypesIDENTTerminalRuleCall_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//values+=('true' | 'false')
		public Assignment getValuesAssignment_4() { return cValuesAssignment_4; }
		
		//('true' | 'false')
		public Alternatives getValuesAlternatives_4_0() { return cValuesAlternatives_4_0; }
		
		//'true'
		public Keyword getValuesTrueKeyword_4_0_0() { return cValuesTrueKeyword_4_0_0; }
		
		//'false'
		public Keyword getValuesFalseKeyword_4_0_1() { return cValuesFalseKeyword_4_0_1; }
		
		//(',' types+=IDENT '=' values+=('true' | 'false'))*
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//types+=IDENT
		public Assignment getTypesAssignment_5_1() { return cTypesAssignment_5_1; }
		
		//IDENT
		public RuleCall getTypesIDENTTerminalRuleCall_5_1_0() { return cTypesIDENTTerminalRuleCall_5_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_5_2() { return cEqualsSignKeyword_5_2; }
		
		//values+=('true' | 'false')
		public Assignment getValuesAssignment_5_3() { return cValuesAssignment_5_3; }
		
		//('true' | 'false')
		public Alternatives getValuesAlternatives_5_3_0() { return cValuesAlternatives_5_3_0; }
		
		//'true'
		public Keyword getValuesTrueKeyword_5_3_0_0() { return cValuesTrueKeyword_5_3_0_0; }
		
		//'false'
		public Keyword getValuesFalseKeyword_5_3_0_1() { return cValuesFalseKeyword_5_3_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class AnnotationCodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.AnnotationCode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFlagAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFlagCodeGenerationFlagParserRuleCall_0_0 = (RuleCall)cFlagAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cValueAlternatives_2_0 = (Alternatives)cValueAssignment_2.eContents().get(0);
		private final Keyword cValueTrueKeyword_2_0_0 = (Keyword)cValueAlternatives_2_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_2_0_1 = (Keyword)cValueAlternatives_2_0.eContents().get(1);
		
		//AnnotationCode:
		//	flag=CodeGenerationFlag "=" value=('true' | 'false');
		@Override public ParserRule getRule() { return rule; }
		
		//flag=CodeGenerationFlag "=" value=('true' | 'false')
		public Group getGroup() { return cGroup; }
		
		//flag=CodeGenerationFlag
		public Assignment getFlagAssignment_0() { return cFlagAssignment_0; }
		
		//CodeGenerationFlag
		public RuleCall getFlagCodeGenerationFlagParserRuleCall_0_0() { return cFlagCodeGenerationFlagParserRuleCall_0_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=('true' | 'false')
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//('true' | 'false')
		public Alternatives getValueAlternatives_2_0() { return cValueAlternatives_2_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_2_0_0() { return cValueTrueKeyword_2_0_0; }
		
		//'false'
		public Keyword getValueFalseKeyword_2_0_1() { return cValueFalseKeyword_2_0_1; }
	}
	public class CodeGenerationFlagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.CodeGenerationFlag");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEvaluateKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHideResultKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cInlineKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLateInlineKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cGenerateEventsKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//CodeGenerationFlag:
		//	"Evaluate" | "HideResult" | "Inline" | "LateInline" | "GenerateEvents";
		@Override public ParserRule getRule() { return rule; }
		
		//"Evaluate" | "HideResult" | "Inline" | "LateInline" | "GenerateEvents"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"Evaluate"
		public Keyword getEvaluateKeyword_0() { return cEvaluateKeyword_0; }
		
		//"HideResult"
		public Keyword getHideResultKeyword_1() { return cHideResultKeyword_1; }
		
		//"Inline"
		public Keyword getInlineKeyword_2() { return cInlineKeyword_2; }
		
		//"LateInline"
		public Keyword getLateInlineKeyword_3() { return cLateInlineKeyword_3; }
		
		//"GenerateEvents"
		public Keyword getGenerateEventsKeyword_4() { return cGenerateEventsKeyword_4; }
	}
	public class AnnotationLayerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.AnnotationLayer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLayerIconParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLayerDiagramParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AnnotationLayer:
		//	LayerIcon | LayerDiagram;
		@Override public ParserRule getRule() { return rule; }
		
		//LayerIcon | LayerDiagram
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LayerIcon
		public RuleCall getLayerIconParserRuleCall_0() { return cLayerIconParserRuleCall_0; }
		
		//LayerDiagram
		public RuleCall getLayerDiagramParserRuleCall_1() { return cLayerDiagramParserRuleCall_1; }
	}
	public class LayerIconElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.LayerIcon");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIconKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cCoordinateSystemAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cCoordinateSystemCoordinateSpecificationParserRuleCall_2_0_0 = (RuleCall)cCoordinateSystemAssignment_2_0.eContents().get(0);
		private final Keyword cCommaKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cGraphicsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cGraphicsGraphicsParserRuleCall_3_0 = (RuleCall)cGraphicsAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//LayerIcon:
		//	'Icon' '(' (coordinateSystem=CoordinateSpecification ',')? graphics=Graphics ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'Icon' '(' (coordinateSystem=CoordinateSpecification ',')? graphics=Graphics ')'
		public Group getGroup() { return cGroup; }
		
		//'Icon'
		public Keyword getIconKeyword_0() { return cIconKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(coordinateSystem=CoordinateSpecification ',')?
		public Group getGroup_2() { return cGroup_2; }
		
		//coordinateSystem=CoordinateSpecification
		public Assignment getCoordinateSystemAssignment_2_0() { return cCoordinateSystemAssignment_2_0; }
		
		//CoordinateSpecification
		public RuleCall getCoordinateSystemCoordinateSpecificationParserRuleCall_2_0_0() { return cCoordinateSystemCoordinateSpecificationParserRuleCall_2_0_0; }
		
		//','
		public Keyword getCommaKeyword_2_1() { return cCommaKeyword_2_1; }
		
		//graphics=Graphics
		public Assignment getGraphicsAssignment_3() { return cGraphicsAssignment_3; }
		
		//Graphics
		public RuleCall getGraphicsGraphicsParserRuleCall_3_0() { return cGraphicsGraphicsParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class LayerDiagramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.LayerDiagram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLayerDiagramAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDiagramKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCoordinateSystemAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCoordinateSystemCoordinateSpecificationParserRuleCall_3_0 = (RuleCall)cCoordinateSystemAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cGraphicsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cGraphicsGraphicsParserRuleCall_4_1_0 = (RuleCall)cGraphicsAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// TODO modified with respect to the modelica manual (comma and graphics optional)
		//LayerDiagram:
		//	{LayerDiagram} 'Diagram' '(' coordinateSystem=CoordinateSpecification? (',' graphics=Graphics)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{LayerDiagram} 'Diagram' '(' coordinateSystem=CoordinateSpecification? (',' graphics=Graphics)? ')'
		public Group getGroup() { return cGroup; }
		
		//{LayerDiagram}
		public Action getLayerDiagramAction_0() { return cLayerDiagramAction_0; }
		
		//'Diagram'
		public Keyword getDiagramKeyword_1() { return cDiagramKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//coordinateSystem=CoordinateSpecification?
		public Assignment getCoordinateSystemAssignment_3() { return cCoordinateSystemAssignment_3; }
		
		//CoordinateSpecification
		public RuleCall getCoordinateSystemCoordinateSpecificationParserRuleCall_3_0() { return cCoordinateSystemCoordinateSpecificationParserRuleCall_3_0; }
		
		//(',' graphics=Graphics)?
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//graphics=Graphics
		public Assignment getGraphicsAssignment_4_1() { return cGraphicsAssignment_4_1; }
		
		//Graphics
		public RuleCall getGraphicsGraphicsParserRuleCall_4_1_0() { return cGraphicsGraphicsParserRuleCall_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class CoordinateSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.CoordinateSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCoordinateSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgsCoordinateSpecificationArgsParserRuleCall_2_0 = (RuleCall)cArgsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cArgsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cArgsCoordinateSpecificationArgsParserRuleCall_3_1_0 = (RuleCall)cArgsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CoordinateSpecification:
		//	'coordinateSystem' '(' args+=CoordinateSpecificationArgs (',' args+=CoordinateSpecificationArgs)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'coordinateSystem' '(' args+=CoordinateSpecificationArgs (',' args+=CoordinateSpecificationArgs)* ')'
		public Group getGroup() { return cGroup; }
		
		//'coordinateSystem'
		public Keyword getCoordinateSystemKeyword_0() { return cCoordinateSystemKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//args+=CoordinateSpecificationArgs
		public Assignment getArgsAssignment_2() { return cArgsAssignment_2; }
		
		//CoordinateSpecificationArgs
		public RuleCall getArgsCoordinateSpecificationArgsParserRuleCall_2_0() { return cArgsCoordinateSpecificationArgsParserRuleCall_2_0; }
		
		//(',' args+=CoordinateSpecificationArgs)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//args+=CoordinateSpecificationArgs
		public Assignment getArgsAssignment_3_1() { return cArgsAssignment_3_1; }
		
		//CoordinateSpecificationArgs
		public RuleCall getArgsCoordinateSpecificationArgsParserRuleCall_3_1_0() { return cArgsCoordinateSpecificationArgsParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class CoordinateSpecificationArgsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.CoordinateSpecificationArgs");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExtentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPreserveARParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInitialScaleParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cGridParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//CoordinateSpecificationArgs:
		//	Extent | PreserveAR | InitialScale | Grid;
		@Override public ParserRule getRule() { return rule; }
		
		//Extent | PreserveAR | InitialScale | Grid
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Extent
		public RuleCall getExtentParserRuleCall_0() { return cExtentParserRuleCall_0; }
		
		//PreserveAR
		public RuleCall getPreserveARParserRuleCall_1() { return cPreserveARParserRuleCall_1; }
		
		//InitialScale
		public RuleCall getInitialScaleParserRuleCall_2() { return cInitialScaleParserRuleCall_2; }
		
		//Grid
		public RuleCall getGridParserRuleCall_3() { return cGridParserRuleCall_3; }
	}
	public class ExtentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.Extent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExtentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cP1Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cP1PointParserRuleCall_3_0 = (RuleCall)cP1Assignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cP2Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cP2PointParserRuleCall_5_0 = (RuleCall)cP2Assignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Extent:
		//	'extent' '=' '{' p1=Point ',' p2=Point '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'extent' '=' '{' p1=Point ',' p2=Point '}'
		public Group getGroup() { return cGroup; }
		
		//'extent'
		public Keyword getExtentKeyword_0() { return cExtentKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//p1=Point
		public Assignment getP1Assignment_3() { return cP1Assignment_3; }
		
		//Point
		public RuleCall getP1PointParserRuleCall_3_0() { return cP1PointParserRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//p2=Point
		public Assignment getP2Assignment_5() { return cP2Assignment_5; }
		
		//Point
		public RuleCall getP2PointParserRuleCall_5_0() { return cP2PointParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class PreserveARElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.PreserveAR");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPreserveAspectRatioKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cValueAlternatives_2_0 = (Alternatives)cValueAssignment_2.eContents().get(0);
		private final Keyword cValueTrueKeyword_2_0_0 = (Keyword)cValueAlternatives_2_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_2_0_1 = (Keyword)cValueAlternatives_2_0.eContents().get(1);
		
		//PreserveAR:
		//	'preserveAspectRatio' '=' value=('true' | 'false');
		@Override public ParserRule getRule() { return rule; }
		
		//'preserveAspectRatio' '=' value=('true' | 'false')
		public Group getGroup() { return cGroup; }
		
		//'preserveAspectRatio'
		public Keyword getPreserveAspectRatioKeyword_0() { return cPreserveAspectRatioKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=('true' | 'false')
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//('true' | 'false')
		public Alternatives getValueAlternatives_2_0() { return cValueAlternatives_2_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_2_0_0() { return cValueTrueKeyword_2_0_0; }
		
		//'false'
		public Keyword getValueFalseKeyword_2_0_1() { return cValueFalseKeyword_2_0_1; }
	}
	public class InitialScaleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.InitialScale");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInitialScaleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueUNSIGNED_NUMBERTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//InitialScale:
		//	'initialScale' '=' value=UNSIGNED_NUMBER;
		@Override public ParserRule getRule() { return rule; }
		
		//'initialScale' '=' value=UNSIGNED_NUMBER
		public Group getGroup() { return cGroup; }
		
		//'initialScale'
		public Keyword getInitialScaleKeyword_0() { return cInitialScaleKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=UNSIGNED_NUMBER
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//UNSIGNED_NUMBER
		public RuleCall getValueUNSIGNED_NUMBERTerminalRuleCall_2_0() { return cValueUNSIGNED_NUMBERTerminalRuleCall_2_0; }
	}
	public class GridElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.Grid");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGridKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuePointParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Grid:
		//	'grid' '=' value=Point;
		@Override public ParserRule getRule() { return rule; }
		
		//'grid' '=' value=Point
		public Group getGroup() { return cGroup; }
		
		//'grid'
		public Keyword getGridKeyword_0() { return cGridKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=Point
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Point
		public RuleCall getValuePointParserRuleCall_2_0() { return cValuePointParserRuleCall_2_0; }
	}
	public class PlacementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.Placement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNamePlacementKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgsPlacementArgParserRuleCall_2_0 = (RuleCall)cArgsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cArgsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cArgsPlacementArgParserRuleCall_3_1_0 = (RuleCall)cArgsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Placement:
		//	name='Placement' '(' args+=PlacementArg (',' args+=PlacementArg)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//name='Placement' '(' args+=PlacementArg (',' args+=PlacementArg)* ')'
		public Group getGroup() { return cGroup; }
		
		//name='Placement'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'Placement'
		public Keyword getNamePlacementKeyword_0_0() { return cNamePlacementKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//args+=PlacementArg
		public Assignment getArgsAssignment_2() { return cArgsAssignment_2; }
		
		//PlacementArg
		public RuleCall getArgsPlacementArgParserRuleCall_2_0() { return cArgsPlacementArgParserRuleCall_2_0; }
		
		//(',' args+=PlacementArg)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//args+=PlacementArg
		public Assignment getArgsAssignment_3_1() { return cArgsAssignment_3_1; }
		
		//PlacementArg
		public RuleCall getArgsPlacementArgParserRuleCall_3_1_0() { return cArgsPlacementArgParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class PlacementArgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.PlacementArg");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVisibleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTransformationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PlacementArg:
		//	Visible | Transformation;
		@Override public ParserRule getRule() { return rule; }
		
		//Visible | Transformation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Visible
		public RuleCall getVisibleParserRuleCall_0() { return cVisibleParserRuleCall_0; }
		
		//Transformation
		public RuleCall getTransformationParserRuleCall_1() { return cTransformationParserRuleCall_1; }
	}
	public class VisibleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.Visible");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVisibleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cValueAlternatives_2_0 = (Alternatives)cValueAssignment_2.eContents().get(0);
		private final Keyword cValueTrueKeyword_2_0_0 = (Keyword)cValueAlternatives_2_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_2_0_1 = (Keyword)cValueAlternatives_2_0.eContents().get(1);
		
		//Visible:
		//	'visible' '=' value=('true' | 'false');
		@Override public ParserRule getRule() { return rule; }
		
		//'visible' '=' value=('true' | 'false')
		public Group getGroup() { return cGroup; }
		
		//'visible'
		public Keyword getVisibleKeyword_0() { return cVisibleKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=('true' | 'false')
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//('true' | 'false')
		public Alternatives getValueAlternatives_2_0() { return cValueAlternatives_2_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_2_0_0() { return cValueTrueKeyword_2_0_0; }
		
		//'false'
		public Keyword getValueFalseKeyword_2_0_1() { return cValueFalseKeyword_2_0_1; }
	}
	public class TransformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.Transformation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cNameAlternatives_0_0 = (Alternatives)cNameAssignment_0.eContents().get(0);
		private final Keyword cNameTransformationKeyword_0_0_0 = (Keyword)cNameAlternatives_0_0.eContents().get(0);
		private final Keyword cNameIconTransformationKeyword_0_0_1 = (Keyword)cNameAlternatives_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgsTransformationArgParserRuleCall_2_0 = (RuleCall)cArgsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cArgsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cArgsTransformationArgParserRuleCall_3_1_0 = (RuleCall)cArgsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Transformation:
		//	name=('transformation' | 'iconTransformation') '(' args+=TransformationArg (',' args+=TransformationArg)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//name=('transformation' | 'iconTransformation') '(' args+=TransformationArg (',' args+=TransformationArg)* ')'
		public Group getGroup() { return cGroup; }
		
		//name=('transformation' | 'iconTransformation')
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//('transformation' | 'iconTransformation')
		public Alternatives getNameAlternatives_0_0() { return cNameAlternatives_0_0; }
		
		//'transformation'
		public Keyword getNameTransformationKeyword_0_0_0() { return cNameTransformationKeyword_0_0_0; }
		
		//'iconTransformation'
		public Keyword getNameIconTransformationKeyword_0_0_1() { return cNameIconTransformationKeyword_0_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//args+=TransformationArg
		public Assignment getArgsAssignment_2() { return cArgsAssignment_2; }
		
		//TransformationArg
		public RuleCall getArgsTransformationArgParserRuleCall_2_0() { return cArgsTransformationArgParserRuleCall_2_0; }
		
		//(',' args+=TransformationArg)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//args+=TransformationArg
		public Assignment getArgsAssignment_3_1() { return cArgsAssignment_3_1; }
		
		//TransformationArg
		public RuleCall getArgsTransformationArgParserRuleCall_3_1_0() { return cArgsTransformationArgParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class TransformationArgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.TransformationArg");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOriginParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExtentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRotationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//TransformationArg:
		//	Origin | Extent | Rotation;
		@Override public ParserRule getRule() { return rule; }
		
		//Origin | Extent | Rotation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Origin
		public RuleCall getOriginParserRuleCall_0() { return cOriginParserRuleCall_0; }
		
		//Extent
		public RuleCall getExtentParserRuleCall_1() { return cExtentParserRuleCall_1; }
		
		//Rotation
		public RuleCall getRotationParserRuleCall_2() { return cRotationParserRuleCall_2; }
	}
	public class RotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.Rotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameRotationKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Rotation:
		//	name='rotation' '=' value=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//name='rotation' '=' value=Expression
		public Group getGroup() { return cGroup; }
		
		//name='rotation'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'rotation'
		public Keyword getNameRotationKeyword_0_0() { return cNameRotationKeyword_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=Expression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0() { return cValueExpressionParserRuleCall_2_0; }
	}
	public class OriginElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.Origin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOriginKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPointAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPointPointParserRuleCall_2_0 = (RuleCall)cPointAssignment_2.eContents().get(0);
		
		//Origin:
		//	'origin' '=' point=Point;
		@Override public ParserRule getRule() { return rule; }
		
		//'origin' '=' point=Point
		public Group getGroup() { return cGroup; }
		
		//'origin'
		public Keyword getOriginKeyword_0() { return cOriginKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//point=Point
		public Assignment getPointAssignment_2() { return cPointAssignment_2; }
		
		//Point
		public RuleCall getPointPointParserRuleCall_2_0() { return cPointPointParserRuleCall_2_0; }
	}
	public class PointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.Point");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cXAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cXNumParserRuleCall_1_0 = (RuleCall)cXAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cYAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cYNumParserRuleCall_3_0 = (RuleCall)cYAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Point:
		//	'{' x=num ',' y=num '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' x=num ',' y=num '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//x=num
		public Assignment getXAssignment_1() { return cXAssignment_1; }
		
		//num
		public RuleCall getXNumParserRuleCall_1_0() { return cXNumParserRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//y=num
		public Assignment getYAssignment_3() { return cYAssignment_3; }
		
		//num
		public RuleCall getYNumParserRuleCall_3_0() { return cYNumParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class NumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.num");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUNSIGNED_INTEGERTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUNSIGNED_NUMBERTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//num ecore::EFloat:
		//	UNSIGNED_INTEGER | UNSIGNED_NUMBER
		@Override public ParserRule getRule() { return rule; }
		
		//UNSIGNED_INTEGER | UNSIGNED_NUMBER
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UNSIGNED_INTEGER
		public RuleCall getUNSIGNED_INTEGERTerminalRuleCall_0() { return cUNSIGNED_INTEGERTerminalRuleCall_0; }
		
		//UNSIGNED_NUMBER
		public RuleCall getUNSIGNED_NUMBERTerminalRuleCall_1() { return cUNSIGNED_NUMBERTerminalRuleCall_1; }
	}
	public class RadiusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.Radius");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cRadiusKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Action cRadiusAction_0_2 = (Action)cGroup_0.eContents().get(2);
		private final RuleCall cUNSIGNED_INTEGERTerminalRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cRadiusAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cUNSIGNED_NUMBERTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Radius:
		//	'radius' '=' {Radius} UNSIGNED_INTEGER | {Radius} UNSIGNED_NUMBER;
		@Override public ParserRule getRule() { return rule; }
		
		//'radius' '=' {Radius} UNSIGNED_INTEGER | {Radius} UNSIGNED_NUMBER
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'radius' '=' {Radius} UNSIGNED_INTEGER
		public Group getGroup_0() { return cGroup_0; }
		
		//'radius'
		public Keyword getRadiusKeyword_0_0() { return cRadiusKeyword_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }
		
		//{Radius}
		public Action getRadiusAction_0_2() { return cRadiusAction_0_2; }
		
		//UNSIGNED_INTEGER
		public RuleCall getUNSIGNED_INTEGERTerminalRuleCall_0_3() { return cUNSIGNED_INTEGERTerminalRuleCall_0_3; }
		
		//{Radius} UNSIGNED_NUMBER
		public Group getGroup_1() { return cGroup_1; }
		
		//{Radius}
		public Action getRadiusAction_1_0() { return cRadiusAction_1_0; }
		
		//UNSIGNED_NUMBER
		public RuleCall getUNSIGNED_NUMBERTerminalRuleCall_1_1() { return cUNSIGNED_NUMBERTerminalRuleCall_1_1; }
	}
	public class SmoothElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.Smooth");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSmoothKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSmoothEnumEnumRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Smooth:
		//	'smooth' '=' value=SmoothEnum;
		@Override public ParserRule getRule() { return rule; }
		
		//'smooth' '=' value=SmoothEnum
		public Group getGroup() { return cGroup; }
		
		//'smooth'
		public Keyword getSmoothKeyword_0() { return cSmoothKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=SmoothEnum
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//SmoothEnum
		public RuleCall getValueSmoothEnumEnumRuleCall_2_0() { return cValueSmoothEnumEnumRuleCall_2_0; }
	}
	public class ColorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.Color");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cColorKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cLineColorKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cFillColorKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRUNSIGNED_INTEGERTerminalRuleCall_3_0 = (RuleCall)cRAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cGAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cGUNSIGNED_INTEGERTerminalRuleCall_5_0 = (RuleCall)cGAssignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cBAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBUNSIGNED_INTEGERTerminalRuleCall_7_0 = (RuleCall)cBAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Color:
		//	('color' | 'lineColor' | 'fillColor') '=' '{' r=UNSIGNED_INTEGER ',' g=UNSIGNED_INTEGER ',' b=UNSIGNED_INTEGER '}';
		@Override public ParserRule getRule() { return rule; }
		
		//('color' | 'lineColor' | 'fillColor') '=' '{' r=UNSIGNED_INTEGER ',' g=UNSIGNED_INTEGER ',' b=UNSIGNED_INTEGER '}'
		public Group getGroup() { return cGroup; }
		
		//('color' | 'lineColor' | 'fillColor')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'color'
		public Keyword getColorKeyword_0_0() { return cColorKeyword_0_0; }
		
		//'lineColor'
		public Keyword getLineColorKeyword_0_1() { return cLineColorKeyword_0_1; }
		
		//'fillColor'
		public Keyword getFillColorKeyword_0_2() { return cFillColorKeyword_0_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//r=UNSIGNED_INTEGER
		public Assignment getRAssignment_3() { return cRAssignment_3; }
		
		//UNSIGNED_INTEGER
		public RuleCall getRUNSIGNED_INTEGERTerminalRuleCall_3_0() { return cRUNSIGNED_INTEGERTerminalRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//g=UNSIGNED_INTEGER
		public Assignment getGAssignment_5() { return cGAssignment_5; }
		
		//UNSIGNED_INTEGER
		public RuleCall getGUNSIGNED_INTEGERTerminalRuleCall_5_0() { return cGUNSIGNED_INTEGERTerminalRuleCall_5_0; }
		
		//','
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
		
		//b=UNSIGNED_INTEGER
		public Assignment getBAssignment_7() { return cBAssignment_7; }
		
		//UNSIGNED_INTEGER
		public RuleCall getBUNSIGNED_INTEGERTerminalRuleCall_7_0() { return cBUNSIGNED_INTEGERTerminalRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class ThicknessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.Thickness");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cThicknessKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueUNSIGNED_NUMBERTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Thickness:
		//	'thickness' '=' value=UNSIGNED_NUMBER;
		@Override public ParserRule getRule() { return rule; }
		
		//'thickness' '=' value=UNSIGNED_NUMBER
		public Group getGroup() { return cGroup; }
		
		//'thickness'
		public Keyword getThicknessKeyword_0() { return cThicknessKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=UNSIGNED_NUMBER
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//UNSIGNED_NUMBER
		public RuleCall getValueUNSIGNED_NUMBERTerminalRuleCall_2_0() { return cValueUNSIGNED_NUMBERTerminalRuleCall_2_0; }
	}
	public class GraphicsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.Graphics");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGraphicsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPrimitiveAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPrimitiveGraphicalPrimitiveParserRuleCall_3_0 = (RuleCall)cPrimitiveAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cPrimitiveAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cPrimitiveGraphicalPrimitiveParserRuleCall_4_1_0 = (RuleCall)cPrimitiveAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Graphics:
		//	'graphics' '=' '{' primitive+=GraphicalPrimitive (',' primitive+=GraphicalPrimitive)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'graphics' '=' '{' primitive+=GraphicalPrimitive (',' primitive+=GraphicalPrimitive)* '}'
		public Group getGroup() { return cGroup; }
		
		//'graphics'
		public Keyword getGraphicsKeyword_0() { return cGraphicsKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//primitive+=GraphicalPrimitive
		public Assignment getPrimitiveAssignment_3() { return cPrimitiveAssignment_3; }
		
		//GraphicalPrimitive
		public RuleCall getPrimitiveGraphicalPrimitiveParserRuleCall_3_0() { return cPrimitiveGraphicalPrimitiveParserRuleCall_3_0; }
		
		//(',' primitive+=GraphicalPrimitive)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//primitive+=GraphicalPrimitive
		public Assignment getPrimitiveAssignment_4_1() { return cPrimitiveAssignment_4_1; }
		
		//GraphicalPrimitive
		public RuleCall getPrimitiveGraphicalPrimitiveParserRuleCall_4_1_0() { return cPrimitiveGraphicalPrimitiveParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class GraphicalPrimitiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.GraphicalPrimitive");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLineParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPolygonParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRectangleParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEllipseParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTextParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cBitmapParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//GraphicalPrimitive:
		//	Line | Polygon | Rectangle | Ellipse | Text | Bitmap;
		@Override public ParserRule getRule() { return rule; }
		
		//Line | Polygon | Rectangle | Ellipse | Text | Bitmap
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Line
		public RuleCall getLineParserRuleCall_0() { return cLineParserRuleCall_0; }
		
		//Polygon
		public RuleCall getPolygonParserRuleCall_1() { return cPolygonParserRuleCall_1; }
		
		//Rectangle
		public RuleCall getRectangleParserRuleCall_2() { return cRectangleParserRuleCall_2; }
		
		//Ellipse
		public RuleCall getEllipseParserRuleCall_3() { return cEllipseParserRuleCall_3; }
		
		//Text
		public RuleCall getTextParserRuleCall_4() { return cTextParserRuleCall_4; }
		
		//Bitmap
		public RuleCall getBitmapParserRuleCall_5() { return cBitmapParserRuleCall_5; }
	}
	public class LineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.Line");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameLineKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgsGraphicalPrimitiveArgsParserRuleCall_2_0 = (RuleCall)cArgsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cArgsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cArgsGraphicalPrimitiveArgsParserRuleCall_3_1_0 = (RuleCall)cArgsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Line:
		//	name='Line' '(' args+=GraphicalPrimitiveArgs (',' args+=GraphicalPrimitiveArgs)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//name='Line' '(' args+=GraphicalPrimitiveArgs (',' args+=GraphicalPrimitiveArgs)* ')'
		public Group getGroup() { return cGroup; }
		
		//name='Line'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'Line'
		public Keyword getNameLineKeyword_0_0() { return cNameLineKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//args+=GraphicalPrimitiveArgs
		public Assignment getArgsAssignment_2() { return cArgsAssignment_2; }
		
		//GraphicalPrimitiveArgs
		public RuleCall getArgsGraphicalPrimitiveArgsParserRuleCall_2_0() { return cArgsGraphicalPrimitiveArgsParserRuleCall_2_0; }
		
		//(',' args+=GraphicalPrimitiveArgs)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//args+=GraphicalPrimitiveArgs
		public Assignment getArgsAssignment_3_1() { return cArgsAssignment_3_1; }
		
		//GraphicalPrimitiveArgs
		public RuleCall getArgsGraphicalPrimitiveArgsParserRuleCall_3_1_0() { return cArgsGraphicalPrimitiveArgsParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class PolygonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.Polygon");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNamePolygonKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgsGraphicalPrimitiveArgsParserRuleCall_2_0 = (RuleCall)cArgsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cArgsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cArgsGraphicalPrimitiveArgsParserRuleCall_3_1_0 = (RuleCall)cArgsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Polygon:
		//	name='Polygon' '(' args+=GraphicalPrimitiveArgs (',' args+=GraphicalPrimitiveArgs)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//name='Polygon' '(' args+=GraphicalPrimitiveArgs (',' args+=GraphicalPrimitiveArgs)* ')'
		public Group getGroup() { return cGroup; }
		
		//name='Polygon'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'Polygon'
		public Keyword getNamePolygonKeyword_0_0() { return cNamePolygonKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//args+=GraphicalPrimitiveArgs
		public Assignment getArgsAssignment_2() { return cArgsAssignment_2; }
		
		//GraphicalPrimitiveArgs
		public RuleCall getArgsGraphicalPrimitiveArgsParserRuleCall_2_0() { return cArgsGraphicalPrimitiveArgsParserRuleCall_2_0; }
		
		//(',' args+=GraphicalPrimitiveArgs)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//args+=GraphicalPrimitiveArgs
		public Assignment getArgsAssignment_3_1() { return cArgsAssignment_3_1; }
		
		//GraphicalPrimitiveArgs
		public RuleCall getArgsGraphicalPrimitiveArgsParserRuleCall_3_1_0() { return cArgsGraphicalPrimitiveArgsParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class RectangleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.Rectangle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameRectangleKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgsGraphicalPrimitiveArgsParserRuleCall_2_0 = (RuleCall)cArgsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cArgsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cArgsGraphicalPrimitiveArgsParserRuleCall_3_1_0 = (RuleCall)cArgsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Rectangle:
		//	name='Rectangle' '(' args+=GraphicalPrimitiveArgs (',' args+=GraphicalPrimitiveArgs)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//name='Rectangle' '(' args+=GraphicalPrimitiveArgs (',' args+=GraphicalPrimitiveArgs)* ')'
		public Group getGroup() { return cGroup; }
		
		//name='Rectangle'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'Rectangle'
		public Keyword getNameRectangleKeyword_0_0() { return cNameRectangleKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//args+=GraphicalPrimitiveArgs
		public Assignment getArgsAssignment_2() { return cArgsAssignment_2; }
		
		//GraphicalPrimitiveArgs
		public RuleCall getArgsGraphicalPrimitiveArgsParserRuleCall_2_0() { return cArgsGraphicalPrimitiveArgsParserRuleCall_2_0; }
		
		//(',' args+=GraphicalPrimitiveArgs)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//args+=GraphicalPrimitiveArgs
		public Assignment getArgsAssignment_3_1() { return cArgsAssignment_3_1; }
		
		//GraphicalPrimitiveArgs
		public RuleCall getArgsGraphicalPrimitiveArgsParserRuleCall_3_1_0() { return cArgsGraphicalPrimitiveArgsParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class EllipseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.Ellipse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameEllipseKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgsGraphicalPrimitiveArgsParserRuleCall_2_0 = (RuleCall)cArgsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cArgsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cArgsGraphicalPrimitiveArgsParserRuleCall_3_1_0 = (RuleCall)cArgsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Ellipse:
		//	name='Ellipse' '(' args+=GraphicalPrimitiveArgs (',' args+=GraphicalPrimitiveArgs)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//name='Ellipse' '(' args+=GraphicalPrimitiveArgs (',' args+=GraphicalPrimitiveArgs)* ')'
		public Group getGroup() { return cGroup; }
		
		//name='Ellipse'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'Ellipse'
		public Keyword getNameEllipseKeyword_0_0() { return cNameEllipseKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//args+=GraphicalPrimitiveArgs
		public Assignment getArgsAssignment_2() { return cArgsAssignment_2; }
		
		//GraphicalPrimitiveArgs
		public RuleCall getArgsGraphicalPrimitiveArgsParserRuleCall_2_0() { return cArgsGraphicalPrimitiveArgsParserRuleCall_2_0; }
		
		//(',' args+=GraphicalPrimitiveArgs)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//args+=GraphicalPrimitiveArgs
		public Assignment getArgsAssignment_3_1() { return cArgsAssignment_3_1; }
		
		//GraphicalPrimitiveArgs
		public RuleCall getArgsGraphicalPrimitiveArgsParserRuleCall_3_1_0() { return cArgsGraphicalPrimitiveArgsParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class TextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.Text");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameTextKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgsGraphicalPrimitiveArgsParserRuleCall_2_0 = (RuleCall)cArgsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cArgsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cArgsGraphicalPrimitiveArgsParserRuleCall_3_1_0 = (RuleCall)cArgsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Text:
		//	name='Text' '(' args+=GraphicalPrimitiveArgs (',' args+=GraphicalPrimitiveArgs)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//name='Text' '(' args+=GraphicalPrimitiveArgs (',' args+=GraphicalPrimitiveArgs)* ')'
		public Group getGroup() { return cGroup; }
		
		//name='Text'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'Text'
		public Keyword getNameTextKeyword_0_0() { return cNameTextKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//args+=GraphicalPrimitiveArgs
		public Assignment getArgsAssignment_2() { return cArgsAssignment_2; }
		
		//GraphicalPrimitiveArgs
		public RuleCall getArgsGraphicalPrimitiveArgsParserRuleCall_2_0() { return cArgsGraphicalPrimitiveArgsParserRuleCall_2_0; }
		
		//(',' args+=GraphicalPrimitiveArgs)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//args+=GraphicalPrimitiveArgs
		public Assignment getArgsAssignment_3_1() { return cArgsAssignment_3_1; }
		
		//GraphicalPrimitiveArgs
		public RuleCall getArgsGraphicalPrimitiveArgsParserRuleCall_3_1_0() { return cArgsGraphicalPrimitiveArgsParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class BitmapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.Bitmap");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameBitmapKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgsGraphicalPrimitiveArgsParserRuleCall_2_0 = (RuleCall)cArgsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cArgsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cArgsGraphicalPrimitiveArgsParserRuleCall_3_1_0 = (RuleCall)cArgsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Bitmap:
		//	name='Bitmap' '(' args+=GraphicalPrimitiveArgs (',' args+=GraphicalPrimitiveArgs)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//name='Bitmap' '(' args+=GraphicalPrimitiveArgs (',' args+=GraphicalPrimitiveArgs)* ')'
		public Group getGroup() { return cGroup; }
		
		//name='Bitmap'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'Bitmap'
		public Keyword getNameBitmapKeyword_0_0() { return cNameBitmapKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//args+=GraphicalPrimitiveArgs
		public Assignment getArgsAssignment_2() { return cArgsAssignment_2; }
		
		//GraphicalPrimitiveArgs
		public RuleCall getArgsGraphicalPrimitiveArgsParserRuleCall_2_0() { return cArgsGraphicalPrimitiveArgsParserRuleCall_2_0; }
		
		//(',' args+=GraphicalPrimitiveArgs)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//args+=GraphicalPrimitiveArgs
		public Assignment getArgsAssignment_3_1() { return cArgsAssignment_3_1; }
		
		//GraphicalPrimitiveArgs
		public RuleCall getArgsGraphicalPrimitiveArgsParserRuleCall_3_1_0() { return cArgsGraphicalPrimitiveArgsParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class GraphicalPrimitiveArgsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.GraphicalPrimitiveArgs");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVisibleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOriginParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExtentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cColorParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSmoothParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cThicknessParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cRadiusParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Keyword cPointsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cEqualsSignKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Assignment cPointsAssignment_7_3 = (Assignment)cGroup_7.eContents().get(3);
		private final RuleCall cPointsPointParserRuleCall_7_3_0 = (RuleCall)cPointsAssignment_7_3.eContents().get(0);
		private final Group cGroup_7_4 = (Group)cGroup_7.eContents().get(4);
		private final Keyword cCommaKeyword_7_4_0 = (Keyword)cGroup_7_4.eContents().get(0);
		private final Assignment cPointsAssignment_7_4_1 = (Assignment)cGroup_7_4.eContents().get(1);
		private final RuleCall cPointsPointParserRuleCall_7_4_1_0 = (RuleCall)cPointsAssignment_7_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_5 = (Keyword)cGroup_7.eContents().get(5);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Keyword cTextStringKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cEqualsSignKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cStrAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cStrSTRINGTerminalRuleCall_8_2_0 = (RuleCall)cStrAssignment_8_2.eContents().get(0);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Keyword cFileNameKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Keyword cEqualsSignKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Assignment cFileNameAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cFileNameSTRINGTerminalRuleCall_9_2_0 = (RuleCall)cFileNameAssignment_9_2.eContents().get(0);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Keyword cImageSourceKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Keyword cEqualsSignKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Assignment cImageSourceAssignment_10_2 = (Assignment)cGroup_10.eContents().get(2);
		private final RuleCall cImageSourceSTRINGTerminalRuleCall_10_2_0 = (RuleCall)cImageSourceAssignment_10_2.eContents().get(0);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Keyword cFillPatternKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Keyword cEqualsSignKeyword_11_1 = (Keyword)cGroup_11.eContents().get(1);
		private final Assignment cFillPatternAssignment_11_2 = (Assignment)cGroup_11.eContents().get(2);
		private final RuleCall cFillPatternFillPatternEnumRuleCall_11_2_0 = (RuleCall)cFillPatternAssignment_11_2.eContents().get(0);
		
		//GraphicalPrimitiveArgs:
		//	Visible | Origin | Extent | Color | Smooth | Thickness | Radius
		//	| 'points' '=' '{' points+=Point (',' points+=Point)* '}'
		//	| 'textString' '=' str=STRING
		//	| 'fileName' '=' fileName=STRING
		//	| 'imageSource' '=' imageSource=STRING
		//	| 'fillPattern' '=' fillPattern=FillPattern;
		@Override public ParserRule getRule() { return rule; }
		
		//Visible | Origin | Extent | Color | Smooth | Thickness | Radius | 'points' '=' '{' points+=Point (',' points+=Point)*
		//'}' | 'textString' '=' str=STRING | 'fileName' '=' fileName=STRING | 'imageSource' '=' imageSource=STRING |
		//'fillPattern' '=' fillPattern=FillPattern
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Visible
		public RuleCall getVisibleParserRuleCall_0() { return cVisibleParserRuleCall_0; }
		
		//Origin
		public RuleCall getOriginParserRuleCall_1() { return cOriginParserRuleCall_1; }
		
		//Extent
		public RuleCall getExtentParserRuleCall_2() { return cExtentParserRuleCall_2; }
		
		//Color
		public RuleCall getColorParserRuleCall_3() { return cColorParserRuleCall_3; }
		
		//Smooth
		public RuleCall getSmoothParserRuleCall_4() { return cSmoothParserRuleCall_4; }
		
		//Thickness
		public RuleCall getThicknessParserRuleCall_5() { return cThicknessParserRuleCall_5; }
		
		//Radius
		public RuleCall getRadiusParserRuleCall_6() { return cRadiusParserRuleCall_6; }
		
		//'points' '=' '{' points+=Point (',' points+=Point)* '}'
		public Group getGroup_7() { return cGroup_7; }
		
		//'points'
		public Keyword getPointsKeyword_7_0() { return cPointsKeyword_7_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_7_1() { return cEqualsSignKeyword_7_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_2() { return cLeftCurlyBracketKeyword_7_2; }
		
		//points+=Point
		public Assignment getPointsAssignment_7_3() { return cPointsAssignment_7_3; }
		
		//Point
		public RuleCall getPointsPointParserRuleCall_7_3_0() { return cPointsPointParserRuleCall_7_3_0; }
		
		//(',' points+=Point)*
		public Group getGroup_7_4() { return cGroup_7_4; }
		
		//','
		public Keyword getCommaKeyword_7_4_0() { return cCommaKeyword_7_4_0; }
		
		//points+=Point
		public Assignment getPointsAssignment_7_4_1() { return cPointsAssignment_7_4_1; }
		
		//Point
		public RuleCall getPointsPointParserRuleCall_7_4_1_0() { return cPointsPointParserRuleCall_7_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_5() { return cRightCurlyBracketKeyword_7_5; }
		
		//'textString' '=' str=STRING
		public Group getGroup_8() { return cGroup_8; }
		
		//'textString'
		public Keyword getTextStringKeyword_8_0() { return cTextStringKeyword_8_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_8_1() { return cEqualsSignKeyword_8_1; }
		
		//str=STRING
		public Assignment getStrAssignment_8_2() { return cStrAssignment_8_2; }
		
		//STRING
		public RuleCall getStrSTRINGTerminalRuleCall_8_2_0() { return cStrSTRINGTerminalRuleCall_8_2_0; }
		
		//'fileName' '=' fileName=STRING
		public Group getGroup_9() { return cGroup_9; }
		
		//'fileName'
		public Keyword getFileNameKeyword_9_0() { return cFileNameKeyword_9_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_9_1() { return cEqualsSignKeyword_9_1; }
		
		//fileName=STRING
		public Assignment getFileNameAssignment_9_2() { return cFileNameAssignment_9_2; }
		
		//STRING
		public RuleCall getFileNameSTRINGTerminalRuleCall_9_2_0() { return cFileNameSTRINGTerminalRuleCall_9_2_0; }
		
		//'imageSource' '=' imageSource=STRING
		public Group getGroup_10() { return cGroup_10; }
		
		//'imageSource'
		public Keyword getImageSourceKeyword_10_0() { return cImageSourceKeyword_10_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_10_1() { return cEqualsSignKeyword_10_1; }
		
		//imageSource=STRING
		public Assignment getImageSourceAssignment_10_2() { return cImageSourceAssignment_10_2; }
		
		//STRING
		public RuleCall getImageSourceSTRINGTerminalRuleCall_10_2_0() { return cImageSourceSTRINGTerminalRuleCall_10_2_0; }
		
		//'fillPattern' '=' fillPattern=FillPattern
		public Group getGroup_11() { return cGroup_11; }
		
		//'fillPattern'
		public Keyword getFillPatternKeyword_11_0() { return cFillPatternKeyword_11_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_11_1() { return cEqualsSignKeyword_11_1; }
		
		//fillPattern=FillPattern
		public Assignment getFillPatternAssignment_11_2() { return cFillPatternAssignment_11_2; }
		
		//FillPattern
		public RuleCall getFillPatternFillPatternEnumRuleCall_11_2_0() { return cFillPatternFillPatternEnumRuleCall_11_2_0; }
	}
	public class DialogElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.Dialog");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameDialogKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgsDialogArgParserRuleCall_2_0 = (RuleCall)cArgsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cArgsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cArgsDialogArgParserRuleCall_3_1_0 = (RuleCall)cArgsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Dialog:
		//	name='Dialog' '(' args+=DialogArg (',' args+=DialogArg)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//name='Dialog' '(' args+=DialogArg (',' args+=DialogArg)* ')'
		public Group getGroup() { return cGroup; }
		
		//name='Dialog'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'Dialog'
		public Keyword getNameDialogKeyword_0_0() { return cNameDialogKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//args+=DialogArg
		public Assignment getArgsAssignment_2() { return cArgsAssignment_2; }
		
		//DialogArg
		public RuleCall getArgsDialogArgParserRuleCall_2_0() { return cArgsDialogArgParserRuleCall_2_0; }
		
		//(',' args+=DialogArg)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//args+=DialogArg
		public Assignment getArgsAssignment_3_1() { return cArgsAssignment_3_1; }
		
		//DialogArg
		public RuleCall getArgsDialogArgParserRuleCall_3_1_0() { return cArgsDialogArgParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class DialogArgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.DialogArg");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEnableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGroupParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTabParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//DialogArg:
		//	Enable | Group | Tab;
		@Override public ParserRule getRule() { return rule; }
		
		//Enable | Group | Tab
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Enable
		public RuleCall getEnableParserRuleCall_0() { return cEnableParserRuleCall_0; }
		
		//Group
		public RuleCall getGroupParserRuleCall_1() { return cGroupParserRuleCall_1; }
		
		//Tab
		public RuleCall getTabParserRuleCall_2() { return cTabParserRuleCall_2; }
	}
	public class EnableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.Enable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cIDENTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cEqualsSignEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueComponentReferenceParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cOrKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final RuleCall cIDENTTerminalRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cValueAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cValueComponentReferenceParserRuleCall_5_3_0 = (RuleCall)cValueAssignment_5_3.eContents().get(0);
		
		//Enable:
		//	'enable' '=' IDENT '==' value+=ComponentReference ('or' IDENT '==' value+=ComponentReference)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'enable' '=' IDENT '==' value+=ComponentReference ('or' IDENT '==' value+=ComponentReference)*
		public Group getGroup() { return cGroup; }
		
		//'enable'
		public Keyword getEnableKeyword_0() { return cEnableKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//IDENT
		public RuleCall getIDENTTerminalRuleCall_2() { return cIDENTTerminalRuleCall_2; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_3() { return cEqualsSignEqualsSignKeyword_3; }
		
		//value+=ComponentReference
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }
		
		//ComponentReference
		public RuleCall getValueComponentReferenceParserRuleCall_4_0() { return cValueComponentReferenceParserRuleCall_4_0; }
		
		//('or' IDENT '==' value+=ComponentReference)*
		public Group getGroup_5() { return cGroup_5; }
		
		//'or'
		public Keyword getOrKeyword_5_0() { return cOrKeyword_5_0; }
		
		//IDENT
		public RuleCall getIDENTTerminalRuleCall_5_1() { return cIDENTTerminalRuleCall_5_1; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_5_2() { return cEqualsSignEqualsSignKeyword_5_2; }
		
		//value+=ComponentReference
		public Assignment getValueAssignment_5_3() { return cValueAssignment_5_3; }
		
		//ComponentReference
		public RuleCall getValueComponentReferenceParserRuleCall_5_3_0() { return cValueComponentReferenceParserRuleCall_5_3_0; }
	}
	public class GroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.Group");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGroupKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Group:
		//	'group' '=' value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'group' '=' value=STRING
		public Group getGroup() { return cGroup; }
		
		//'group'
		public Keyword getGroupKeyword_0() { return cGroupKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}
	public class TabElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.Tab");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTabKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Tab:
		//	'tab' '=' value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'tab' '=' value=STRING
		public Group getGroup() { return cGroup; }
		
		//'tab'
		public Keyword getTabKeyword_0() { return cTabKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}
	public class AnnotationDocumentationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.AnnotationDocumentation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDocumentationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cInfoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueSTRINGTerminalRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cRevisionsKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Keyword cEqualsSignKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cRevAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cRevSTRINGTerminalRuleCall_5_3_0 = (RuleCall)cRevAssignment_5_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//AnnotationDocumentation:
		//	'Documentation' '(' 'info' '=' value=STRING ("," "revisions" "=" rev=STRING)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'Documentation' '(' 'info' '=' value=STRING ("," "revisions" "=" rev=STRING)? ')'
		public Group getGroup() { return cGroup; }
		
		//'Documentation'
		public Keyword getDocumentationKeyword_0() { return cDocumentationKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'info'
		public Keyword getInfoKeyword_2() { return cInfoKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//value=STRING
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_4_0() { return cValueSTRINGTerminalRuleCall_4_0; }
		
		//("," "revisions" "=" rev=STRING)?
		public Group getGroup_5() { return cGroup_5; }
		
		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//"revisions"
		public Keyword getRevisionsKeyword_5_1() { return cRevisionsKeyword_5_1; }
		
		//"="
		public Keyword getEqualsSignKeyword_5_2() { return cEqualsSignKeyword_5_2; }
		
		//rev=STRING
		public Assignment getRevAssignment_5_3() { return cRevAssignment_5_3; }
		
		//STRING
		public RuleCall getRevSTRINGTerminalRuleCall_5_3_0() { return cRevSTRINGTerminalRuleCall_5_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class AnnotationExperimentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.AnnotationExperiment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAnnotationExperimentAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cExperimentKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cOptionsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cOptionsExperimentOptionParserRuleCall_3_0_0 = (RuleCall)cOptionsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cOptionsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cOptionsExperimentOptionParserRuleCall_3_1_1_0 = (RuleCall)cOptionsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AnnotationExperiment:
		//	{AnnotationExperiment} 'experiment' '(' (options+=ExperimentOption (',' options+=ExperimentOption)*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{AnnotationExperiment} 'experiment' '(' (options+=ExperimentOption (',' options+=ExperimentOption)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//{AnnotationExperiment}
		public Action getAnnotationExperimentAction_0() { return cAnnotationExperimentAction_0; }
		
		//'experiment'
		public Keyword getExperimentKeyword_1() { return cExperimentKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(options+=ExperimentOption (',' options+=ExperimentOption)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//options+=ExperimentOption
		public Assignment getOptionsAssignment_3_0() { return cOptionsAssignment_3_0; }
		
		//ExperimentOption
		public RuleCall getOptionsExperimentOptionParserRuleCall_3_0_0() { return cOptionsExperimentOptionParserRuleCall_3_0_0; }
		
		//(',' options+=ExperimentOption)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//options+=ExperimentOption
		public Assignment getOptionsAssignment_3_1_1() { return cOptionsAssignment_3_1_1; }
		
		//ExperimentOption
		public RuleCall getOptionsExperimentOptionParserRuleCall_3_1_1_0() { return cOptionsExperimentOptionParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ExperimentOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.ExperimentOption");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cStartTimeKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Alternatives cAlternatives_0_2 = (Alternatives)cGroup_0.eContents().get(2);
		private final Keyword cPlusSignKeyword_0_2_0 = (Keyword)cAlternatives_0_2.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_2_1 = (Keyword)cAlternatives_0_2.eContents().get(1);
		private final Assignment cStartAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cStartUNSIGNED_NUMBERTerminalRuleCall_0_3_0 = (RuleCall)cStartAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cStopTimeKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Alternatives cAlternatives_1_2 = (Alternatives)cGroup_1.eContents().get(2);
		private final Keyword cPlusSignKeyword_1_2_0 = (Keyword)cAlternatives_1_2.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_2_1 = (Keyword)cAlternatives_1_2.eContents().get(1);
		private final Assignment cStopAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cStopUNSIGNED_NUMBERTerminalRuleCall_1_3_0 = (RuleCall)cStopAssignment_1_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cIntervalKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cStepAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cStepUNSIGNED_NUMBERTerminalRuleCall_2_2_0 = (RuleCall)cStepAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cToleranceKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cTolAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cTolUNSIGNED_NUMBERTerminalRuleCall_3_2_0 = (RuleCall)cTolAssignment_3_2.eContents().get(0);
		
		////(custom+=ParameterCustom ','?)*
		//ExperimentOption: //	StartTime | StopTime | Interval | Tolerance
		////;
		////StartTime:
		//	'StartTime' '=' ('+' | '-') start=UNSIGNED_NUMBER //;
		//	//StopTime:
		//	| 'StopTime' '=' ('+' | '-') stop=UNSIGNED_NUMBER //;
		//	//Interval:
		//	| 'Interval' '=' step=UNSIGNED_NUMBER //;
		//	//Tolerance:
		//	| 'Tolerance' '=' tol=UNSIGNED_NUMBER;
		@Override public ParserRule getRule() { return rule; }
		
		////	StartTime | StopTime | Interval | Tolerance
		////;
		////StartTime:
		//'StartTime' '=' ('+' | '-') start=UNSIGNED_NUMBER //;
		////StopTime:
		//| 'StopTime' '=' ('+' | '-') stop=UNSIGNED_NUMBER //;
		////Interval:
		//| 'Interval' '=' step=UNSIGNED_NUMBER //;
		////Tolerance:
		//| 'Tolerance' '=' tol=UNSIGNED_NUMBER
		public Alternatives getAlternatives() { return cAlternatives; }
		
		////	StartTime | StopTime | Interval | Tolerance
		////;
		////StartTime:
		//'StartTime' '=' ('+' | '-') start=UNSIGNED_NUMBER
		public Group getGroup_0() { return cGroup_0; }
		
		////	StartTime | StopTime | Interval | Tolerance
		////;
		////StartTime:
		//'StartTime'
		public Keyword getStartTimeKeyword_0_0() { return cStartTimeKeyword_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }
		
		//('+' | '-')
		public Alternatives getAlternatives_0_2() { return cAlternatives_0_2; }
		
		//'+'
		public Keyword getPlusSignKeyword_0_2_0() { return cPlusSignKeyword_0_2_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0_2_1() { return cHyphenMinusKeyword_0_2_1; }
		
		//start=UNSIGNED_NUMBER
		public Assignment getStartAssignment_0_3() { return cStartAssignment_0_3; }
		
		//UNSIGNED_NUMBER
		public RuleCall getStartUNSIGNED_NUMBERTerminalRuleCall_0_3_0() { return cStartUNSIGNED_NUMBERTerminalRuleCall_0_3_0; }
		
		//'StopTime' '=' ('+' | '-') stop=UNSIGNED_NUMBER
		public Group getGroup_1() { return cGroup_1; }
		
		//'StopTime'
		public Keyword getStopTimeKeyword_1_0() { return cStopTimeKeyword_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }
		
		//('+' | '-')
		public Alternatives getAlternatives_1_2() { return cAlternatives_1_2; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_2_0() { return cPlusSignKeyword_1_2_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_2_1() { return cHyphenMinusKeyword_1_2_1; }
		
		//stop=UNSIGNED_NUMBER
		public Assignment getStopAssignment_1_3() { return cStopAssignment_1_3; }
		
		//UNSIGNED_NUMBER
		public RuleCall getStopUNSIGNED_NUMBERTerminalRuleCall_1_3_0() { return cStopUNSIGNED_NUMBERTerminalRuleCall_1_3_0; }
		
		//'Interval' '=' step=UNSIGNED_NUMBER
		public Group getGroup_2() { return cGroup_2; }
		
		//'Interval'
		public Keyword getIntervalKeyword_2_0() { return cIntervalKeyword_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_1() { return cEqualsSignKeyword_2_1; }
		
		//step=UNSIGNED_NUMBER
		public Assignment getStepAssignment_2_2() { return cStepAssignment_2_2; }
		
		//UNSIGNED_NUMBER
		public RuleCall getStepUNSIGNED_NUMBERTerminalRuleCall_2_2_0() { return cStepUNSIGNED_NUMBERTerminalRuleCall_2_2_0; }
		
		//'Tolerance' '=' tol=UNSIGNED_NUMBER
		public Group getGroup_3() { return cGroup_3; }
		
		//'Tolerance'
		public Keyword getToleranceKeyword_3_0() { return cToleranceKeyword_3_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_1() { return cEqualsSignKeyword_3_1; }
		
		//tol=UNSIGNED_NUMBER
		public Assignment getTolAssignment_3_2() { return cTolAssignment_3_2; }
		
		//UNSIGNED_NUMBER
		public RuleCall getTolUNSIGNED_NUMBERTerminalRuleCall_3_2_0() { return cTolUNSIGNED_NUMBERTerminalRuleCall_3_2_0; }
	}
	
	public class AssertionLevelElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.AssertionLevel");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cErrorEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cErrorAssertionLevelErrorKeyword_0_0 = (Keyword)cErrorEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cWarningEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cWarningAssertionLevelWarningKeyword_1_0 = (Keyword)cWarningEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum AssertionLevel:
		//	error='AssertionLevel.error' | warning='AssertionLevel.warning';
		public EnumRule getRule() { return rule; }
		
		//error='AssertionLevel.error' | warning='AssertionLevel.warning'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//error='AssertionLevel.error'
		public EnumLiteralDeclaration getErrorEnumLiteralDeclaration_0() { return cErrorEnumLiteralDeclaration_0; }
		
		//'AssertionLevel.error'
		public Keyword getErrorAssertionLevelErrorKeyword_0_0() { return cErrorAssertionLevelErrorKeyword_0_0; }
		
		//warning='AssertionLevel.warning'
		public EnumLiteralDeclaration getWarningEnumLiteralDeclaration_1() { return cWarningEnumLiteralDeclaration_1; }
		
		//'AssertionLevel.warning'
		public Keyword getWarningAssertionLevelWarningKeyword_1_0() { return cWarningAssertionLevelWarningKeyword_1_0; }
	}
	public class LinePatternElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.LinePattern");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNoneEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNoneLinePatternNoneKeyword_0_0 = (Keyword)cNoneEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSolidEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSolidLinePatternSolidKeyword_1_0 = (Keyword)cSolidEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDashEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDashLinePatternDashKeyword_2_0 = (Keyword)cDashEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDotEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDotLinePatternDotKeyword_3_0 = (Keyword)cDotEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDashdotEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDashdotLinePatternDashDotKeyword_4_0 = (Keyword)cDashdotEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cDashdotdotEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cDashdotdotLinePatternDashDotDotKeyword_5_0 = (Keyword)cDashdotdotEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum LinePattern:
		//	none='LinePattern.None'
		//	| solid='LinePattern.Solid'
		//	| dash='LinePattern.Dash'
		//	| dot='LinePattern.Dot'
		//	| dashdot='LinePattern.DashDot'
		//	| dashdotdot='LinePattern.DashDotDot';
		public EnumRule getRule() { return rule; }
		
		//none='LinePattern.None' | solid='LinePattern.Solid' | dash='LinePattern.Dash' | dot='LinePattern.Dot' |
		//dashdot='LinePattern.DashDot' | dashdotdot='LinePattern.DashDotDot'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//none='LinePattern.None'
		public EnumLiteralDeclaration getNoneEnumLiteralDeclaration_0() { return cNoneEnumLiteralDeclaration_0; }
		
		//'LinePattern.None'
		public Keyword getNoneLinePatternNoneKeyword_0_0() { return cNoneLinePatternNoneKeyword_0_0; }
		
		//solid='LinePattern.Solid'
		public EnumLiteralDeclaration getSolidEnumLiteralDeclaration_1() { return cSolidEnumLiteralDeclaration_1; }
		
		//'LinePattern.Solid'
		public Keyword getSolidLinePatternSolidKeyword_1_0() { return cSolidLinePatternSolidKeyword_1_0; }
		
		//dash='LinePattern.Dash'
		public EnumLiteralDeclaration getDashEnumLiteralDeclaration_2() { return cDashEnumLiteralDeclaration_2; }
		
		//'LinePattern.Dash'
		public Keyword getDashLinePatternDashKeyword_2_0() { return cDashLinePatternDashKeyword_2_0; }
		
		//dot='LinePattern.Dot'
		public EnumLiteralDeclaration getDotEnumLiteralDeclaration_3() { return cDotEnumLiteralDeclaration_3; }
		
		//'LinePattern.Dot'
		public Keyword getDotLinePatternDotKeyword_3_0() { return cDotLinePatternDotKeyword_3_0; }
		
		//dashdot='LinePattern.DashDot'
		public EnumLiteralDeclaration getDashdotEnumLiteralDeclaration_4() { return cDashdotEnumLiteralDeclaration_4; }
		
		//'LinePattern.DashDot'
		public Keyword getDashdotLinePatternDashDotKeyword_4_0() { return cDashdotLinePatternDashDotKeyword_4_0; }
		
		//dashdotdot='LinePattern.DashDotDot'
		public EnumLiteralDeclaration getDashdotdotEnumLiteralDeclaration_5() { return cDashdotdotEnumLiteralDeclaration_5; }
		
		//'LinePattern.DashDotDot'
		public Keyword getDashdotdotLinePatternDashDotDotKeyword_5_0() { return cDashdotdotLinePatternDashDotDotKeyword_5_0; }
	}
	public class FillPatternElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.FillPattern");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNoneEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNoneFillPatternNoneKeyword_0_0 = (Keyword)cNoneEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSolidEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSolidFillPatternSolidKeyword_1_0 = (Keyword)cSolidEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cHorizontalEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cHorizontalFillPatternHorizontalKeyword_2_0 = (Keyword)cHorizontalEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cVerticalEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cVerticalFillPatternVerticalKeyword_3_0 = (Keyword)cVerticalEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum FillPattern: //TODO add missing values
		//	none='FillPattern.None' | solid='FillPattern.Solid' | horizontal='FillPattern.Horizontal' |
		//	vertical='FillPattern.Vertical';
		public EnumRule getRule() { return rule; }
		
		////TODO add missing values
		//none='FillPattern.None' | solid='FillPattern.Solid' | horizontal='FillPattern.Horizontal' |
		//vertical='FillPattern.Vertical'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		////TODO add missing values
		//none='FillPattern.None'
		public EnumLiteralDeclaration getNoneEnumLiteralDeclaration_0() { return cNoneEnumLiteralDeclaration_0; }
		
		//'FillPattern.None'
		public Keyword getNoneFillPatternNoneKeyword_0_0() { return cNoneFillPatternNoneKeyword_0_0; }
		
		//solid='FillPattern.Solid'
		public EnumLiteralDeclaration getSolidEnumLiteralDeclaration_1() { return cSolidEnumLiteralDeclaration_1; }
		
		//'FillPattern.Solid'
		public Keyword getSolidFillPatternSolidKeyword_1_0() { return cSolidFillPatternSolidKeyword_1_0; }
		
		//horizontal='FillPattern.Horizontal'
		public EnumLiteralDeclaration getHorizontalEnumLiteralDeclaration_2() { return cHorizontalEnumLiteralDeclaration_2; }
		
		//'FillPattern.Horizontal'
		public Keyword getHorizontalFillPatternHorizontalKeyword_2_0() { return cHorizontalFillPatternHorizontalKeyword_2_0; }
		
		//vertical='FillPattern.Vertical'
		public EnumLiteralDeclaration getVerticalEnumLiteralDeclaration_3() { return cVerticalEnumLiteralDeclaration_3; }
		
		//'FillPattern.Vertical'
		public Keyword getVerticalFillPatternVerticalKeyword_3_0() { return cVerticalFillPatternVerticalKeyword_3_0; }
	}
	public class BorderPatternElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.BorderPattern");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNoneEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNoneBorderPatternNoneKeyword_0_0 = (Keyword)cNoneEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRaisedEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRaisedBorderPatternRaisedKeyword_1_0 = (Keyword)cRaisedEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSunkenEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSunkenBorderPatternSunkenKeyword_2_0 = (Keyword)cSunkenEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cEngravedEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cEngravedBorderPatternEngravedKeyword_3_0 = (Keyword)cEngravedEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum BorderPattern:
		//	none='BorderPattern.None'
		//	| raised='BorderPattern.Raised'
		//	| sunken='BorderPattern.Sunken'
		//	| engraved='BorderPattern.Engraved';
		public EnumRule getRule() { return rule; }
		
		//none='BorderPattern.None' | raised='BorderPattern.Raised' | sunken='BorderPattern.Sunken' |
		//engraved='BorderPattern.Engraved'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//none='BorderPattern.None'
		public EnumLiteralDeclaration getNoneEnumLiteralDeclaration_0() { return cNoneEnumLiteralDeclaration_0; }
		
		//'BorderPattern.None'
		public Keyword getNoneBorderPatternNoneKeyword_0_0() { return cNoneBorderPatternNoneKeyword_0_0; }
		
		//raised='BorderPattern.Raised'
		public EnumLiteralDeclaration getRaisedEnumLiteralDeclaration_1() { return cRaisedEnumLiteralDeclaration_1; }
		
		//'BorderPattern.Raised'
		public Keyword getRaisedBorderPatternRaisedKeyword_1_0() { return cRaisedBorderPatternRaisedKeyword_1_0; }
		
		//sunken='BorderPattern.Sunken'
		public EnumLiteralDeclaration getSunkenEnumLiteralDeclaration_2() { return cSunkenEnumLiteralDeclaration_2; }
		
		//'BorderPattern.Sunken'
		public Keyword getSunkenBorderPatternSunkenKeyword_2_0() { return cSunkenBorderPatternSunkenKeyword_2_0; }
		
		//engraved='BorderPattern.Engraved'
		public EnumLiteralDeclaration getEngravedEnumLiteralDeclaration_3() { return cEngravedEnumLiteralDeclaration_3; }
		
		//'BorderPattern.Engraved'
		public Keyword getEngravedBorderPatternEngravedKeyword_3_0() { return cEngravedBorderPatternEngravedKeyword_3_0; }
	}
	public class SmoothEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.SmoothEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNoneEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNoneSmoothNoneKeyword_0_0 = (Keyword)cNoneEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBezierEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBezierSmoothBezierKeyword_1_0 = (Keyword)cBezierEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum SmoothEnum:
		//	none='Smooth.None'
		//	| bezier='Smooth.Bezier';
		public EnumRule getRule() { return rule; }
		
		//none='Smooth.None' | bezier='Smooth.Bezier'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//none='Smooth.None'
		public EnumLiteralDeclaration getNoneEnumLiteralDeclaration_0() { return cNoneEnumLiteralDeclaration_0; }
		
		//'Smooth.None'
		public Keyword getNoneSmoothNoneKeyword_0_0() { return cNoneSmoothNoneKeyword_0_0; }
		
		//bezier='Smooth.Bezier'
		public EnumLiteralDeclaration getBezierEnumLiteralDeclaration_1() { return cBezierEnumLiteralDeclaration_1; }
		
		//'Smooth.Bezier'
		public Keyword getBezierSmoothBezierKeyword_1_0() { return cBezierSmoothBezierKeyword_1_0; }
	}
	
	private final ProgramElements pProgram;
	private final ClassDefinitionElements pClassDefinition;
	private final ClassPrefixesElements pClassPrefixes;
	private final ClassSpecifierElements pClassSpecifier;
	private final LongClassSpecifierElements pLongClassSpecifier;
	private final ShortClassSpecifierElements pShortClassSpecifier;
	private final DerClassSpecifierElements pDerClassSpecifier;
	private final BasePrefixElements pBasePrefix;
	private final EnumListElements pEnumList;
	private final EnumerationLiteralElements pEnumerationLiteral;
	private final CompositionElements pComposition;
	private final LanguageSpecificationElements pLanguageSpecification;
	private final ElementListElements pElementList;
	private final ElementElements pElement;
	private final ImportClauseElements pImportClause;
	private final ImportListElements pImportList;
	private final ExtendClauseElements pExtendClause;
	private final ConstrainingClauseElements pConstrainingClause;
	private final ModificationElements pModification;
	private final ClassModificationElements pClassModification;
	private final ArgumentListElements pArgumentList;
	private final ArgumentElements pArgument;
	private final ElementModificationOrReplaceableElements pElementModificationOrReplaceable;
	private final ElementModificationElements pElementModification;
	private final ElementRedeclarationElements pElementRedeclaration;
	private final ElementReplaceableElements pElementReplaceable;
	private final ComponentClause1Elements pComponentClause1;
	private final ComponentDeclaration1Elements pComponentDeclaration1;
	private final ShortClassDefinitionElements pShortClassDefinition;
	private final ComponentClauseElements pComponentClause;
	private final TypePrefixElements pTypePrefix;
	private final TypeSpecifierElements pTypeSpecifier;
	private final ComponentListElements pComponentList;
	private final ComponentDeclarationElements pComponentDeclaration;
	private final ConditionAttributeElements pConditionAttribute;
	private final DeclarationElements pDeclaration;
	private final EquationSectionElements pEquationSection;
	private final AlgorithmSectionElements pAlgorithmSection;
	private final EquationElements pEquation;
	private final StatementElements pStatement;
	private final EquationIfElements pEquationIf;
	private final StatementIfElements pStatementIf;
	private final EquationForElements pEquationFor;
	private final StatementForElements pStatementFor;
	private final ForIndicesElements pForIndices;
	private final ForIndexElements pForIndex;
	private final StatementWhileElements pStatementWhile;
	private final EquationWhenElements pEquationWhen;
	private final StatementWhenElements pStatementWhen;
	private final ConnectClauseElements pConnectClause;
	private final ExpressionElements pExpression;
	private final SimpleExpressionElements pSimpleExpression;
	private final LogicalExpressionElements pLogicalExpression;
	private final LogicalTermElements pLogicalTerm;
	private final LogicalFactorElements pLogicalFactor;
	private final RelationElements pRelation;
	private final RelOpElements pRelOp;
	private final ArithmeticExpressionElements pArithmeticExpression;
	private final ArithmeticExpression2Elements pArithmeticExpression2;
	private final ArithmeticExpressionUnaryElements pArithmeticExpressionUnary;
	private final AddOpElements pAddOp;
	private final TermElements pTerm;
	private final MulOpElements pMulOp;
	private final FactorElements pFactor;
	private final PrimaryElements pPrimary;
	private final NameElements pName;
	private final ComponentReferenceElements pComponentReference;
	private final FunctionCallArgsElements pFunctionCallArgs;
	private final FunctionArgumentsElements pFunctionArguments;
	private final NamedArgumentsElements pNamedArguments;
	private final NamedArgumentElements pNamedArgument;
	private final FunctionArgumentElements pFunctionArgument;
	private final OutputExpressionListElements pOutputExpressionList;
	private final ExprExpressionListElements pExprExpressionList;
	private final ArraySubscriptsElements pArraySubscripts;
	private final SubscriptElements pSubscript;
	private final CommentElements pComment;
	private final StringCommentElements pStringComment;
	private final AssertElements pAssert;
	private final AssertionLevelElements eAssertionLevel;
	private final AnnotationElements pAnnotation;
	private final AnnotationArgElements pAnnotationArg;
	private final DefComponentNameElements pDefComponentName;
	private final ChoicesElements pChoices;
	private final AnnotationCodeElements pAnnotationCode;
	private final CodeGenerationFlagElements pCodeGenerationFlag;
	private final AnnotationLayerElements pAnnotationLayer;
	private final LayerIconElements pLayerIcon;
	private final LayerDiagramElements pLayerDiagram;
	private final CoordinateSpecificationElements pCoordinateSpecification;
	private final CoordinateSpecificationArgsElements pCoordinateSpecificationArgs;
	private final ExtentElements pExtent;
	private final PreserveARElements pPreserveAR;
	private final InitialScaleElements pInitialScale;
	private final GridElements pGrid;
	private final PlacementElements pPlacement;
	private final PlacementArgElements pPlacementArg;
	private final VisibleElements pVisible;
	private final TransformationElements pTransformation;
	private final TransformationArgElements pTransformationArg;
	private final RotationElements pRotation;
	private final OriginElements pOrigin;
	private final PointElements pPoint;
	private final NumElements pNum;
	private final RadiusElements pRadius;
	private final SmoothElements pSmooth;
	private final ColorElements pColor;
	private final ThicknessElements pThickness;
	private final GraphicsElements pGraphics;
	private final GraphicalPrimitiveElements pGraphicalPrimitive;
	private final LineElements pLine;
	private final PolygonElements pPolygon;
	private final RectangleElements pRectangle;
	private final EllipseElements pEllipse;
	private final TextElements pText;
	private final BitmapElements pBitmap;
	private final GraphicalPrimitiveArgsElements pGraphicalPrimitiveArgs;
	private final DialogElements pDialog;
	private final DialogArgElements pDialogArg;
	private final EnableElements pEnable;
	private final GroupElements pGroup;
	private final TabElements pTab;
	private final AnnotationDocumentationElements pAnnotationDocumentation;
	private final AnnotationExperimentElements pAnnotationExperiment;
	private final ExperimentOptionElements pExperimentOption;
	private final LinePatternElements eLinePattern;
	private final FillPatternElements eFillPattern;
	private final BorderPatternElements eBorderPattern;
	private final SmoothEnumElements eSmoothEnum;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tIDENT;
	private final TerminalRule tSTRING;
	private final TerminalRule tS_ESCAPE;
	private final TerminalRule tUNSIGNED_INTEGER;
	private final TerminalRule tUNSIGNED_NUMBER;
	private final TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public ModelicaMoGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pProgram = new ProgramElements();
		this.pClassDefinition = new ClassDefinitionElements();
		this.pClassPrefixes = new ClassPrefixesElements();
		this.pClassSpecifier = new ClassSpecifierElements();
		this.pLongClassSpecifier = new LongClassSpecifierElements();
		this.pShortClassSpecifier = new ShortClassSpecifierElements();
		this.pDerClassSpecifier = new DerClassSpecifierElements();
		this.pBasePrefix = new BasePrefixElements();
		this.pEnumList = new EnumListElements();
		this.pEnumerationLiteral = new EnumerationLiteralElements();
		this.pComposition = new CompositionElements();
		this.pLanguageSpecification = new LanguageSpecificationElements();
		this.pElementList = new ElementListElements();
		this.pElement = new ElementElements();
		this.pImportClause = new ImportClauseElements();
		this.pImportList = new ImportListElements();
		this.pExtendClause = new ExtendClauseElements();
		this.pConstrainingClause = new ConstrainingClauseElements();
		this.pModification = new ModificationElements();
		this.pClassModification = new ClassModificationElements();
		this.pArgumentList = new ArgumentListElements();
		this.pArgument = new ArgumentElements();
		this.pElementModificationOrReplaceable = new ElementModificationOrReplaceableElements();
		this.pElementModification = new ElementModificationElements();
		this.pElementRedeclaration = new ElementRedeclarationElements();
		this.pElementReplaceable = new ElementReplaceableElements();
		this.pComponentClause1 = new ComponentClause1Elements();
		this.pComponentDeclaration1 = new ComponentDeclaration1Elements();
		this.pShortClassDefinition = new ShortClassDefinitionElements();
		this.pComponentClause = new ComponentClauseElements();
		this.pTypePrefix = new TypePrefixElements();
		this.pTypeSpecifier = new TypeSpecifierElements();
		this.pComponentList = new ComponentListElements();
		this.pComponentDeclaration = new ComponentDeclarationElements();
		this.pConditionAttribute = new ConditionAttributeElements();
		this.pDeclaration = new DeclarationElements();
		this.pEquationSection = new EquationSectionElements();
		this.pAlgorithmSection = new AlgorithmSectionElements();
		this.pEquation = new EquationElements();
		this.pStatement = new StatementElements();
		this.pEquationIf = new EquationIfElements();
		this.pStatementIf = new StatementIfElements();
		this.pEquationFor = new EquationForElements();
		this.pStatementFor = new StatementForElements();
		this.pForIndices = new ForIndicesElements();
		this.pForIndex = new ForIndexElements();
		this.pStatementWhile = new StatementWhileElements();
		this.pEquationWhen = new EquationWhenElements();
		this.pStatementWhen = new StatementWhenElements();
		this.pConnectClause = new ConnectClauseElements();
		this.pExpression = new ExpressionElements();
		this.pSimpleExpression = new SimpleExpressionElements();
		this.pLogicalExpression = new LogicalExpressionElements();
		this.pLogicalTerm = new LogicalTermElements();
		this.pLogicalFactor = new LogicalFactorElements();
		this.pRelation = new RelationElements();
		this.pRelOp = new RelOpElements();
		this.pArithmeticExpression = new ArithmeticExpressionElements();
		this.pArithmeticExpression2 = new ArithmeticExpression2Elements();
		this.pArithmeticExpressionUnary = new ArithmeticExpressionUnaryElements();
		this.pAddOp = new AddOpElements();
		this.pTerm = new TermElements();
		this.pMulOp = new MulOpElements();
		this.pFactor = new FactorElements();
		this.pPrimary = new PrimaryElements();
		this.pName = new NameElements();
		this.pComponentReference = new ComponentReferenceElements();
		this.pFunctionCallArgs = new FunctionCallArgsElements();
		this.pFunctionArguments = new FunctionArgumentsElements();
		this.pNamedArguments = new NamedArgumentsElements();
		this.pNamedArgument = new NamedArgumentElements();
		this.pFunctionArgument = new FunctionArgumentElements();
		this.pOutputExpressionList = new OutputExpressionListElements();
		this.pExprExpressionList = new ExprExpressionListElements();
		this.pArraySubscripts = new ArraySubscriptsElements();
		this.pSubscript = new SubscriptElements();
		this.pComment = new CommentElements();
		this.pStringComment = new StringCommentElements();
		this.pAssert = new AssertElements();
		this.eAssertionLevel = new AssertionLevelElements();
		this.pAnnotation = new AnnotationElements();
		this.pAnnotationArg = new AnnotationArgElements();
		this.pDefComponentName = new DefComponentNameElements();
		this.pChoices = new ChoicesElements();
		this.pAnnotationCode = new AnnotationCodeElements();
		this.pCodeGenerationFlag = new CodeGenerationFlagElements();
		this.pAnnotationLayer = new AnnotationLayerElements();
		this.pLayerIcon = new LayerIconElements();
		this.pLayerDiagram = new LayerDiagramElements();
		this.pCoordinateSpecification = new CoordinateSpecificationElements();
		this.pCoordinateSpecificationArgs = new CoordinateSpecificationArgsElements();
		this.pExtent = new ExtentElements();
		this.pPreserveAR = new PreserveARElements();
		this.pInitialScale = new InitialScaleElements();
		this.pGrid = new GridElements();
		this.pPlacement = new PlacementElements();
		this.pPlacementArg = new PlacementArgElements();
		this.pVisible = new VisibleElements();
		this.pTransformation = new TransformationElements();
		this.pTransformationArg = new TransformationArgElements();
		this.pRotation = new RotationElements();
		this.pOrigin = new OriginElements();
		this.pPoint = new PointElements();
		this.pNum = new NumElements();
		this.pRadius = new RadiusElements();
		this.pSmooth = new SmoothElements();
		this.pColor = new ColorElements();
		this.pThickness = new ThicknessElements();
		this.pGraphics = new GraphicsElements();
		this.pGraphicalPrimitive = new GraphicalPrimitiveElements();
		this.pLine = new LineElements();
		this.pPolygon = new PolygonElements();
		this.pRectangle = new RectangleElements();
		this.pEllipse = new EllipseElements();
		this.pText = new TextElements();
		this.pBitmap = new BitmapElements();
		this.pGraphicalPrimitiveArgs = new GraphicalPrimitiveArgsElements();
		this.pDialog = new DialogElements();
		this.pDialogArg = new DialogArgElements();
		this.pEnable = new EnableElements();
		this.pGroup = new GroupElements();
		this.pTab = new TabElements();
		this.pAnnotationDocumentation = new AnnotationDocumentationElements();
		this.pAnnotationExperiment = new AnnotationExperimentElements();
		this.pExperimentOption = new ExperimentOptionElements();
		this.eLinePattern = new LinePatternElements();
		this.eFillPattern = new FillPatternElements();
		this.eBorderPattern = new BorderPatternElements();
		this.eSmoothEnum = new SmoothEnumElements();
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.SL_COMMENT");
		this.tIDENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.IDENT");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.STRING");
		this.tS_ESCAPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.S_ESCAPE");
		this.tUNSIGNED_INTEGER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.UNSIGNED_INTEGER");
		this.tUNSIGNED_NUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.UNSIGNED_NUMBER");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "sc.modelica.xtext.ModelicaMo.ANY_OTHER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("sc.modelica.xtext.ModelicaMo".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Program:
	//	{Program} ('within' name=Name? ';')? (classes+=ClassDefinition ';')*;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//// B.2.2 Class Definition
	//ClassDefinition:
	//	encapsulated?='encapsulated'? classPrefixes=ClassPrefixes classSpecifier=ClassSpecifier;
	public ClassDefinitionElements getClassDefinitionAccess() {
		return pClassDefinition;
	}
	
	public ParserRule getClassDefinitionRule() {
		return getClassDefinitionAccess().getRule();
	}
	
	//ClassPrefixes:
	//	partial?='partial'? (class?='class' | model?='model' | operator?='operator'? record?='record' | block?='block' |
	//	expandable?='expandable'? connector?='connector' | type?='type' | package?='package' | (pure?='pure' | 'impure')?
	//	operator?='operator'? function?='function' | operator?='operator');
	public ClassPrefixesElements getClassPrefixesAccess() {
		return pClassPrefixes;
	}
	
	public ParserRule getClassPrefixesRule() {
		return getClassPrefixesAccess().getRule();
	}
	
	//ClassSpecifier:
	//	LongClassSpecifier | ShortClassSpecifier | DerClassSpecifier;
	public ClassSpecifierElements getClassSpecifierAccess() {
		return pClassSpecifier;
	}
	
	public ParserRule getClassSpecifierRule() {
		return getClassSpecifierAccess().getRule();
	}
	
	//// TODO different from modelica manual: made stringcomment optional 
	//LongClassSpecifier:
	//	name=IDENT sringComment=StringComment? composition=Composition 'end' nameEnd=IDENT | extends=ExtendClause name=IDENT
	//	classModification=ClassModification? sringComment=StringComment? composition=Composition 'end' nameEnd=IDENT;
	public LongClassSpecifierElements getLongClassSpecifierAccess() {
		return pLongClassSpecifier;
	}
	
	public ParserRule getLongClassSpecifierRule() {
		return getLongClassSpecifierAccess().getRule();
	}
	
	//ShortClassSpecifier:
	//	name=IDENT '=' basePrefix=BasePrefix instanceName=Name arraySubscripts=ArraySubscripts?
	//	classModification=ClassModification? comment=Comment? | name=IDENT '=' 'enumeration' '(' (enumList=EnumList? | ':')
	//	')' comment=Comment?;
	public ShortClassSpecifierElements getShortClassSpecifierAccess() {
		return pShortClassSpecifier;
	}
	
	public ParserRule getShortClassSpecifierRule() {
		return getShortClassSpecifierAccess().getRule();
	}
	
	//DerClassSpecifier:
	//	id=IDENT '=' 'der' '(' name=Name ',' IDENT (',' IDENT)* ')' comment=Comment?;
	public DerClassSpecifierElements getDerClassSpecifierAccess() {
		return pDerClassSpecifier;
	}
	
	public ParserRule getDerClassSpecifierRule() {
		return getDerClassSpecifierAccess().getRule();
	}
	
	//BasePrefix:
	//	TypePrefix;
	public BasePrefixElements getBasePrefixAccess() {
		return pBasePrefix;
	}
	
	public ParserRule getBasePrefixRule() {
		return getBasePrefixAccess().getRule();
	}
	
	//EnumList:
	//	enumerationLiteral+=EnumerationLiteral (',' enumerationLiteral+=EnumerationLiteral)*;
	public EnumListElements getEnumListAccess() {
		return pEnumList;
	}
	
	public ParserRule getEnumListRule() {
		return getEnumListAccess().getRule();
	}
	
	//EnumerationLiteral:
	//	IDENT comment=Comment;
	public EnumerationLiteralElements getEnumerationLiteralAccess() {
		return pEnumerationLiteral;
	}
	
	public ParserRule getEnumerationLiteralRule() {
		return getEnumerationLiteralAccess().getRule();
	}
	
	//Composition:
	//	elementList=ElementList ('public' elementListPublic+=ElementList
	//	| 'protected' elementListProtected+=ElementList
	//	| equationSections+=EquationSection
	//	| algorithmSections+=AlgorithmSection)* ('external' LanguageSpecification=LanguageSpecification)?
	//	(annotation=Annotation ';')?;
	public CompositionElements getCompositionAccess() {
		return pComposition;
	}
	
	public ParserRule getCompositionRule() {
		return getCompositionAccess().getRule();
	}
	
	//LanguageSpecification:
	//	STRING;
	public LanguageSpecificationElements getLanguageSpecificationAccess() {
		return pLanguageSpecification;
	}
	
	public ParserRule getLanguageSpecificationRule() {
		return getLanguageSpecificationAccess().getRule();
	}
	
	//ElementList:
	//	{ElementList} (elements+=Element ';')*;
	public ElementListElements getElementListAccess() {
		return pElementList;
	}
	
	public ParserRule getElementListRule() {
		return getElementListAccess().getRule();
	}
	
	//Element:
	//	importClause=ImportClause | extendClause=ExtendClause | redeclare?='redeclare'? final?='final'? inner?='inner'?
	//	outer?='outer'?
	//	//(class=ClassDefinition | comp=ComponentClause) | 
	//	'replaceable'? (class=ClassDefinition | comp=ComponentClause) (cc=ConstrainingClause comment=Comment?)?;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//ImportClause:
	//	'import' (id=IDENT '=' name=Name | name=Name ('.' ('*' | '{' importList=ImportList '}'))?) comment=Comment?;
	public ImportClauseElements getImportClauseAccess() {
		return pImportClause;
	}
	
	public ParserRule getImportClauseRule() {
		return getImportClauseAccess().getRule();
	}
	
	//ImportList:
	//	id+=IDENT (',' id+=IDENT)*;
	public ImportListElements getImportListAccess() {
		return pImportList;
	}
	
	public ParserRule getImportListRule() {
		return getImportListAccess().getRule();
	}
	
	//// B.2.3 Extends
	//ExtendClause:
	//	'extends' name=Name classModification=ClassModification? annotation=Annotation?;
	public ExtendClauseElements getExtendClauseAccess() {
		return pExtendClause;
	}
	
	public ParserRule getExtendClauseRule() {
		return getExtendClauseAccess().getRule();
	}
	
	//ConstrainingClause:
	//	'constrainedby' name=Name classModification=ClassModification?;
	public ConstrainingClauseElements getConstrainingClauseAccess() {
		return pConstrainingClause;
	}
	
	public ParserRule getConstrainingClauseRule() {
		return getConstrainingClauseAccess().getRule();
	}
	
	//Modification:
	//	classModification=ClassModification ('=' expression=Expression)?
	//	| '=' expression=Expression
	//	| ':=' expression=Expression;
	public ModificationElements getModificationAccess() {
		return pModification;
	}
	
	public ParserRule getModificationRule() {
		return getModificationAccess().getRule();
	}
	
	//ClassModification:
	//	{ClassModification} '(' argumentList=ArgumentList? ')';
	public ClassModificationElements getClassModificationAccess() {
		return pClassModification;
	}
	
	public ParserRule getClassModificationRule() {
		return getClassModificationAccess().getRule();
	}
	
	//ArgumentList:
	//	arguments+=Argument (',' arguments+=Argument)*;
	public ArgumentListElements getArgumentListAccess() {
		return pArgumentList;
	}
	
	public ParserRule getArgumentListRule() {
		return getArgumentListAccess().getRule();
	}
	
	//Argument:
	//	ElementModificationOrReplaceable | ElementRedeclaration;
	public ArgumentElements getArgumentAccess() {
		return pArgument;
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}
	
	//ElementModificationOrReplaceable:
	//	each?='each'? final?='final'? (elementModOrRep=ElementModification | elementModOrRep=ElementReplaceable);
	public ElementModificationOrReplaceableElements getElementModificationOrReplaceableAccess() {
		return pElementModificationOrReplaceable;
	}
	
	public ParserRule getElementModificationOrReplaceableRule() {
		return getElementModificationOrReplaceableAccess().getRule();
	}
	
	//ElementModification:
	//	name=Name modification=Modification? stringComment=StringComment?;
	public ElementModificationElements getElementModificationAccess() {
		return pElementModification;
	}
	
	public ParserRule getElementModificationRule() {
		return getElementModificationAccess().getRule();
	}
	
	//ElementRedeclaration:
	//	redeclare?='redeclare' each?='each'? final?='final'? ((classDefinition=ShortClassDefinition |
	//	componentClause=ComponentClause1) | element=ElementReplaceable);
	public ElementRedeclarationElements getElementRedeclarationAccess() {
		return pElementRedeclaration;
	}
	
	public ParserRule getElementRedeclarationRule() {
		return getElementRedeclarationAccess().getRule();
	}
	
	//ElementReplaceable:
	//	replaceable?='replaceable' (element=ShortClassDefinition | element=ComponentClause1) constraint=ConstrainingClause?;
	public ElementReplaceableElements getElementReplaceableAccess() {
		return pElementReplaceable;
	}
	
	public ParserRule getElementReplaceableRule() {
		return getElementReplaceableAccess().getRule();
	}
	
	//ComponentClause1:
	//	typePrefix=TypePrefix typeSpecifier=TypeSpecifier componentDeclaration=ComponentDeclaration1;
	public ComponentClause1Elements getComponentClause1Access() {
		return pComponentClause1;
	}
	
	public ParserRule getComponentClause1Rule() {
		return getComponentClause1Access().getRule();
	}
	
	//ComponentDeclaration1:
	//	Declaration comment=Comment?;
	public ComponentDeclaration1Elements getComponentDeclaration1Access() {
		return pComponentDeclaration1;
	}
	
	public ParserRule getComponentDeclaration1Rule() {
		return getComponentDeclaration1Access().getRule();
	}
	
	//ShortClassDefinition:
	//	classPrefixes=ClassPrefixes classSpecifier=ShortClassSpecifier;
	public ShortClassDefinitionElements getShortClassDefinitionAccess() {
		return pShortClassDefinition;
	}
	
	public ParserRule getShortClassDefinitionRule() {
		return getShortClassDefinitionAccess().getRule();
	}
	
	//ComponentClause:
	//	typePrefix=TypePrefix typeSpec=TypeSpecifier arraySubscripts=ArraySubscripts? componentList=ComponentList;
	public ComponentClauseElements getComponentClauseAccess() {
		return pComponentClause;
	}
	
	public ParserRule getComponentClauseRule() {
		return getComponentClauseAccess().getRule();
	}
	
	//TypePrefix:
	//	{TypePrefix} (flow?='flow' | stream?='stream')? (constant?='constant' | parameter?='parameter' |
	//	discrete?='discrete')? (input?='input' | output?='output')?;
	public TypePrefixElements getTypePrefixAccess() {
		return pTypePrefix;
	}
	
	public ParserRule getTypePrefixRule() {
		return getTypePrefixAccess().getRule();
	}
	
	//TypeSpecifier:
	//	name=Name;
	public TypeSpecifierElements getTypeSpecifierAccess() {
		return pTypeSpecifier;
	}
	
	public ParserRule getTypeSpecifierRule() {
		return getTypeSpecifierAccess().getRule();
	}
	
	//ComponentList:
	//	components+=ComponentDeclaration ("," components+=ComponentDeclaration)*;
	public ComponentListElements getComponentListAccess() {
		return pComponentList;
	}
	
	public ParserRule getComponentListRule() {
		return getComponentListAccess().getRule();
	}
	
	//// TODO modified comment with respect to the modelica manual
	//ComponentDeclaration:
	//	declaration=Declaration conditionAttribute=ConditionAttribute? comment=StringComment? annotation=Annotation?;
	public ComponentDeclarationElements getComponentDeclarationAccess() {
		return pComponentDeclaration;
	}
	
	public ParserRule getComponentDeclarationRule() {
		return getComponentDeclarationAccess().getRule();
	}
	
	//ConditionAttribute:
	//	'if' condition=Expression;
	public ConditionAttributeElements getConditionAttributeAccess() {
		return pConditionAttribute;
	}
	
	public ParserRule getConditionAttributeRule() {
		return getConditionAttributeAccess().getRule();
	}
	
	//// TODO modified with respect to the modelica manual: modification is now optional
	//Declaration:
	//	name=IDENT arraySubscripts=ArraySubscripts? modification=Modification?;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//// B.2.6 Equations
	//EquationSection:
	//	initial?='initial'? equation='equation' (equations+=Equation ';')*;
	public EquationSectionElements getEquationSectionAccess() {
		return pEquationSection;
	}
	
	public ParserRule getEquationSectionRule() {
		return getEquationSectionAccess().getRule();
	}
	
	//AlgorithmSection:
	//	initial?='initial'? algorithm='algorithm' (statements+=Statement ';')*;
	public AlgorithmSectionElements getAlgorithmSectionAccess() {
		return pAlgorithmSection;
	}
	
	public ParserRule getAlgorithmSectionRule() {
		return getAlgorithmSectionAccess().getRule();
	}
	
	//// TODO modified with respect to the modelica manual: connection closed moved outside
	//// also functioncall args removed here as it appears below in Primary (the highest priority element of an equation)
	//Equation:
	//	(SimpleExpression ('=' equation=Expression)?
	//	| EquationIf
	//	| EquationFor
	//	| EquationWhen
	//	/ *| name=Name fca=FunctionCallArgs* /) comm=Comment?
	//	| connection=ConnectClause
	//	| Assert;
	public EquationElements getEquationAccess() {
		return pEquation;
	}
	
	public ParserRule getEquationRule() {
		return getEquationAccess().getRule();
	}
	
	//Statement:
	//	(component=ComponentReference (':=' expression=Expression | fca=FunctionCallArgs) | '('
	//	expression=OutputExpressionList ')' ':=' component=ComponentReference fca=FunctionCallArgs
	//	| {Statement} 'return' | {Statement} 'break'
	//	| StatementIf | StatementFor | StatementWhile | StatementWhen) comm=Comment;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//EquationIf:
	//	'if' ifExp=Expression 'then' (ifEqs+=Equation ';')* ('elseif' elseifExp+=Expression 'then' (elseIfEqs+=Equation
	//	';')*)* ('else' (elseEqs+=Equation ';')*)?
	//	'end' 'if';
	public EquationIfElements getEquationIfAccess() {
		return pEquationIf;
	}
	
	public ParserRule getEquationIfRule() {
		return getEquationIfAccess().getRule();
	}
	
	//StatementIf:
	//	'if' ifExp=Expression 'then' (ifEqs+=Statement ';')* ('elseif' elseifExp+=Expression 'then' (elseIfEqs+=Statement
	//	';')*)* ('else' (elseEqs+=Statement ';')*)?
	//	'end' 'if';
	public StatementIfElements getStatementIfAccess() {
		return pStatementIf;
	}
	
	public ParserRule getStatementIfRule() {
		return getStatementIfAccess().getRule();
	}
	
	//EquationFor:
	//	'for' iterators=ForIndices 'loop' (forEqs+=Equation ';')* 'end' 'for';
	public EquationForElements getEquationForAccess() {
		return pEquationFor;
	}
	
	public ParserRule getEquationForRule() {
		return getEquationForAccess().getRule();
	}
	
	//StatementFor:
	//	'for' iterators=ForIndices 'loop' (forEqs+=Statement ';')* 'end' 'for';
	public StatementForElements getStatementForAccess() {
		return pStatementFor;
	}
	
	public ParserRule getStatementForRule() {
		return getStatementForAccess().getRule();
	}
	
	//ForIndices:
	//	forIndex+=ForIndex (',' forIndex+=ForIndex)*;
	public ForIndicesElements getForIndicesAccess() {
		return pForIndices;
	}
	
	public ParserRule getForIndicesRule() {
		return getForIndicesAccess().getRule();
	}
	
	//ForIndex:
	//	id=IDENT 'in' expression=Expression;
	public ForIndexElements getForIndexAccess() {
		return pForIndex;
	}
	
	public ParserRule getForIndexRule() {
		return getForIndexAccess().getRule();
	}
	
	//StatementWhile:
	//	'while' boolExpr=Expression 'loop' (stat+=Statement ";")* 'end' 'while';
	public StatementWhileElements getStatementWhileAccess() {
		return pStatementWhile;
	}
	
	public ParserRule getStatementWhileRule() {
		return getStatementWhileAccess().getRule();
	}
	
	//EquationWhen:
	//	'when' whenExp=Expression 'then' (whenEquations+=Equation ';')* ('elsewhen' exp+=Expression 'then'
	//	(equationItem+=Equation ';')*)*
	//	'end' 'when';
	public EquationWhenElements getEquationWhenAccess() {
		return pEquationWhen;
	}
	
	public ParserRule getEquationWhenRule() {
		return getEquationWhenAccess().getRule();
	}
	
	//StatementWhen:
	//	'when' whenExp=Expression 'then' (whenEquations+=Statement ';')* ('elsewhen' exp+=Expression 'then'
	//	(equationItem+=Statement ';')*)*
	//	'end' 'when';
	public StatementWhenElements getStatementWhenAccess() {
		return pStatementWhen;
	}
	
	public ParserRule getStatementWhenRule() {
		return getStatementWhenAccess().getRule();
	}
	
	//// TODO modified with respect to the modelica manual: connectionclause can have annotation
	//ConnectClause:
	//	'connect' '(' node1=ComponentReference ',' node2=ComponentReference ')' annotation=Annotation?;
	public ConnectClauseElements getConnectClauseAccess() {
		return pConnectClause;
	}
	
	public ParserRule getConnectClauseRule() {
		return getConnectClauseAccess().getRule();
	}
	
	//// B.2.7 Expressions
	//Expression:
	//	SimpleExpression |
	//	'if' if=Expression 'then' then=Expression ('elseif' elseif+=Expression 'then' elseifthen+=Expression)*
	//	'else' else=Expression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//SimpleExpression Expression:
	//	start=LogicalExpression (':' step=LogicalExpression (':' stop=LogicalExpression)?)?
	public SimpleExpressionElements getSimpleExpressionAccess() {
		return pSimpleExpression;
	}
	
	public ParserRule getSimpleExpressionRule() {
		return getSimpleExpressionAccess().getRule();
	}
	
	//LogicalExpression Expression:
	//	LogicalTerm ({LogicalExpression.left=current} 'or' right+=LogicalTerm)*
	public LogicalExpressionElements getLogicalExpressionAccess() {
		return pLogicalExpression;
	}
	
	public ParserRule getLogicalExpressionRule() {
		return getLogicalExpressionAccess().getRule();
	}
	
	//LogicalTerm Expression:
	//	LogicalFactor ({LogicalTerm.left=current} 'and' right=LogicalFactor)*
	public LogicalTermElements getLogicalTermAccess() {
		return pLogicalTerm;
	}
	
	public ParserRule getLogicalTermRule() {
		return getLogicalTermAccess().getRule();
	}
	
	//LogicalFactor Expression:
	//	'not'? Relation
	public LogicalFactorElements getLogicalFactorAccess() {
		return pLogicalFactor;
	}
	
	public ParserRule getLogicalFactorRule() {
		return getLogicalFactorAccess().getRule();
	}
	
	//Relation Expression:
	//	ArithmeticExpression ({Relation.left=current} RelOp right=ArithmeticExpression)?
	public RelationElements getRelationAccess() {
		return pRelation;
	}
	
	public ParserRule getRelationRule() {
		return getRelationAccess().getRule();
	}
	
	//RelOp:
	//	'>' | '>=' | '<' | '<=' | '==' | '<>';
	public RelOpElements getRelOpAccess() {
		return pRelOp;
	}
	
	public ParserRule getRelOpRule() {
		return getRelOpAccess().getRule();
	}
	
	//// TODO modified the original rule below to add support for unary arithmetics 
	////ArithmeticExpression returns Expression:
	////	Term ({ArithmeticExpression.left=current} AddOp right=Term)?
	////;
	//ArithmeticExpression Expression:
	//	ArithmeticExpressionUnary ({ArithmeticExpression.left=current} AddOp right=ArithmeticExpression2)?
	public ArithmeticExpressionElements getArithmeticExpressionAccess() {
		return pArithmeticExpression;
	}
	
	public ParserRule getArithmeticExpressionRule() {
		return getArithmeticExpressionAccess().getRule();
	}
	
	//ArithmeticExpression2 Expression:
	//	Term ({ArithmeticExpression2.left=current} AddOp right=ArithmeticExpression2)?
	public ArithmeticExpression2Elements getArithmeticExpression2Access() {
		return pArithmeticExpression2;
	}
	
	public ParserRule getArithmeticExpression2Rule() {
		return getArithmeticExpression2Access().getRule();
	}
	
	//ArithmeticExpressionUnary Expression:
	//	Term | AddOp exp=Term
	public ArithmeticExpressionUnaryElements getArithmeticExpressionUnaryAccess() {
		return pArithmeticExpressionUnary;
	}
	
	public ParserRule getArithmeticExpressionUnaryRule() {
		return getArithmeticExpressionUnaryAccess().getRule();
	}
	
	//AddOp:
	//	'+' | '-' | '.+' | '.-';
	public AddOpElements getAddOpAccess() {
		return pAddOp;
	}
	
	public ParserRule getAddOpRule() {
		return getAddOpAccess().getRule();
	}
	
	//Term Expression:
	//	Factor ({Term.left=current} MulOp right=Factor)?
	public TermElements getTermAccess() {
		return pTerm;
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}
	
	//MulOp:
	//	'*' | '/' | '.*' | './';
	public MulOpElements getMulOpAccess() {
		return pMulOp;
	}
	
	public ParserRule getMulOpRule() {
		return getMulOpAccess().getRule();
	}
	
	//Factor Expression:
	//	Primary ({Factor.left=current} ('^' | '.^') right=Primary)?
	public FactorElements getFactorAccess() {
		return pFactor;
	}
	
	public ParserRule getFactorRule() {
		return getFactorAccess().getRule();
	}
	
	//Primary Expression:
	//	{Primary} UNSIGNED_INTEGER | {Primary} UNSIGNED_NUMBER | {Primary} STRING | {Primary} 'false' | {Primary} 'true'
	//	| {Primary} (name=Name | 'der' | 'initial') fca=FunctionCallArgs
	//	| ComponentReference
	//	| '(' OutputExpressionList ')'
	//	| '[' list+=ExprExpressionList (';' list+=ExprExpressionList)* ']'
	//	| '{' fa=FunctionArguments '}'
	//	| {Primary} 'end'
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//Name:
	//	{Name} '.'? IDENT ('.' id+=IDENT)*;
	public NameElements getNameAccess() {
		return pName;
	}
	
	public ParserRule getNameRule() {
		return getNameAccess().getRule();
	}
	
	//ComponentReference:
	//	{ComponentReference} '.'? IDENT subs+=ArraySubscripts? ('.' id+=IDENT subs+=ArraySubscripts?)*;
	public ComponentReferenceElements getComponentReferenceAccess() {
		return pComponentReference;
	}
	
	public ParserRule getComponentReferenceRule() {
		return getComponentReferenceAccess().getRule();
	}
	
	//FunctionCallArgs:
	//	{FunctionCallArgs} '(' functionArgs=FunctionArguments? ')';
	public FunctionCallArgsElements getFunctionCallArgsAccess() {
		return pFunctionCallArgs;
	}
	
	public ParserRule getFunctionCallArgsRule() {
		return getFunctionCallArgsAccess().getRule();
	}
	
	//FunctionArguments:
	//	functionArgument=FunctionArgument (',' args+=FunctionArguments | 'for' forIndices+=ForIndices)?
	//	| namedArguments=NamedArguments;
	public FunctionArgumentsElements getFunctionArgumentsAccess() {
		return pFunctionArguments;
	}
	
	public ParserRule getFunctionArgumentsRule() {
		return getFunctionArgumentsAccess().getRule();
	}
	
	//NamedArguments:
	//	namedArgument+=NamedArgument (',' namedArguments=NamedArguments)?;
	public NamedArgumentsElements getNamedArgumentsAccess() {
		return pNamedArguments;
	}
	
	public ParserRule getNamedArgumentsRule() {
		return getNamedArgumentsAccess().getRule();
	}
	
	//NamedArgument:
	//	name=IDENT '=' functionArgument=FunctionArgument;
	public NamedArgumentElements getNamedArgumentAccess() {
		return pNamedArgument;
	}
	
	public ParserRule getNamedArgumentRule() {
		return getNamedArgumentAccess().getRule();
	}
	
	//FunctionArgument:
	//	'function' name=Name '(' namedArguments=NamedArguments? ')' | expression=Expression;
	public FunctionArgumentElements getFunctionArgumentAccess() {
		return pFunctionArgument;
	}
	
	public ParserRule getFunctionArgumentRule() {
		return getFunctionArgumentAccess().getRule();
	}
	
	//OutputExpressionList:
	//	{OutputExpresionList} expressions+=Expression? (',' expressions+=Expression?)*;
	public OutputExpressionListElements getOutputExpressionListAccess() {
		return pOutputExpressionList;
	}
	
	public ParserRule getOutputExpressionListRule() {
		return getOutputExpressionListAccess().getRule();
	}
	
	//ExprExpressionList:
	//	exp+=Expression (',' exp+=Expression)*;
	public ExprExpressionListElements getExprExpressionListAccess() {
		return pExprExpressionList;
	}
	
	public ParserRule getExprExpressionListRule() {
		return getExprExpressionListAccess().getRule();
	}
	
	//ArraySubscripts:
	//	'[' subscripts+=Subscript (',' subscripts+=Subscript)* ']';
	public ArraySubscriptsElements getArraySubscriptsAccess() {
		return pArraySubscripts;
	}
	
	public ParserRule getArraySubscriptsRule() {
		return getArraySubscriptsAccess().getRule();
	}
	
	//Subscript:
	//	{Subscript} ':' | Expression;
	public SubscriptElements getSubscriptAccess() {
		return pSubscript;
	}
	
	public ParserRule getSubscriptRule() {
		return getSubscriptAccess().getRule();
	}
	
	//Comment:
	//	stringComment=StringComment annotation=Annotation?;
	public CommentElements getCommentAccess() {
		return pComment;
	}
	
	public ParserRule getCommentRule() {
		return getCommentAccess().getRule();
	}
	
	//StringComment:
	//	{StringComment} STRING ('+' str+=STRING)*;
	public StringCommentElements getStringCommentAccess() {
		return pStringComment;
	}
	
	public ParserRule getStringCommentRule() {
		return getStringCommentAccess().getRule();
	}
	
	//Assert:
	//	'assert' '(' condition=Expression ',' message=Expression (',' ('level' '=')? level=AssertionLevel)? ')';
	public AssertElements getAssertAccess() {
		return pAssert;
	}
	
	public ParserRule getAssertRule() {
		return getAssertAccess().getRule();
	}
	
	//enum AssertionLevel:
	//	error='AssertionLevel.error' | warning='AssertionLevel.warning';
	public AssertionLevelElements getAssertionLevelAccess() {
		return eAssertionLevel;
	}
	
	public EnumRule getAssertionLevelRule() {
		return getAssertionLevelAccess().getRule();
	}
	
	//// ANNOTATIONS
	//// TODO modified with respect to the modelica manual: modification is now optional
	////Annotation: 'annotation' ClassModification ;
	//Annotation:
	//	'annotation' '(' args+=AnnotationArg (',' args+=AnnotationArg)* ')';
	public AnnotationElements getAnnotationAccess() {
		return pAnnotation;
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}
	
	////AnnotationGraphical
	//AnnotationArg:
	//	AnnotationCode | Placement | Line | AnnotationLayer | AnnotationDocumentation | Dialog
	//	| AnnotationExperiment | Choices | DefComponentName;
	public AnnotationArgElements getAnnotationArgAccess() {
		return pAnnotationArg;
	}
	
	public ParserRule getAnnotationArgRule() {
		return getAnnotationArgAccess().getRule();
	}
	
	//DefComponentName:
	//	'defaultComponentName' '=' value=STRING;
	public DefComponentNameElements getDefComponentNameAccess() {
		return pDefComponentName;
	}
	
	public ParserRule getDefComponentNameRule() {
		return getDefComponentNameAccess().getRule();
	}
	
	//Choices:
	//	'choices' '(' types+=IDENT '=' values+=('true' | 'false') (',' types+=IDENT '=' values+=('true' | 'false'))* ')';
	public ChoicesElements getChoicesAccess() {
		return pChoices;
	}
	
	public ParserRule getChoicesRule() {
		return getChoicesAccess().getRule();
	}
	
	//AnnotationCode:
	//	flag=CodeGenerationFlag "=" value=('true' | 'false');
	public AnnotationCodeElements getAnnotationCodeAccess() {
		return pAnnotationCode;
	}
	
	public ParserRule getAnnotationCodeRule() {
		return getAnnotationCodeAccess().getRule();
	}
	
	//CodeGenerationFlag:
	//	"Evaluate" | "HideResult" | "Inline" | "LateInline" | "GenerateEvents";
	public CodeGenerationFlagElements getCodeGenerationFlagAccess() {
		return pCodeGenerationFlag;
	}
	
	public ParserRule getCodeGenerationFlagRule() {
		return getCodeGenerationFlagAccess().getRule();
	}
	
	//AnnotationLayer:
	//	LayerIcon | LayerDiagram;
	public AnnotationLayerElements getAnnotationLayerAccess() {
		return pAnnotationLayer;
	}
	
	public ParserRule getAnnotationLayerRule() {
		return getAnnotationLayerAccess().getRule();
	}
	
	//LayerIcon:
	//	'Icon' '(' (coordinateSystem=CoordinateSpecification ',')? graphics=Graphics ')';
	public LayerIconElements getLayerIconAccess() {
		return pLayerIcon;
	}
	
	public ParserRule getLayerIconRule() {
		return getLayerIconAccess().getRule();
	}
	
	//// TODO modified with respect to the modelica manual (comma and graphics optional)
	//LayerDiagram:
	//	{LayerDiagram} 'Diagram' '(' coordinateSystem=CoordinateSpecification? (',' graphics=Graphics)? ')';
	public LayerDiagramElements getLayerDiagramAccess() {
		return pLayerDiagram;
	}
	
	public ParserRule getLayerDiagramRule() {
		return getLayerDiagramAccess().getRule();
	}
	
	//CoordinateSpecification:
	//	'coordinateSystem' '(' args+=CoordinateSpecificationArgs (',' args+=CoordinateSpecificationArgs)* ')';
	public CoordinateSpecificationElements getCoordinateSpecificationAccess() {
		return pCoordinateSpecification;
	}
	
	public ParserRule getCoordinateSpecificationRule() {
		return getCoordinateSpecificationAccess().getRule();
	}
	
	//CoordinateSpecificationArgs:
	//	Extent | PreserveAR | InitialScale | Grid;
	public CoordinateSpecificationArgsElements getCoordinateSpecificationArgsAccess() {
		return pCoordinateSpecificationArgs;
	}
	
	public ParserRule getCoordinateSpecificationArgsRule() {
		return getCoordinateSpecificationArgsAccess().getRule();
	}
	
	//Extent:
	//	'extent' '=' '{' p1=Point ',' p2=Point '}';
	public ExtentElements getExtentAccess() {
		return pExtent;
	}
	
	public ParserRule getExtentRule() {
		return getExtentAccess().getRule();
	}
	
	//PreserveAR:
	//	'preserveAspectRatio' '=' value=('true' | 'false');
	public PreserveARElements getPreserveARAccess() {
		return pPreserveAR;
	}
	
	public ParserRule getPreserveARRule() {
		return getPreserveARAccess().getRule();
	}
	
	//InitialScale:
	//	'initialScale' '=' value=UNSIGNED_NUMBER;
	public InitialScaleElements getInitialScaleAccess() {
		return pInitialScale;
	}
	
	public ParserRule getInitialScaleRule() {
		return getInitialScaleAccess().getRule();
	}
	
	//Grid:
	//	'grid' '=' value=Point;
	public GridElements getGridAccess() {
		return pGrid;
	}
	
	public ParserRule getGridRule() {
		return getGridAccess().getRule();
	}
	
	//Placement:
	//	name='Placement' '(' args+=PlacementArg (',' args+=PlacementArg)* ')';
	public PlacementElements getPlacementAccess() {
		return pPlacement;
	}
	
	public ParserRule getPlacementRule() {
		return getPlacementAccess().getRule();
	}
	
	//PlacementArg:
	//	Visible | Transformation;
	public PlacementArgElements getPlacementArgAccess() {
		return pPlacementArg;
	}
	
	public ParserRule getPlacementArgRule() {
		return getPlacementArgAccess().getRule();
	}
	
	//Visible:
	//	'visible' '=' value=('true' | 'false');
	public VisibleElements getVisibleAccess() {
		return pVisible;
	}
	
	public ParserRule getVisibleRule() {
		return getVisibleAccess().getRule();
	}
	
	//Transformation:
	//	name=('transformation' | 'iconTransformation') '(' args+=TransformationArg (',' args+=TransformationArg)* ')';
	public TransformationElements getTransformationAccess() {
		return pTransformation;
	}
	
	public ParserRule getTransformationRule() {
		return getTransformationAccess().getRule();
	}
	
	//TransformationArg:
	//	Origin | Extent | Rotation;
	public TransformationArgElements getTransformationArgAccess() {
		return pTransformationArg;
	}
	
	public ParserRule getTransformationArgRule() {
		return getTransformationArgAccess().getRule();
	}
	
	//Rotation:
	//	name='rotation' '=' value=Expression;
	public RotationElements getRotationAccess() {
		return pRotation;
	}
	
	public ParserRule getRotationRule() {
		return getRotationAccess().getRule();
	}
	
	//Origin:
	//	'origin' '=' point=Point;
	public OriginElements getOriginAccess() {
		return pOrigin;
	}
	
	public ParserRule getOriginRule() {
		return getOriginAccess().getRule();
	}
	
	//Point:
	//	'{' x=num ',' y=num '}';
	public PointElements getPointAccess() {
		return pPoint;
	}
	
	public ParserRule getPointRule() {
		return getPointAccess().getRule();
	}
	
	//num ecore::EFloat:
	//	UNSIGNED_INTEGER | UNSIGNED_NUMBER
	public NumElements getNumAccess() {
		return pNum;
	}
	
	public ParserRule getNumRule() {
		return getNumAccess().getRule();
	}
	
	//Radius:
	//	'radius' '=' {Radius} UNSIGNED_INTEGER | {Radius} UNSIGNED_NUMBER;
	public RadiusElements getRadiusAccess() {
		return pRadius;
	}
	
	public ParserRule getRadiusRule() {
		return getRadiusAccess().getRule();
	}
	
	//Smooth:
	//	'smooth' '=' value=SmoothEnum;
	public SmoothElements getSmoothAccess() {
		return pSmooth;
	}
	
	public ParserRule getSmoothRule() {
		return getSmoothAccess().getRule();
	}
	
	//Color:
	//	('color' | 'lineColor' | 'fillColor') '=' '{' r=UNSIGNED_INTEGER ',' g=UNSIGNED_INTEGER ',' b=UNSIGNED_INTEGER '}';
	public ColorElements getColorAccess() {
		return pColor;
	}
	
	public ParserRule getColorRule() {
		return getColorAccess().getRule();
	}
	
	//Thickness:
	//	'thickness' '=' value=UNSIGNED_NUMBER;
	public ThicknessElements getThicknessAccess() {
		return pThickness;
	}
	
	public ParserRule getThicknessRule() {
		return getThicknessAccess().getRule();
	}
	
	//Graphics:
	//	'graphics' '=' '{' primitive+=GraphicalPrimitive (',' primitive+=GraphicalPrimitive)* '}';
	public GraphicsElements getGraphicsAccess() {
		return pGraphics;
	}
	
	public ParserRule getGraphicsRule() {
		return getGraphicsAccess().getRule();
	}
	
	//GraphicalPrimitive:
	//	Line | Polygon | Rectangle | Ellipse | Text | Bitmap;
	public GraphicalPrimitiveElements getGraphicalPrimitiveAccess() {
		return pGraphicalPrimitive;
	}
	
	public ParserRule getGraphicalPrimitiveRule() {
		return getGraphicalPrimitiveAccess().getRule();
	}
	
	//Line:
	//	name='Line' '(' args+=GraphicalPrimitiveArgs (',' args+=GraphicalPrimitiveArgs)* ')';
	public LineElements getLineAccess() {
		return pLine;
	}
	
	public ParserRule getLineRule() {
		return getLineAccess().getRule();
	}
	
	//Polygon:
	//	name='Polygon' '(' args+=GraphicalPrimitiveArgs (',' args+=GraphicalPrimitiveArgs)* ')';
	public PolygonElements getPolygonAccess() {
		return pPolygon;
	}
	
	public ParserRule getPolygonRule() {
		return getPolygonAccess().getRule();
	}
	
	//Rectangle:
	//	name='Rectangle' '(' args+=GraphicalPrimitiveArgs (',' args+=GraphicalPrimitiveArgs)* ')';
	public RectangleElements getRectangleAccess() {
		return pRectangle;
	}
	
	public ParserRule getRectangleRule() {
		return getRectangleAccess().getRule();
	}
	
	//Ellipse:
	//	name='Ellipse' '(' args+=GraphicalPrimitiveArgs (',' args+=GraphicalPrimitiveArgs)* ')';
	public EllipseElements getEllipseAccess() {
		return pEllipse;
	}
	
	public ParserRule getEllipseRule() {
		return getEllipseAccess().getRule();
	}
	
	//Text:
	//	name='Text' '(' args+=GraphicalPrimitiveArgs (',' args+=GraphicalPrimitiveArgs)* ')';
	public TextElements getTextAccess() {
		return pText;
	}
	
	public ParserRule getTextRule() {
		return getTextAccess().getRule();
	}
	
	//Bitmap:
	//	name='Bitmap' '(' args+=GraphicalPrimitiveArgs (',' args+=GraphicalPrimitiveArgs)* ')';
	public BitmapElements getBitmapAccess() {
		return pBitmap;
	}
	
	public ParserRule getBitmapRule() {
		return getBitmapAccess().getRule();
	}
	
	//GraphicalPrimitiveArgs:
	//	Visible | Origin | Extent | Color | Smooth | Thickness | Radius
	//	| 'points' '=' '{' points+=Point (',' points+=Point)* '}'
	//	| 'textString' '=' str=STRING
	//	| 'fileName' '=' fileName=STRING
	//	| 'imageSource' '=' imageSource=STRING
	//	| 'fillPattern' '=' fillPattern=FillPattern;
	public GraphicalPrimitiveArgsElements getGraphicalPrimitiveArgsAccess() {
		return pGraphicalPrimitiveArgs;
	}
	
	public ParserRule getGraphicalPrimitiveArgsRule() {
		return getGraphicalPrimitiveArgsAccess().getRule();
	}
	
	//Dialog:
	//	name='Dialog' '(' args+=DialogArg (',' args+=DialogArg)* ')';
	public DialogElements getDialogAccess() {
		return pDialog;
	}
	
	public ParserRule getDialogRule() {
		return getDialogAccess().getRule();
	}
	
	//DialogArg:
	//	Enable | Group | Tab;
	public DialogArgElements getDialogArgAccess() {
		return pDialogArg;
	}
	
	public ParserRule getDialogArgRule() {
		return getDialogArgAccess().getRule();
	}
	
	//Enable:
	//	'enable' '=' IDENT '==' value+=ComponentReference ('or' IDENT '==' value+=ComponentReference)*;
	public EnableElements getEnableAccess() {
		return pEnable;
	}
	
	public ParserRule getEnableRule() {
		return getEnableAccess().getRule();
	}
	
	//Group:
	//	'group' '=' value=STRING;
	public GroupElements getGroupAccess() {
		return pGroup;
	}
	
	public ParserRule getGroupRule() {
		return getGroupAccess().getRule();
	}
	
	//Tab:
	//	'tab' '=' value=STRING;
	public TabElements getTabAccess() {
		return pTab;
	}
	
	public ParserRule getTabRule() {
		return getTabAccess().getRule();
	}
	
	//AnnotationDocumentation:
	//	'Documentation' '(' 'info' '=' value=STRING ("," "revisions" "=" rev=STRING)? ')';
	public AnnotationDocumentationElements getAnnotationDocumentationAccess() {
		return pAnnotationDocumentation;
	}
	
	public ParserRule getAnnotationDocumentationRule() {
		return getAnnotationDocumentationAccess().getRule();
	}
	
	//AnnotationExperiment:
	//	{AnnotationExperiment} 'experiment' '(' (options+=ExperimentOption (',' options+=ExperimentOption)*)? ')';
	public AnnotationExperimentElements getAnnotationExperimentAccess() {
		return pAnnotationExperiment;
	}
	
	public ParserRule getAnnotationExperimentRule() {
		return getAnnotationExperimentAccess().getRule();
	}
	
	////(custom+=ParameterCustom ','?)*
	//ExperimentOption: //	StartTime | StopTime | Interval | Tolerance
	////;
	////StartTime:
	//	'StartTime' '=' ('+' | '-') start=UNSIGNED_NUMBER //;
	//	//StopTime:
	//	| 'StopTime' '=' ('+' | '-') stop=UNSIGNED_NUMBER //;
	//	//Interval:
	//	| 'Interval' '=' step=UNSIGNED_NUMBER //;
	//	//Tolerance:
	//	| 'Tolerance' '=' tol=UNSIGNED_NUMBER;
	public ExperimentOptionElements getExperimentOptionAccess() {
		return pExperimentOption;
	}
	
	public ParserRule getExperimentOptionRule() {
		return getExperimentOptionAccess().getRule();
	}
	
	//enum LinePattern:
	//	none='LinePattern.None'
	//	| solid='LinePattern.Solid'
	//	| dash='LinePattern.Dash'
	//	| dot='LinePattern.Dot'
	//	| dashdot='LinePattern.DashDot'
	//	| dashdotdot='LinePattern.DashDotDot';
	public LinePatternElements getLinePatternAccess() {
		return eLinePattern;
	}
	
	public EnumRule getLinePatternRule() {
		return getLinePatternAccess().getRule();
	}
	
	//enum FillPattern: //TODO add missing values
	//	none='FillPattern.None' | solid='FillPattern.Solid' | horizontal='FillPattern.Horizontal' |
	//	vertical='FillPattern.Vertical';
	public FillPatternElements getFillPatternAccess() {
		return eFillPattern;
	}
	
	public EnumRule getFillPatternRule() {
		return getFillPatternAccess().getRule();
	}
	
	//enum BorderPattern:
	//	none='BorderPattern.None'
	//	| raised='BorderPattern.Raised'
	//	| sunken='BorderPattern.Sunken'
	//	| engraved='BorderPattern.Engraved';
	public BorderPatternElements getBorderPatternAccess() {
		return eBorderPattern;
	}
	
	public EnumRule getBorderPatternRule() {
		return getBorderPatternAccess().getRule();
	}
	
	//enum SmoothEnum:
	//	none='Smooth.None'
	//	| bezier='Smooth.Bezier';
	public SmoothEnumElements getSmoothEnumAccess() {
		return eSmoothEnum;
	}
	
	public EnumRule getSmoothEnumRule() {
		return getSmoothEnumAccess().getRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal IDENT:
	//	('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDENTRule() {
		return tIDENT;
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal S_ESCAPE:
	//	' ' | '\b' | '\t' | '\n' | '\f' | '\r' | '\"' | '\'' | '\\';
	public TerminalRule getS_ESCAPERule() {
		return tS_ESCAPE;
	}
	
	//terminal UNSIGNED_INTEGER returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getUNSIGNED_INTEGERRule() {
		return tUNSIGNED_INTEGER;
	}
	
	//terminal UNSIGNED_NUMBER returns ecore::EDouble:
	//	('+' | '-')? UNSIGNED_INTEGER ('.' UNSIGNED_INTEGER?)? (('E' | 'e') ('+' | '-')? UNSIGNED_INTEGER)?;
	public TerminalRule getUNSIGNED_NUMBERRule() {
		return tUNSIGNED_NUMBER;
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	}
}
