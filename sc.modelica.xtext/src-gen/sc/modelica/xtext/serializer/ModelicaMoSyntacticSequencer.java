/*
 * generated by Xtext 2.10.0-SNAPSHOT
 */
package sc.modelica.xtext.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import sc.modelica.xtext.services.ModelicaMoGrammarAccess;

@SuppressWarnings("all")
public class ModelicaMoSyntacticSequencer extends AbstractSyntacticSequencer {

	protected ModelicaMoGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Assert___LevelKeyword_5_1_0_EqualsSignKeyword_5_1_1__q;
	protected AbstractElementAlias match_ClassPrefixes_ImpureKeyword_1_7_0_1_q;
	protected AbstractElementAlias match_Color_ColorKeyword_0_0_or_FillColorKeyword_0_2_or_LineColorKeyword_0_1;
	protected AbstractElementAlias match_ComponentReference_FullStopKeyword_1_q;
	protected AbstractElementAlias match_DerClassSpecifier___CommaKeyword_7_0_IDENTTerminalRuleCall_7_1__a;
	protected AbstractElementAlias match_Element_ReplaceableKeyword_2_4_q;
	protected AbstractElementAlias match_EquationIf_ElseKeyword_5_0_q;
	protected AbstractElementAlias match_ExperimentOption_HyphenMinusKeyword_0_2_1_or_PlusSignKeyword_0_2_0;
	protected AbstractElementAlias match_ExperimentOption_HyphenMinusKeyword_1_2_1_or_PlusSignKeyword_1_2_0;
	protected AbstractElementAlias match_Factor_CircumflexAccentKeyword_1_1_0_or_FullStopCircumflexAccentKeyword_1_1_1;
	protected AbstractElementAlias match_ImportClause___FullStopKeyword_1_1_1_0_AsteriskKeyword_1_1_1_1_0__q;
	protected AbstractElementAlias match_LogicalFactor_NotKeyword_0_q;
	protected AbstractElementAlias match_Name_FullStopKeyword_1_q;
	protected AbstractElementAlias match_OutputExpressionList_CommaKeyword_2_0_a;
	protected AbstractElementAlias match_OutputExpressionList_CommaKeyword_2_0_p;
	protected AbstractElementAlias match_Primary_DerKeyword_5_1_1_or_InitialKeyword_5_1_2;
	protected AbstractElementAlias match_Primary_EndKeyword_10_1_or_FalseKeyword_3_1_or_STRINGTerminalRuleCall_2_1_or_TrueKeyword_4_1_or_UNSIGNED_INTEGERTerminalRuleCall_0_1_or_UNSIGNED_NUMBERTerminalRuleCall_1_1;
	protected AbstractElementAlias match_Program___WithinKeyword_1_0_SemicolonKeyword_1_2__q;
	protected AbstractElementAlias match_Radius_UNSIGNED_NUMBERTerminalRuleCall_1_1_or___RadiusKeyword_0_0_EqualsSignKeyword_0_1_UNSIGNED_INTEGERTerminalRuleCall_0_3__;
	protected AbstractElementAlias match_ShortClassSpecifier_ColonKeyword_1_4_1_q;
	protected AbstractElementAlias match_StatementIf_ElseKeyword_5_0_q;
	protected AbstractElementAlias match_Statement_BreakKeyword_0_3_1_or_ReturnKeyword_0_2_1;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (ModelicaMoGrammarAccess) access;
		match_Assert___LevelKeyword_5_1_0_EqualsSignKeyword_5_1_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getAssertAccess().getLevelKeyword_5_1_0()), new TokenAlias(false, false, grammarAccess.getAssertAccess().getEqualsSignKeyword_5_1_1()));
		match_ClassPrefixes_ImpureKeyword_1_7_0_1_q = new TokenAlias(false, true, grammarAccess.getClassPrefixesAccess().getImpureKeyword_1_7_0_1());
		match_Color_ColorKeyword_0_0_or_FillColorKeyword_0_2_or_LineColorKeyword_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getColorAccess().getColorKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getColorAccess().getFillColorKeyword_0_2()), new TokenAlias(false, false, grammarAccess.getColorAccess().getLineColorKeyword_0_1()));
		match_ComponentReference_FullStopKeyword_1_q = new TokenAlias(false, true, grammarAccess.getComponentReferenceAccess().getFullStopKeyword_1());
		match_DerClassSpecifier___CommaKeyword_7_0_IDENTTerminalRuleCall_7_1__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getDerClassSpecifierAccess().getCommaKeyword_7_0()), new TokenAlias(false, false, grammarAccess.getDerClassSpecifierAccess().getIDENTTerminalRuleCall_7_1()));
		match_Element_ReplaceableKeyword_2_4_q = new TokenAlias(false, true, grammarAccess.getElementAccess().getReplaceableKeyword_2_4());
		match_EquationIf_ElseKeyword_5_0_q = new TokenAlias(false, true, grammarAccess.getEquationIfAccess().getElseKeyword_5_0());
		match_ExperimentOption_HyphenMinusKeyword_0_2_1_or_PlusSignKeyword_0_2_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getExperimentOptionAccess().getHyphenMinusKeyword_0_2_1()), new TokenAlias(false, false, grammarAccess.getExperimentOptionAccess().getPlusSignKeyword_0_2_0()));
		match_ExperimentOption_HyphenMinusKeyword_1_2_1_or_PlusSignKeyword_1_2_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getExperimentOptionAccess().getHyphenMinusKeyword_1_2_1()), new TokenAlias(false, false, grammarAccess.getExperimentOptionAccess().getPlusSignKeyword_1_2_0()));
		match_Factor_CircumflexAccentKeyword_1_1_0_or_FullStopCircumflexAccentKeyword_1_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getFactorAccess().getCircumflexAccentKeyword_1_1_0()), new TokenAlias(false, false, grammarAccess.getFactorAccess().getFullStopCircumflexAccentKeyword_1_1_1()));
		match_ImportClause___FullStopKeyword_1_1_1_0_AsteriskKeyword_1_1_1_1_0__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getImportClauseAccess().getFullStopKeyword_1_1_1_0()), new TokenAlias(false, false, grammarAccess.getImportClauseAccess().getAsteriskKeyword_1_1_1_1_0()));
		match_LogicalFactor_NotKeyword_0_q = new TokenAlias(false, true, grammarAccess.getLogicalFactorAccess().getNotKeyword_0());
		match_Name_FullStopKeyword_1_q = new TokenAlias(false, true, grammarAccess.getNameAccess().getFullStopKeyword_1());
		match_OutputExpressionList_CommaKeyword_2_0_a = new TokenAlias(true, true, grammarAccess.getOutputExpressionListAccess().getCommaKeyword_2_0());
		match_OutputExpressionList_CommaKeyword_2_0_p = new TokenAlias(true, false, grammarAccess.getOutputExpressionListAccess().getCommaKeyword_2_0());
		match_Primary_DerKeyword_5_1_1_or_InitialKeyword_5_1_2 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getPrimaryAccess().getDerKeyword_5_1_1()), new TokenAlias(false, false, grammarAccess.getPrimaryAccess().getInitialKeyword_5_1_2()));
		match_Primary_EndKeyword_10_1_or_FalseKeyword_3_1_or_STRINGTerminalRuleCall_2_1_or_TrueKeyword_4_1_or_UNSIGNED_INTEGERTerminalRuleCall_0_1_or_UNSIGNED_NUMBERTerminalRuleCall_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getPrimaryAccess().getEndKeyword_10_1()), new TokenAlias(false, false, grammarAccess.getPrimaryAccess().getFalseKeyword_3_1()), new TokenAlias(false, false, grammarAccess.getPrimaryAccess().getSTRINGTerminalRuleCall_2_1()), new TokenAlias(false, false, grammarAccess.getPrimaryAccess().getTrueKeyword_4_1()), new TokenAlias(false, false, grammarAccess.getPrimaryAccess().getUNSIGNED_INTEGERTerminalRuleCall_0_1()), new TokenAlias(false, false, grammarAccess.getPrimaryAccess().getUNSIGNED_NUMBERTerminalRuleCall_1_1()));
		match_Program___WithinKeyword_1_0_SemicolonKeyword_1_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getProgramAccess().getWithinKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getProgramAccess().getSemicolonKeyword_1_2()));
		match_Radius_UNSIGNED_NUMBERTerminalRuleCall_1_1_or___RadiusKeyword_0_0_EqualsSignKeyword_0_1_UNSIGNED_INTEGERTerminalRuleCall_0_3__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getRadiusAccess().getRadiusKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getRadiusAccess().getEqualsSignKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getRadiusAccess().getUNSIGNED_INTEGERTerminalRuleCall_0_3())), new TokenAlias(false, false, grammarAccess.getRadiusAccess().getUNSIGNED_NUMBERTerminalRuleCall_1_1()));
		match_ShortClassSpecifier_ColonKeyword_1_4_1_q = new TokenAlias(false, true, grammarAccess.getShortClassSpecifierAccess().getColonKeyword_1_4_1());
		match_StatementIf_ElseKeyword_5_0_q = new TokenAlias(false, true, grammarAccess.getStatementIfAccess().getElseKeyword_5_0());
		match_Statement_BreakKeyword_0_3_1_or_ReturnKeyword_0_2_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getStatementAccess().getBreakKeyword_0_3_1()), new TokenAlias(false, false, grammarAccess.getStatementAccess().getReturnKeyword_0_2_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getAddOpRule())
			return getAddOpToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getIDENTRule())
			return getIDENTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getMulOpRule())
			return getMulOpToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getRelOpRule())
			return getRelOpToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSTRINGRule())
			return getSTRINGToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getUNSIGNED_INTEGERRule())
			return getUNSIGNED_INTEGERToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getUNSIGNED_NUMBERRule())
			return getUNSIGNED_NUMBERToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * AddOp: 
	 * 	'+'|'-'|'.+'|'.-'
	 * ;
	 */
	protected String getAddOpToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "+";
	}
	
	/**
	 * terminal IDENT 	: ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	 */
	protected String getIDENTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * MulOp: 
	 * 	'*'|'/'|'.*'|'./'
	 * ;
	 */
	protected String getMulOpToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "*";
	}
	
	/**
	 * RelOp: 
	 * 	'>'|'>='|'<'|'<='|'=='|'<>'
	 * ;
	 */
	protected String getRelOpToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ">";
	}
	
	/**
	 * terminal STRING	: '"' ( '\\' .  | !('\\'|'"') )* '"';
	 */
	protected String getSTRINGToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\"\"";
	}
	
	/**
	 * terminal UNSIGNED_INTEGER returns ecore::EInt: ('0'..'9')+;
	 */
	protected String getUNSIGNED_INTEGERToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * terminal UNSIGNED_NUMBER returns ecore::EDouble:
	 * 	 ('+'|'-')? UNSIGNED_INTEGER ('.' UNSIGNED_INTEGER?)? (('E'|'e')('+'|'-')? UNSIGNED_INTEGER)?
	 * ;
	 */
	protected String getUNSIGNED_NUMBERToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Assert___LevelKeyword_5_1_0_EqualsSignKeyword_5_1_1__q.equals(syntax))
				emit_Assert___LevelKeyword_5_1_0_EqualsSignKeyword_5_1_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ClassPrefixes_ImpureKeyword_1_7_0_1_q.equals(syntax))
				emit_ClassPrefixes_ImpureKeyword_1_7_0_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Color_ColorKeyword_0_0_or_FillColorKeyword_0_2_or_LineColorKeyword_0_1.equals(syntax))
				emit_Color_ColorKeyword_0_0_or_FillColorKeyword_0_2_or_LineColorKeyword_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ComponentReference_FullStopKeyword_1_q.equals(syntax))
				emit_ComponentReference_FullStopKeyword_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DerClassSpecifier___CommaKeyword_7_0_IDENTTerminalRuleCall_7_1__a.equals(syntax))
				emit_DerClassSpecifier___CommaKeyword_7_0_IDENTTerminalRuleCall_7_1__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Element_ReplaceableKeyword_2_4_q.equals(syntax))
				emit_Element_ReplaceableKeyword_2_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_EquationIf_ElseKeyword_5_0_q.equals(syntax))
				emit_EquationIf_ElseKeyword_5_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ExperimentOption_HyphenMinusKeyword_0_2_1_or_PlusSignKeyword_0_2_0.equals(syntax))
				emit_ExperimentOption_HyphenMinusKeyword_0_2_1_or_PlusSignKeyword_0_2_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ExperimentOption_HyphenMinusKeyword_1_2_1_or_PlusSignKeyword_1_2_0.equals(syntax))
				emit_ExperimentOption_HyphenMinusKeyword_1_2_1_or_PlusSignKeyword_1_2_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Factor_CircumflexAccentKeyword_1_1_0_or_FullStopCircumflexAccentKeyword_1_1_1.equals(syntax))
				emit_Factor_CircumflexAccentKeyword_1_1_0_or_FullStopCircumflexAccentKeyword_1_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ImportClause___FullStopKeyword_1_1_1_0_AsteriskKeyword_1_1_1_1_0__q.equals(syntax))
				emit_ImportClause___FullStopKeyword_1_1_1_0_AsteriskKeyword_1_1_1_1_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_LogicalFactor_NotKeyword_0_q.equals(syntax))
				emit_LogicalFactor_NotKeyword_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Name_FullStopKeyword_1_q.equals(syntax))
				emit_Name_FullStopKeyword_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OutputExpressionList_CommaKeyword_2_0_a.equals(syntax))
				emit_OutputExpressionList_CommaKeyword_2_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OutputExpressionList_CommaKeyword_2_0_p.equals(syntax))
				emit_OutputExpressionList_CommaKeyword_2_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Primary_DerKeyword_5_1_1_or_InitialKeyword_5_1_2.equals(syntax))
				emit_Primary_DerKeyword_5_1_1_or_InitialKeyword_5_1_2(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Primary_EndKeyword_10_1_or_FalseKeyword_3_1_or_STRINGTerminalRuleCall_2_1_or_TrueKeyword_4_1_or_UNSIGNED_INTEGERTerminalRuleCall_0_1_or_UNSIGNED_NUMBERTerminalRuleCall_1_1.equals(syntax))
				emit_Primary_EndKeyword_10_1_or_FalseKeyword_3_1_or_STRINGTerminalRuleCall_2_1_or_TrueKeyword_4_1_or_UNSIGNED_INTEGERTerminalRuleCall_0_1_or_UNSIGNED_NUMBERTerminalRuleCall_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Program___WithinKeyword_1_0_SemicolonKeyword_1_2__q.equals(syntax))
				emit_Program___WithinKeyword_1_0_SemicolonKeyword_1_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Radius_UNSIGNED_NUMBERTerminalRuleCall_1_1_or___RadiusKeyword_0_0_EqualsSignKeyword_0_1_UNSIGNED_INTEGERTerminalRuleCall_0_3__.equals(syntax))
				emit_Radius_UNSIGNED_NUMBERTerminalRuleCall_1_1_or___RadiusKeyword_0_0_EqualsSignKeyword_0_1_UNSIGNED_INTEGERTerminalRuleCall_0_3__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ShortClassSpecifier_ColonKeyword_1_4_1_q.equals(syntax))
				emit_ShortClassSpecifier_ColonKeyword_1_4_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_StatementIf_ElseKeyword_5_0_q.equals(syntax))
				emit_StatementIf_ElseKeyword_5_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Statement_BreakKeyword_0_3_1_or_ReturnKeyword_0_2_1.equals(syntax))
				emit_Statement_BreakKeyword_0_3_1_or_ReturnKeyword_0_2_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ('level' '=')?
	 *
	 * This ambiguous syntax occurs at:
	 *     message=Expression ',' (ambiguity) level=AssertionLevel
	 */
	protected void emit_Assert___LevelKeyword_5_1_0_EqualsSignKeyword_5_1_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'impure'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) function?='function'
	 *     (rule start) (ambiguity) operator?='operator'
	 *     partial?='partial' (ambiguity) function?='function'
	 *     partial?='partial' (ambiguity) operator?='operator'
	 */
	protected void emit_ClassPrefixes_ImpureKeyword_1_7_0_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'color' | 'lineColor' | 'fillColor'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '=' '{' r=UNSIGNED_INTEGER
	 */
	protected void emit_Color_ColorKeyword_0_0_or_FillColorKeyword_0_2_or_LineColorKeyword_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '.'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'not'? (ambiguity) IDENT '.' id+=IDENT
	 *     (rule start) 'not'? (ambiguity) IDENT (rule start)
	 *     (rule start) 'not'? (ambiguity) IDENT subs+=ArraySubscripts
	 *     (rule start) (ambiguity) IDENT '.' id+=IDENT
	 *     (rule start) (ambiguity) IDENT (rule start)
	 *     (rule start) (ambiguity) IDENT subs+=ArraySubscripts
	 */
	protected void emit_ComponentReference_FullStopKeyword_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (',' IDENT)*
	 *
	 * This ambiguous syntax occurs at:
	 *     name=Name ',' IDENT (ambiguity) ')' (rule end)
	 *     name=Name ',' IDENT (ambiguity) ')' comment=Comment
	 */
	protected void emit_DerClassSpecifier___CommaKeyword_7_0_IDENTTerminalRuleCall_7_1__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'replaceable'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) class=ClassDefinition
	 *     (rule start) (ambiguity) comp=ComponentClause
	 *     final?='final' (ambiguity) class=ClassDefinition
	 *     final?='final' (ambiguity) comp=ComponentClause
	 *     inner?='inner' (ambiguity) class=ClassDefinition
	 *     inner?='inner' (ambiguity) comp=ComponentClause
	 *     outer?='outer' (ambiguity) class=ClassDefinition
	 *     outer?='outer' (ambiguity) comp=ComponentClause
	 *     redeclare?='redeclare' (ambiguity) class=ClassDefinition
	 *     redeclare?='redeclare' (ambiguity) comp=ComponentClause
	 */
	protected void emit_Element_ReplaceableKeyword_2_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'else'?
	 *
	 * This ambiguous syntax occurs at:
	 *     elseIfEqs+=Equation ';' (ambiguity) 'end' 'if' (rule end)
	 *     elseIfEqs+=Equation ';' (ambiguity) 'end' 'if' comm=Comment
	 *     elseifExp+=Expression 'then' (ambiguity) 'end' 'if' (rule end)
	 *     elseifExp+=Expression 'then' (ambiguity) 'end' 'if' comm=Comment
	 *     ifEqs+=Equation ';' (ambiguity) 'end' 'if' (rule end)
	 *     ifEqs+=Equation ';' (ambiguity) 'end' 'if' comm=Comment
	 *     ifExp=Expression 'then' (ambiguity) 'end' 'if' (rule end)
	 *     ifExp=Expression 'then' (ambiguity) 'end' 'if' comm=Comment
	 */
	protected void emit_EquationIf_ElseKeyword_5_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '+' | '-'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'StartTime' '=' (ambiguity) start=UNSIGNED_NUMBER
	 */
	protected void emit_ExperimentOption_HyphenMinusKeyword_0_2_1_or_PlusSignKeyword_0_2_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '+' | '-'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'StopTime' '=' (ambiguity) stop=UNSIGNED_NUMBER
	 */
	protected void emit_ExperimentOption_HyphenMinusKeyword_1_2_1_or_PlusSignKeyword_1_2_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '^' | '.^'
	 *
	 * This ambiguous syntax occurs at:
	 *     {Factor.left=} (ambiguity) right=Primary
	 */
	protected void emit_Factor_CircumflexAccentKeyword_1_1_0_or_FullStopCircumflexAccentKeyword_1_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('.' '*')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=Name (ambiguity) (rule end)
	 *     name=Name (ambiguity) comment=Comment
	 */
	protected void emit_ImportClause___FullStopKeyword_1_1_1_0_AsteriskKeyword_1_1_1_1_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'not'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '(' ','* ')' (rule start)
	 *     (rule start) (ambiguity) '(' ','+ expressions+=Expression
	 *     (rule start) (ambiguity) '(' expressions+=Expression
	 *     (rule start) (ambiguity) '.'? IDENT '.' id+=IDENT
	 *     (rule start) (ambiguity) '.'? IDENT (rule start)
	 *     (rule start) (ambiguity) '.'? IDENT subs+=ArraySubscripts
	 *     (rule start) (ambiguity) '[' list+=ExprExpressionList
	 *     (rule start) (ambiguity) '{' fa=FunctionArguments
	 *     (rule start) (ambiguity) ('der' | 'initial') fca=FunctionCallArgs
	 *     (rule start) (ambiguity) (UNSIGNED_INTEGER | UNSIGNED_NUMBER | STRING | 'false' | 'true' | 'end') (rule start)
	 *     (rule start) (ambiguity) AddOp exp=Term
	 *     (rule start) (ambiguity) name=Name
	 *     (rule start) (ambiguity) {ArithmeticExpression.left=}
	 *     (rule start) (ambiguity) {Factor.left=}
	 *     (rule start) (ambiguity) {Relation.left=}
	 *     (rule start) (ambiguity) {Term.left=}
	 */
	protected void emit_LogicalFactor_NotKeyword_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '.'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) IDENT '.' id+=IDENT
	 *     (rule start) (ambiguity) IDENT (rule start)
	 */
	protected void emit_Name_FullStopKeyword_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '(' (ambiguity) ')' (rule start)
	 *     (rule start) 'not'? '(' (ambiguity) ')' (rule start)
	 *     (rule start) (ambiguity) (rule start)
	 *     expressions+=Expression (ambiguity) ')' (rule end)
	 *     expressions+=Expression (ambiguity) (rule end)
	 */
	protected void emit_OutputExpressionList_CommaKeyword_2_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '(' (ambiguity) expressions+=Expression
	 *     (rule start) 'not'? '(' (ambiguity) expressions+=Expression
	 *     (rule start) (ambiguity) expressions+=Expression
	 *     expressions+=Expression (ambiguity) expressions+=Expression
	 */
	protected void emit_OutputExpressionList_CommaKeyword_2_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'der' | 'initial'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'not'? (ambiguity) fca=FunctionCallArgs
	 *     (rule start) (ambiguity) fca=FunctionCallArgs
	 */
	protected void emit_Primary_DerKeyword_5_1_1_or_InitialKeyword_5_1_2(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (
	  *         UNSIGNED_INTEGER | 
	  *         UNSIGNED_NUMBER | 
	  *         STRING | 
	  *         'false' | 
	  *         'true' | 
	  *         'end'
	  *     )
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'not'? (ambiguity) (rule start)
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_Primary_EndKeyword_10_1_or_FalseKeyword_3_1_or_STRINGTerminalRuleCall_2_1_or_TrueKeyword_4_1_or_UNSIGNED_INTEGERTerminalRuleCall_0_1_or_UNSIGNED_NUMBERTerminalRuleCall_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('within' ';')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 *     (rule start) (ambiguity) classes+=ClassDefinition
	 */
	protected void emit_Program___WithinKeyword_1_0_SemicolonKeyword_1_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('radius' '=' UNSIGNED_INTEGER) | UNSIGNED_NUMBER
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_Radius_UNSIGNED_NUMBERTerminalRuleCall_1_1_or___RadiusKeyword_0_0_EqualsSignKeyword_0_1_UNSIGNED_INTEGERTerminalRuleCall_0_3__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ':'?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=IDENT '=' 'enumeration' '(' (ambiguity) ')' (rule end)
	 *     name=IDENT '=' 'enumeration' '(' (ambiguity) ')' comment=Comment
	 */
	protected void emit_ShortClassSpecifier_ColonKeyword_1_4_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'else'?
	 *
	 * This ambiguous syntax occurs at:
	 *     elseIfEqs+=Statement ';' (ambiguity) 'end' 'if' (rule end)
	 *     elseIfEqs+=Statement ';' (ambiguity) 'end' 'if' comm=Comment
	 *     elseifExp+=Expression 'then' (ambiguity) 'end' 'if' (rule end)
	 *     elseifExp+=Expression 'then' (ambiguity) 'end' 'if' comm=Comment
	 *     ifEqs+=Statement ';' (ambiguity) 'end' 'if' (rule end)
	 *     ifEqs+=Statement ';' (ambiguity) 'end' 'if' comm=Comment
	 *     ifExp=Expression 'then' (ambiguity) 'end' 'if' (rule end)
	 *     ifExp=Expression 'then' (ambiguity) 'end' 'if' comm=Comment
	 */
	protected void emit_StatementIf_ElseKeyword_5_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'return' | 'break'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) comm=Comment
	 */
	protected void emit_Statement_BreakKeyword_0_3_1_or_ReturnKeyword_0_2_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
