/**
 * generated by Xtext 2.10.0-SNAPSHOT
 */
package sc.modelica.xtext.modelicaMo.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import sc.modelica.xtext.modelicaMo.Comment;
import sc.modelica.xtext.modelicaMo.Equation;
import sc.modelica.xtext.modelicaMo.EquationWhen;
import sc.modelica.xtext.modelicaMo.Expression;
import sc.modelica.xtext.modelicaMo.ModelicaMoPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Equation When</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link sc.modelica.xtext.modelicaMo.impl.EquationWhenImpl#getComm <em>Comm</em>}</li>
 *   <li>{@link sc.modelica.xtext.modelicaMo.impl.EquationWhenImpl#getWhenExp <em>When Exp</em>}</li>
 *   <li>{@link sc.modelica.xtext.modelicaMo.impl.EquationWhenImpl#getWhenEquations <em>When Equations</em>}</li>
 *   <li>{@link sc.modelica.xtext.modelicaMo.impl.EquationWhenImpl#getExp <em>Exp</em>}</li>
 *   <li>{@link sc.modelica.xtext.modelicaMo.impl.EquationWhenImpl#getEquationItem <em>Equation Item</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EquationWhenImpl extends EquationImpl implements EquationWhen
{
  /**
   * The cached value of the '{@link #getComm() <em>Comm</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComm()
   * @generated
   * @ordered
   */
  protected Comment comm;

  /**
   * The cached value of the '{@link #getWhenExp() <em>When Exp</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWhenExp()
   * @generated
   * @ordered
   */
  protected Expression whenExp;

  /**
   * The cached value of the '{@link #getWhenEquations() <em>When Equations</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWhenEquations()
   * @generated
   * @ordered
   */
  protected EList<Equation> whenEquations;

  /**
   * The cached value of the '{@link #getExp() <em>Exp</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExp()
   * @generated
   * @ordered
   */
  protected EList<Expression> exp;

  /**
   * The cached value of the '{@link #getEquationItem() <em>Equation Item</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEquationItem()
   * @generated
   * @ordered
   */
  protected EList<Equation> equationItem;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EquationWhenImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ModelicaMoPackage.Literals.EQUATION_WHEN;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Comment getComm()
  {
    return comm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetComm(Comment newComm, NotificationChain msgs)
  {
    Comment oldComm = comm;
    comm = newComm;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ModelicaMoPackage.EQUATION_WHEN__COMM, oldComm, newComm);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setComm(Comment newComm)
  {
    if (newComm != comm)
    {
      NotificationChain msgs = null;
      if (comm != null)
        msgs = ((InternalEObject)comm).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ModelicaMoPackage.EQUATION_WHEN__COMM, null, msgs);
      if (newComm != null)
        msgs = ((InternalEObject)newComm).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ModelicaMoPackage.EQUATION_WHEN__COMM, null, msgs);
      msgs = basicSetComm(newComm, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ModelicaMoPackage.EQUATION_WHEN__COMM, newComm, newComm));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getWhenExp()
  {
    return whenExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetWhenExp(Expression newWhenExp, NotificationChain msgs)
  {
    Expression oldWhenExp = whenExp;
    whenExp = newWhenExp;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ModelicaMoPackage.EQUATION_WHEN__WHEN_EXP, oldWhenExp, newWhenExp);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setWhenExp(Expression newWhenExp)
  {
    if (newWhenExp != whenExp)
    {
      NotificationChain msgs = null;
      if (whenExp != null)
        msgs = ((InternalEObject)whenExp).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ModelicaMoPackage.EQUATION_WHEN__WHEN_EXP, null, msgs);
      if (newWhenExp != null)
        msgs = ((InternalEObject)newWhenExp).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ModelicaMoPackage.EQUATION_WHEN__WHEN_EXP, null, msgs);
      msgs = basicSetWhenExp(newWhenExp, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ModelicaMoPackage.EQUATION_WHEN__WHEN_EXP, newWhenExp, newWhenExp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Equation> getWhenEquations()
  {
    if (whenEquations == null)
    {
      whenEquations = new EObjectContainmentEList<Equation>(Equation.class, this, ModelicaMoPackage.EQUATION_WHEN__WHEN_EQUATIONS);
    }
    return whenEquations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Expression> getExp()
  {
    if (exp == null)
    {
      exp = new EObjectContainmentEList<Expression>(Expression.class, this, ModelicaMoPackage.EQUATION_WHEN__EXP);
    }
    return exp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Equation> getEquationItem()
  {
    if (equationItem == null)
    {
      equationItem = new EObjectContainmentEList<Equation>(Equation.class, this, ModelicaMoPackage.EQUATION_WHEN__EQUATION_ITEM);
    }
    return equationItem;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ModelicaMoPackage.EQUATION_WHEN__COMM:
        return basicSetComm(null, msgs);
      case ModelicaMoPackage.EQUATION_WHEN__WHEN_EXP:
        return basicSetWhenExp(null, msgs);
      case ModelicaMoPackage.EQUATION_WHEN__WHEN_EQUATIONS:
        return ((InternalEList<?>)getWhenEquations()).basicRemove(otherEnd, msgs);
      case ModelicaMoPackage.EQUATION_WHEN__EXP:
        return ((InternalEList<?>)getExp()).basicRemove(otherEnd, msgs);
      case ModelicaMoPackage.EQUATION_WHEN__EQUATION_ITEM:
        return ((InternalEList<?>)getEquationItem()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ModelicaMoPackage.EQUATION_WHEN__COMM:
        return getComm();
      case ModelicaMoPackage.EQUATION_WHEN__WHEN_EXP:
        return getWhenExp();
      case ModelicaMoPackage.EQUATION_WHEN__WHEN_EQUATIONS:
        return getWhenEquations();
      case ModelicaMoPackage.EQUATION_WHEN__EXP:
        return getExp();
      case ModelicaMoPackage.EQUATION_WHEN__EQUATION_ITEM:
        return getEquationItem();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ModelicaMoPackage.EQUATION_WHEN__COMM:
        setComm((Comment)newValue);
        return;
      case ModelicaMoPackage.EQUATION_WHEN__WHEN_EXP:
        setWhenExp((Expression)newValue);
        return;
      case ModelicaMoPackage.EQUATION_WHEN__WHEN_EQUATIONS:
        getWhenEquations().clear();
        getWhenEquations().addAll((Collection<? extends Equation>)newValue);
        return;
      case ModelicaMoPackage.EQUATION_WHEN__EXP:
        getExp().clear();
        getExp().addAll((Collection<? extends Expression>)newValue);
        return;
      case ModelicaMoPackage.EQUATION_WHEN__EQUATION_ITEM:
        getEquationItem().clear();
        getEquationItem().addAll((Collection<? extends Equation>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ModelicaMoPackage.EQUATION_WHEN__COMM:
        setComm((Comment)null);
        return;
      case ModelicaMoPackage.EQUATION_WHEN__WHEN_EXP:
        setWhenExp((Expression)null);
        return;
      case ModelicaMoPackage.EQUATION_WHEN__WHEN_EQUATIONS:
        getWhenEquations().clear();
        return;
      case ModelicaMoPackage.EQUATION_WHEN__EXP:
        getExp().clear();
        return;
      case ModelicaMoPackage.EQUATION_WHEN__EQUATION_ITEM:
        getEquationItem().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ModelicaMoPackage.EQUATION_WHEN__COMM:
        return comm != null;
      case ModelicaMoPackage.EQUATION_WHEN__WHEN_EXP:
        return whenExp != null;
      case ModelicaMoPackage.EQUATION_WHEN__WHEN_EQUATIONS:
        return whenEquations != null && !whenEquations.isEmpty();
      case ModelicaMoPackage.EQUATION_WHEN__EXP:
        return exp != null && !exp.isEmpty();
      case ModelicaMoPackage.EQUATION_WHEN__EQUATION_ITEM:
        return equationItem != null && !equationItem.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //EquationWhenImpl
