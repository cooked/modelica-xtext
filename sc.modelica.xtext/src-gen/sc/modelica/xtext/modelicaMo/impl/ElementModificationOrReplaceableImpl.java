/**
 * generated by Xtext 2.10.0-SNAPSHOT
 */
package sc.modelica.xtext.modelicaMo.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import sc.modelica.xtext.modelicaMo.ElementModificationOrReplaceable;
import sc.modelica.xtext.modelicaMo.ModelicaMoPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Element Modification Or Replaceable</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link sc.modelica.xtext.modelicaMo.impl.ElementModificationOrReplaceableImpl#getElementModOrRep <em>Element Mod Or Rep</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ElementModificationOrReplaceableImpl extends ArgumentImpl implements ElementModificationOrReplaceable
{
  /**
   * The cached value of the '{@link #getElementModOrRep() <em>Element Mod Or Rep</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getElementModOrRep()
   * @generated
   * @ordered
   */
  protected EObject elementModOrRep;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ElementModificationOrReplaceableImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ModelicaMoPackage.Literals.ELEMENT_MODIFICATION_OR_REPLACEABLE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EObject getElementModOrRep()
  {
    return elementModOrRep;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetElementModOrRep(EObject newElementModOrRep, NotificationChain msgs)
  {
    EObject oldElementModOrRep = elementModOrRep;
    elementModOrRep = newElementModOrRep;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ModelicaMoPackage.ELEMENT_MODIFICATION_OR_REPLACEABLE__ELEMENT_MOD_OR_REP, oldElementModOrRep, newElementModOrRep);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setElementModOrRep(EObject newElementModOrRep)
  {
    if (newElementModOrRep != elementModOrRep)
    {
      NotificationChain msgs = null;
      if (elementModOrRep != null)
        msgs = ((InternalEObject)elementModOrRep).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ModelicaMoPackage.ELEMENT_MODIFICATION_OR_REPLACEABLE__ELEMENT_MOD_OR_REP, null, msgs);
      if (newElementModOrRep != null)
        msgs = ((InternalEObject)newElementModOrRep).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ModelicaMoPackage.ELEMENT_MODIFICATION_OR_REPLACEABLE__ELEMENT_MOD_OR_REP, null, msgs);
      msgs = basicSetElementModOrRep(newElementModOrRep, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ModelicaMoPackage.ELEMENT_MODIFICATION_OR_REPLACEABLE__ELEMENT_MOD_OR_REP, newElementModOrRep, newElementModOrRep));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ModelicaMoPackage.ELEMENT_MODIFICATION_OR_REPLACEABLE__ELEMENT_MOD_OR_REP:
        return basicSetElementModOrRep(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ModelicaMoPackage.ELEMENT_MODIFICATION_OR_REPLACEABLE__ELEMENT_MOD_OR_REP:
        return getElementModOrRep();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ModelicaMoPackage.ELEMENT_MODIFICATION_OR_REPLACEABLE__ELEMENT_MOD_OR_REP:
        setElementModOrRep((EObject)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ModelicaMoPackage.ELEMENT_MODIFICATION_OR_REPLACEABLE__ELEMENT_MOD_OR_REP:
        setElementModOrRep((EObject)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ModelicaMoPackage.ELEMENT_MODIFICATION_OR_REPLACEABLE__ELEMENT_MOD_OR_REP:
        return elementModOrRep != null;
    }
    return super.eIsSet(featureID);
  }

} //ElementModificationOrReplaceableImpl
