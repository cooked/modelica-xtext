/**
 * generated by Xtext 2.10.0-SNAPSHOT
 */
package sc.modelica.xtext.modelicaMo.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import sc.modelica.xtext.modelicaMo.ForIndices;
import sc.modelica.xtext.modelicaMo.ModelicaMoPackage;
import sc.modelica.xtext.modelicaMo.Statement;
import sc.modelica.xtext.modelicaMo.StatementFor;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Statement For</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link sc.modelica.xtext.modelicaMo.impl.StatementForImpl#getIterators <em>Iterators</em>}</li>
 *   <li>{@link sc.modelica.xtext.modelicaMo.impl.StatementForImpl#getForEqs <em>For Eqs</em>}</li>
 * </ul>
 *
 * @generated
 */
public class StatementForImpl extends StatementImpl implements StatementFor
{
  /**
   * The cached value of the '{@link #getIterators() <em>Iterators</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIterators()
   * @generated
   * @ordered
   */
  protected ForIndices iterators;

  /**
   * The cached value of the '{@link #getForEqs() <em>For Eqs</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getForEqs()
   * @generated
   * @ordered
   */
  protected EList<Statement> forEqs;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected StatementForImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ModelicaMoPackage.Literals.STATEMENT_FOR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ForIndices getIterators()
  {
    return iterators;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetIterators(ForIndices newIterators, NotificationChain msgs)
  {
    ForIndices oldIterators = iterators;
    iterators = newIterators;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ModelicaMoPackage.STATEMENT_FOR__ITERATORS, oldIterators, newIterators);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIterators(ForIndices newIterators)
  {
    if (newIterators != iterators)
    {
      NotificationChain msgs = null;
      if (iterators != null)
        msgs = ((InternalEObject)iterators).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ModelicaMoPackage.STATEMENT_FOR__ITERATORS, null, msgs);
      if (newIterators != null)
        msgs = ((InternalEObject)newIterators).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ModelicaMoPackage.STATEMENT_FOR__ITERATORS, null, msgs);
      msgs = basicSetIterators(newIterators, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ModelicaMoPackage.STATEMENT_FOR__ITERATORS, newIterators, newIterators));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Statement> getForEqs()
  {
    if (forEqs == null)
    {
      forEqs = new EObjectContainmentEList<Statement>(Statement.class, this, ModelicaMoPackage.STATEMENT_FOR__FOR_EQS);
    }
    return forEqs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ModelicaMoPackage.STATEMENT_FOR__ITERATORS:
        return basicSetIterators(null, msgs);
      case ModelicaMoPackage.STATEMENT_FOR__FOR_EQS:
        return ((InternalEList<?>)getForEqs()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ModelicaMoPackage.STATEMENT_FOR__ITERATORS:
        return getIterators();
      case ModelicaMoPackage.STATEMENT_FOR__FOR_EQS:
        return getForEqs();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ModelicaMoPackage.STATEMENT_FOR__ITERATORS:
        setIterators((ForIndices)newValue);
        return;
      case ModelicaMoPackage.STATEMENT_FOR__FOR_EQS:
        getForEqs().clear();
        getForEqs().addAll((Collection<? extends Statement>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ModelicaMoPackage.STATEMENT_FOR__ITERATORS:
        setIterators((ForIndices)null);
        return;
      case ModelicaMoPackage.STATEMENT_FOR__FOR_EQS:
        getForEqs().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ModelicaMoPackage.STATEMENT_FOR__ITERATORS:
        return iterators != null;
      case ModelicaMoPackage.STATEMENT_FOR__FOR_EQS:
        return forEqs != null && !forEqs.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //StatementForImpl
