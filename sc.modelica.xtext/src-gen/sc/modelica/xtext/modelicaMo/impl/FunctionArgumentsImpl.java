/**
 * generated by Xtext 2.10.0-SNAPSHOT
 */
package sc.modelica.xtext.modelicaMo.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import sc.modelica.xtext.modelicaMo.ForIndices;
import sc.modelica.xtext.modelicaMo.FunctionArgument;
import sc.modelica.xtext.modelicaMo.FunctionArguments;
import sc.modelica.xtext.modelicaMo.ModelicaMoPackage;
import sc.modelica.xtext.modelicaMo.NamedArguments;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Function Arguments</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link sc.modelica.xtext.modelicaMo.impl.FunctionArgumentsImpl#getFunctionArgument <em>Function Argument</em>}</li>
 *   <li>{@link sc.modelica.xtext.modelicaMo.impl.FunctionArgumentsImpl#getArgs <em>Args</em>}</li>
 *   <li>{@link sc.modelica.xtext.modelicaMo.impl.FunctionArgumentsImpl#getForIndices <em>For Indices</em>}</li>
 *   <li>{@link sc.modelica.xtext.modelicaMo.impl.FunctionArgumentsImpl#getNamedArguments <em>Named Arguments</em>}</li>
 * </ul>
 *
 * @generated
 */
public class FunctionArgumentsImpl extends MinimalEObjectImpl.Container implements FunctionArguments
{
  /**
   * The cached value of the '{@link #getFunctionArgument() <em>Function Argument</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFunctionArgument()
   * @generated
   * @ordered
   */
  protected FunctionArgument functionArgument;

  /**
   * The cached value of the '{@link #getArgs() <em>Args</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArgs()
   * @generated
   * @ordered
   */
  protected EList<FunctionArguments> args;

  /**
   * The cached value of the '{@link #getForIndices() <em>For Indices</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getForIndices()
   * @generated
   * @ordered
   */
  protected EList<ForIndices> forIndices;

  /**
   * The cached value of the '{@link #getNamedArguments() <em>Named Arguments</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNamedArguments()
   * @generated
   * @ordered
   */
  protected NamedArguments namedArguments;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FunctionArgumentsImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ModelicaMoPackage.Literals.FUNCTION_ARGUMENTS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FunctionArgument getFunctionArgument()
  {
    return functionArgument;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFunctionArgument(FunctionArgument newFunctionArgument, NotificationChain msgs)
  {
    FunctionArgument oldFunctionArgument = functionArgument;
    functionArgument = newFunctionArgument;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ModelicaMoPackage.FUNCTION_ARGUMENTS__FUNCTION_ARGUMENT, oldFunctionArgument, newFunctionArgument);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFunctionArgument(FunctionArgument newFunctionArgument)
  {
    if (newFunctionArgument != functionArgument)
    {
      NotificationChain msgs = null;
      if (functionArgument != null)
        msgs = ((InternalEObject)functionArgument).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ModelicaMoPackage.FUNCTION_ARGUMENTS__FUNCTION_ARGUMENT, null, msgs);
      if (newFunctionArgument != null)
        msgs = ((InternalEObject)newFunctionArgument).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ModelicaMoPackage.FUNCTION_ARGUMENTS__FUNCTION_ARGUMENT, null, msgs);
      msgs = basicSetFunctionArgument(newFunctionArgument, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ModelicaMoPackage.FUNCTION_ARGUMENTS__FUNCTION_ARGUMENT, newFunctionArgument, newFunctionArgument));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<FunctionArguments> getArgs()
  {
    if (args == null)
    {
      args = new EObjectContainmentEList<FunctionArguments>(FunctionArguments.class, this, ModelicaMoPackage.FUNCTION_ARGUMENTS__ARGS);
    }
    return args;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ForIndices> getForIndices()
  {
    if (forIndices == null)
    {
      forIndices = new EObjectContainmentEList<ForIndices>(ForIndices.class, this, ModelicaMoPackage.FUNCTION_ARGUMENTS__FOR_INDICES);
    }
    return forIndices;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NamedArguments getNamedArguments()
  {
    return namedArguments;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetNamedArguments(NamedArguments newNamedArguments, NotificationChain msgs)
  {
    NamedArguments oldNamedArguments = namedArguments;
    namedArguments = newNamedArguments;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ModelicaMoPackage.FUNCTION_ARGUMENTS__NAMED_ARGUMENTS, oldNamedArguments, newNamedArguments);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setNamedArguments(NamedArguments newNamedArguments)
  {
    if (newNamedArguments != namedArguments)
    {
      NotificationChain msgs = null;
      if (namedArguments != null)
        msgs = ((InternalEObject)namedArguments).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ModelicaMoPackage.FUNCTION_ARGUMENTS__NAMED_ARGUMENTS, null, msgs);
      if (newNamedArguments != null)
        msgs = ((InternalEObject)newNamedArguments).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ModelicaMoPackage.FUNCTION_ARGUMENTS__NAMED_ARGUMENTS, null, msgs);
      msgs = basicSetNamedArguments(newNamedArguments, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ModelicaMoPackage.FUNCTION_ARGUMENTS__NAMED_ARGUMENTS, newNamedArguments, newNamedArguments));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ModelicaMoPackage.FUNCTION_ARGUMENTS__FUNCTION_ARGUMENT:
        return basicSetFunctionArgument(null, msgs);
      case ModelicaMoPackage.FUNCTION_ARGUMENTS__ARGS:
        return ((InternalEList<?>)getArgs()).basicRemove(otherEnd, msgs);
      case ModelicaMoPackage.FUNCTION_ARGUMENTS__FOR_INDICES:
        return ((InternalEList<?>)getForIndices()).basicRemove(otherEnd, msgs);
      case ModelicaMoPackage.FUNCTION_ARGUMENTS__NAMED_ARGUMENTS:
        return basicSetNamedArguments(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ModelicaMoPackage.FUNCTION_ARGUMENTS__FUNCTION_ARGUMENT:
        return getFunctionArgument();
      case ModelicaMoPackage.FUNCTION_ARGUMENTS__ARGS:
        return getArgs();
      case ModelicaMoPackage.FUNCTION_ARGUMENTS__FOR_INDICES:
        return getForIndices();
      case ModelicaMoPackage.FUNCTION_ARGUMENTS__NAMED_ARGUMENTS:
        return getNamedArguments();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ModelicaMoPackage.FUNCTION_ARGUMENTS__FUNCTION_ARGUMENT:
        setFunctionArgument((FunctionArgument)newValue);
        return;
      case ModelicaMoPackage.FUNCTION_ARGUMENTS__ARGS:
        getArgs().clear();
        getArgs().addAll((Collection<? extends FunctionArguments>)newValue);
        return;
      case ModelicaMoPackage.FUNCTION_ARGUMENTS__FOR_INDICES:
        getForIndices().clear();
        getForIndices().addAll((Collection<? extends ForIndices>)newValue);
        return;
      case ModelicaMoPackage.FUNCTION_ARGUMENTS__NAMED_ARGUMENTS:
        setNamedArguments((NamedArguments)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ModelicaMoPackage.FUNCTION_ARGUMENTS__FUNCTION_ARGUMENT:
        setFunctionArgument((FunctionArgument)null);
        return;
      case ModelicaMoPackage.FUNCTION_ARGUMENTS__ARGS:
        getArgs().clear();
        return;
      case ModelicaMoPackage.FUNCTION_ARGUMENTS__FOR_INDICES:
        getForIndices().clear();
        return;
      case ModelicaMoPackage.FUNCTION_ARGUMENTS__NAMED_ARGUMENTS:
        setNamedArguments((NamedArguments)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ModelicaMoPackage.FUNCTION_ARGUMENTS__FUNCTION_ARGUMENT:
        return functionArgument != null;
      case ModelicaMoPackage.FUNCTION_ARGUMENTS__ARGS:
        return args != null && !args.isEmpty();
      case ModelicaMoPackage.FUNCTION_ARGUMENTS__FOR_INDICES:
        return forIndices != null && !forIndices.isEmpty();
      case ModelicaMoPackage.FUNCTION_ARGUMENTS__NAMED_ARGUMENTS:
        return namedArguments != null;
    }
    return super.eIsSet(featureID);
  }

} //FunctionArgumentsImpl
