/**
 * generated by Xtext 2.10.0-SNAPSHOT
 */
package sc.modelica.xtext.modelicaMo.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import sc.modelica.xtext.modelicaMo.Comment;
import sc.modelica.xtext.modelicaMo.ExprExpressionList;
import sc.modelica.xtext.modelicaMo.Expression;
import sc.modelica.xtext.modelicaMo.FunctionArguments;
import sc.modelica.xtext.modelicaMo.ModelicaMoPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link sc.modelica.xtext.modelicaMo.impl.ExpressionImpl#getEquation <em>Equation</em>}</li>
 *   <li>{@link sc.modelica.xtext.modelicaMo.impl.ExpressionImpl#getComm <em>Comm</em>}</li>
 *   <li>{@link sc.modelica.xtext.modelicaMo.impl.ExpressionImpl#getIf <em>If</em>}</li>
 *   <li>{@link sc.modelica.xtext.modelicaMo.impl.ExpressionImpl#getThen <em>Then</em>}</li>
 *   <li>{@link sc.modelica.xtext.modelicaMo.impl.ExpressionImpl#getElseif <em>Elseif</em>}</li>
 *   <li>{@link sc.modelica.xtext.modelicaMo.impl.ExpressionImpl#getElseifthen <em>Elseifthen</em>}</li>
 *   <li>{@link sc.modelica.xtext.modelicaMo.impl.ExpressionImpl#getElse <em>Else</em>}</li>
 *   <li>{@link sc.modelica.xtext.modelicaMo.impl.ExpressionImpl#getStart <em>Start</em>}</li>
 *   <li>{@link sc.modelica.xtext.modelicaMo.impl.ExpressionImpl#getStep <em>Step</em>}</li>
 *   <li>{@link sc.modelica.xtext.modelicaMo.impl.ExpressionImpl#getStop <em>Stop</em>}</li>
 *   <li>{@link sc.modelica.xtext.modelicaMo.impl.ExpressionImpl#getExp <em>Exp</em>}</li>
 *   <li>{@link sc.modelica.xtext.modelicaMo.impl.ExpressionImpl#getList <em>List</em>}</li>
 *   <li>{@link sc.modelica.xtext.modelicaMo.impl.ExpressionImpl#getFa <em>Fa</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExpressionImpl extends EquationImpl implements Expression
{
  /**
   * The cached value of the '{@link #getEquation() <em>Equation</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEquation()
   * @generated
   * @ordered
   */
  protected Expression equation;

  /**
   * The cached value of the '{@link #getComm() <em>Comm</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComm()
   * @generated
   * @ordered
   */
  protected Comment comm;

  /**
   * The cached value of the '{@link #getIf() <em>If</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIf()
   * @generated
   * @ordered
   */
  protected Expression if_;

  /**
   * The cached value of the '{@link #getThen() <em>Then</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getThen()
   * @generated
   * @ordered
   */
  protected Expression then;

  /**
   * The cached value of the '{@link #getElseif() <em>Elseif</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getElseif()
   * @generated
   * @ordered
   */
  protected EList<Expression> elseif;

  /**
   * The cached value of the '{@link #getElseifthen() <em>Elseifthen</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getElseifthen()
   * @generated
   * @ordered
   */
  protected EList<Expression> elseifthen;

  /**
   * The cached value of the '{@link #getElse() <em>Else</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getElse()
   * @generated
   * @ordered
   */
  protected Expression else_;

  /**
   * The cached value of the '{@link #getStart() <em>Start</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStart()
   * @generated
   * @ordered
   */
  protected Expression start;

  /**
   * The cached value of the '{@link #getStep() <em>Step</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStep()
   * @generated
   * @ordered
   */
  protected Expression step;

  /**
   * The cached value of the '{@link #getStop() <em>Stop</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStop()
   * @generated
   * @ordered
   */
  protected Expression stop;

  /**
   * The cached value of the '{@link #getExp() <em>Exp</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExp()
   * @generated
   * @ordered
   */
  protected Expression exp;

  /**
   * The cached value of the '{@link #getList() <em>List</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getList()
   * @generated
   * @ordered
   */
  protected EList<ExprExpressionList> list;

  /**
   * The cached value of the '{@link #getFa() <em>Fa</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFa()
   * @generated
   * @ordered
   */
  protected FunctionArguments fa;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ModelicaMoPackage.Literals.EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getEquation()
  {
    return equation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetEquation(Expression newEquation, NotificationChain msgs)
  {
    Expression oldEquation = equation;
    equation = newEquation;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ModelicaMoPackage.EXPRESSION__EQUATION, oldEquation, newEquation);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setEquation(Expression newEquation)
  {
    if (newEquation != equation)
    {
      NotificationChain msgs = null;
      if (equation != null)
        msgs = ((InternalEObject)equation).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ModelicaMoPackage.EXPRESSION__EQUATION, null, msgs);
      if (newEquation != null)
        msgs = ((InternalEObject)newEquation).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ModelicaMoPackage.EXPRESSION__EQUATION, null, msgs);
      msgs = basicSetEquation(newEquation, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ModelicaMoPackage.EXPRESSION__EQUATION, newEquation, newEquation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Comment getComm()
  {
    return comm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetComm(Comment newComm, NotificationChain msgs)
  {
    Comment oldComm = comm;
    comm = newComm;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ModelicaMoPackage.EXPRESSION__COMM, oldComm, newComm);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setComm(Comment newComm)
  {
    if (newComm != comm)
    {
      NotificationChain msgs = null;
      if (comm != null)
        msgs = ((InternalEObject)comm).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ModelicaMoPackage.EXPRESSION__COMM, null, msgs);
      if (newComm != null)
        msgs = ((InternalEObject)newComm).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ModelicaMoPackage.EXPRESSION__COMM, null, msgs);
      msgs = basicSetComm(newComm, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ModelicaMoPackage.EXPRESSION__COMM, newComm, newComm));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getIf()
  {
    return if_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetIf(Expression newIf, NotificationChain msgs)
  {
    Expression oldIf = if_;
    if_ = newIf;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ModelicaMoPackage.EXPRESSION__IF, oldIf, newIf);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIf(Expression newIf)
  {
    if (newIf != if_)
    {
      NotificationChain msgs = null;
      if (if_ != null)
        msgs = ((InternalEObject)if_).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ModelicaMoPackage.EXPRESSION__IF, null, msgs);
      if (newIf != null)
        msgs = ((InternalEObject)newIf).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ModelicaMoPackage.EXPRESSION__IF, null, msgs);
      msgs = basicSetIf(newIf, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ModelicaMoPackage.EXPRESSION__IF, newIf, newIf));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getThen()
  {
    return then;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetThen(Expression newThen, NotificationChain msgs)
  {
    Expression oldThen = then;
    then = newThen;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ModelicaMoPackage.EXPRESSION__THEN, oldThen, newThen);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setThen(Expression newThen)
  {
    if (newThen != then)
    {
      NotificationChain msgs = null;
      if (then != null)
        msgs = ((InternalEObject)then).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ModelicaMoPackage.EXPRESSION__THEN, null, msgs);
      if (newThen != null)
        msgs = ((InternalEObject)newThen).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ModelicaMoPackage.EXPRESSION__THEN, null, msgs);
      msgs = basicSetThen(newThen, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ModelicaMoPackage.EXPRESSION__THEN, newThen, newThen));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Expression> getElseif()
  {
    if (elseif == null)
    {
      elseif = new EObjectContainmentEList<Expression>(Expression.class, this, ModelicaMoPackage.EXPRESSION__ELSEIF);
    }
    return elseif;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Expression> getElseifthen()
  {
    if (elseifthen == null)
    {
      elseifthen = new EObjectContainmentEList<Expression>(Expression.class, this, ModelicaMoPackage.EXPRESSION__ELSEIFTHEN);
    }
    return elseifthen;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getElse()
  {
    return else_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetElse(Expression newElse, NotificationChain msgs)
  {
    Expression oldElse = else_;
    else_ = newElse;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ModelicaMoPackage.EXPRESSION__ELSE, oldElse, newElse);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setElse(Expression newElse)
  {
    if (newElse != else_)
    {
      NotificationChain msgs = null;
      if (else_ != null)
        msgs = ((InternalEObject)else_).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ModelicaMoPackage.EXPRESSION__ELSE, null, msgs);
      if (newElse != null)
        msgs = ((InternalEObject)newElse).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ModelicaMoPackage.EXPRESSION__ELSE, null, msgs);
      msgs = basicSetElse(newElse, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ModelicaMoPackage.EXPRESSION__ELSE, newElse, newElse));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getStart()
  {
    return start;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStart(Expression newStart, NotificationChain msgs)
  {
    Expression oldStart = start;
    start = newStart;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ModelicaMoPackage.EXPRESSION__START, oldStart, newStart);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setStart(Expression newStart)
  {
    if (newStart != start)
    {
      NotificationChain msgs = null;
      if (start != null)
        msgs = ((InternalEObject)start).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ModelicaMoPackage.EXPRESSION__START, null, msgs);
      if (newStart != null)
        msgs = ((InternalEObject)newStart).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ModelicaMoPackage.EXPRESSION__START, null, msgs);
      msgs = basicSetStart(newStart, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ModelicaMoPackage.EXPRESSION__START, newStart, newStart));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getStep()
  {
    return step;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStep(Expression newStep, NotificationChain msgs)
  {
    Expression oldStep = step;
    step = newStep;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ModelicaMoPackage.EXPRESSION__STEP, oldStep, newStep);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setStep(Expression newStep)
  {
    if (newStep != step)
    {
      NotificationChain msgs = null;
      if (step != null)
        msgs = ((InternalEObject)step).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ModelicaMoPackage.EXPRESSION__STEP, null, msgs);
      if (newStep != null)
        msgs = ((InternalEObject)newStep).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ModelicaMoPackage.EXPRESSION__STEP, null, msgs);
      msgs = basicSetStep(newStep, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ModelicaMoPackage.EXPRESSION__STEP, newStep, newStep));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getStop()
  {
    return stop;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStop(Expression newStop, NotificationChain msgs)
  {
    Expression oldStop = stop;
    stop = newStop;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ModelicaMoPackage.EXPRESSION__STOP, oldStop, newStop);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setStop(Expression newStop)
  {
    if (newStop != stop)
    {
      NotificationChain msgs = null;
      if (stop != null)
        msgs = ((InternalEObject)stop).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ModelicaMoPackage.EXPRESSION__STOP, null, msgs);
      if (newStop != null)
        msgs = ((InternalEObject)newStop).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ModelicaMoPackage.EXPRESSION__STOP, null, msgs);
      msgs = basicSetStop(newStop, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ModelicaMoPackage.EXPRESSION__STOP, newStop, newStop));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getExp()
  {
    return exp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExp(Expression newExp, NotificationChain msgs)
  {
    Expression oldExp = exp;
    exp = newExp;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ModelicaMoPackage.EXPRESSION__EXP, oldExp, newExp);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExp(Expression newExp)
  {
    if (newExp != exp)
    {
      NotificationChain msgs = null;
      if (exp != null)
        msgs = ((InternalEObject)exp).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ModelicaMoPackage.EXPRESSION__EXP, null, msgs);
      if (newExp != null)
        msgs = ((InternalEObject)newExp).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ModelicaMoPackage.EXPRESSION__EXP, null, msgs);
      msgs = basicSetExp(newExp, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ModelicaMoPackage.EXPRESSION__EXP, newExp, newExp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ExprExpressionList> getList()
  {
    if (list == null)
    {
      list = new EObjectContainmentEList<ExprExpressionList>(ExprExpressionList.class, this, ModelicaMoPackage.EXPRESSION__LIST);
    }
    return list;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FunctionArguments getFa()
  {
    return fa;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFa(FunctionArguments newFa, NotificationChain msgs)
  {
    FunctionArguments oldFa = fa;
    fa = newFa;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ModelicaMoPackage.EXPRESSION__FA, oldFa, newFa);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFa(FunctionArguments newFa)
  {
    if (newFa != fa)
    {
      NotificationChain msgs = null;
      if (fa != null)
        msgs = ((InternalEObject)fa).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ModelicaMoPackage.EXPRESSION__FA, null, msgs);
      if (newFa != null)
        msgs = ((InternalEObject)newFa).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ModelicaMoPackage.EXPRESSION__FA, null, msgs);
      msgs = basicSetFa(newFa, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ModelicaMoPackage.EXPRESSION__FA, newFa, newFa));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ModelicaMoPackage.EXPRESSION__EQUATION:
        return basicSetEquation(null, msgs);
      case ModelicaMoPackage.EXPRESSION__COMM:
        return basicSetComm(null, msgs);
      case ModelicaMoPackage.EXPRESSION__IF:
        return basicSetIf(null, msgs);
      case ModelicaMoPackage.EXPRESSION__THEN:
        return basicSetThen(null, msgs);
      case ModelicaMoPackage.EXPRESSION__ELSEIF:
        return ((InternalEList<?>)getElseif()).basicRemove(otherEnd, msgs);
      case ModelicaMoPackage.EXPRESSION__ELSEIFTHEN:
        return ((InternalEList<?>)getElseifthen()).basicRemove(otherEnd, msgs);
      case ModelicaMoPackage.EXPRESSION__ELSE:
        return basicSetElse(null, msgs);
      case ModelicaMoPackage.EXPRESSION__START:
        return basicSetStart(null, msgs);
      case ModelicaMoPackage.EXPRESSION__STEP:
        return basicSetStep(null, msgs);
      case ModelicaMoPackage.EXPRESSION__STOP:
        return basicSetStop(null, msgs);
      case ModelicaMoPackage.EXPRESSION__EXP:
        return basicSetExp(null, msgs);
      case ModelicaMoPackage.EXPRESSION__LIST:
        return ((InternalEList<?>)getList()).basicRemove(otherEnd, msgs);
      case ModelicaMoPackage.EXPRESSION__FA:
        return basicSetFa(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ModelicaMoPackage.EXPRESSION__EQUATION:
        return getEquation();
      case ModelicaMoPackage.EXPRESSION__COMM:
        return getComm();
      case ModelicaMoPackage.EXPRESSION__IF:
        return getIf();
      case ModelicaMoPackage.EXPRESSION__THEN:
        return getThen();
      case ModelicaMoPackage.EXPRESSION__ELSEIF:
        return getElseif();
      case ModelicaMoPackage.EXPRESSION__ELSEIFTHEN:
        return getElseifthen();
      case ModelicaMoPackage.EXPRESSION__ELSE:
        return getElse();
      case ModelicaMoPackage.EXPRESSION__START:
        return getStart();
      case ModelicaMoPackage.EXPRESSION__STEP:
        return getStep();
      case ModelicaMoPackage.EXPRESSION__STOP:
        return getStop();
      case ModelicaMoPackage.EXPRESSION__EXP:
        return getExp();
      case ModelicaMoPackage.EXPRESSION__LIST:
        return getList();
      case ModelicaMoPackage.EXPRESSION__FA:
        return getFa();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ModelicaMoPackage.EXPRESSION__EQUATION:
        setEquation((Expression)newValue);
        return;
      case ModelicaMoPackage.EXPRESSION__COMM:
        setComm((Comment)newValue);
        return;
      case ModelicaMoPackage.EXPRESSION__IF:
        setIf((Expression)newValue);
        return;
      case ModelicaMoPackage.EXPRESSION__THEN:
        setThen((Expression)newValue);
        return;
      case ModelicaMoPackage.EXPRESSION__ELSEIF:
        getElseif().clear();
        getElseif().addAll((Collection<? extends Expression>)newValue);
        return;
      case ModelicaMoPackage.EXPRESSION__ELSEIFTHEN:
        getElseifthen().clear();
        getElseifthen().addAll((Collection<? extends Expression>)newValue);
        return;
      case ModelicaMoPackage.EXPRESSION__ELSE:
        setElse((Expression)newValue);
        return;
      case ModelicaMoPackage.EXPRESSION__START:
        setStart((Expression)newValue);
        return;
      case ModelicaMoPackage.EXPRESSION__STEP:
        setStep((Expression)newValue);
        return;
      case ModelicaMoPackage.EXPRESSION__STOP:
        setStop((Expression)newValue);
        return;
      case ModelicaMoPackage.EXPRESSION__EXP:
        setExp((Expression)newValue);
        return;
      case ModelicaMoPackage.EXPRESSION__LIST:
        getList().clear();
        getList().addAll((Collection<? extends ExprExpressionList>)newValue);
        return;
      case ModelicaMoPackage.EXPRESSION__FA:
        setFa((FunctionArguments)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ModelicaMoPackage.EXPRESSION__EQUATION:
        setEquation((Expression)null);
        return;
      case ModelicaMoPackage.EXPRESSION__COMM:
        setComm((Comment)null);
        return;
      case ModelicaMoPackage.EXPRESSION__IF:
        setIf((Expression)null);
        return;
      case ModelicaMoPackage.EXPRESSION__THEN:
        setThen((Expression)null);
        return;
      case ModelicaMoPackage.EXPRESSION__ELSEIF:
        getElseif().clear();
        return;
      case ModelicaMoPackage.EXPRESSION__ELSEIFTHEN:
        getElseifthen().clear();
        return;
      case ModelicaMoPackage.EXPRESSION__ELSE:
        setElse((Expression)null);
        return;
      case ModelicaMoPackage.EXPRESSION__START:
        setStart((Expression)null);
        return;
      case ModelicaMoPackage.EXPRESSION__STEP:
        setStep((Expression)null);
        return;
      case ModelicaMoPackage.EXPRESSION__STOP:
        setStop((Expression)null);
        return;
      case ModelicaMoPackage.EXPRESSION__EXP:
        setExp((Expression)null);
        return;
      case ModelicaMoPackage.EXPRESSION__LIST:
        getList().clear();
        return;
      case ModelicaMoPackage.EXPRESSION__FA:
        setFa((FunctionArguments)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ModelicaMoPackage.EXPRESSION__EQUATION:
        return equation != null;
      case ModelicaMoPackage.EXPRESSION__COMM:
        return comm != null;
      case ModelicaMoPackage.EXPRESSION__IF:
        return if_ != null;
      case ModelicaMoPackage.EXPRESSION__THEN:
        return then != null;
      case ModelicaMoPackage.EXPRESSION__ELSEIF:
        return elseif != null && !elseif.isEmpty();
      case ModelicaMoPackage.EXPRESSION__ELSEIFTHEN:
        return elseifthen != null && !elseifthen.isEmpty();
      case ModelicaMoPackage.EXPRESSION__ELSE:
        return else_ != null;
      case ModelicaMoPackage.EXPRESSION__START:
        return start != null;
      case ModelicaMoPackage.EXPRESSION__STEP:
        return step != null;
      case ModelicaMoPackage.EXPRESSION__STOP:
        return stop != null;
      case ModelicaMoPackage.EXPRESSION__EXP:
        return exp != null;
      case ModelicaMoPackage.EXPRESSION__LIST:
        return list != null && !list.isEmpty();
      case ModelicaMoPackage.EXPRESSION__FA:
        return fa != null;
    }
    return super.eIsSet(featureID);
  }

} //ExpressionImpl
