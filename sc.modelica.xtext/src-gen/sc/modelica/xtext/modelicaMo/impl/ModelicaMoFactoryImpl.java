/**
 * generated by Xtext 2.10.0-SNAPSHOT
 */
package sc.modelica.xtext.modelicaMo.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import sc.modelica.xtext.modelicaMo.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class ModelicaMoFactoryImpl extends EFactoryImpl implements ModelicaMoFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static ModelicaMoFactory init()
  {
    try
    {
      ModelicaMoFactory theModelicaMoFactory = (ModelicaMoFactory)EPackage.Registry.INSTANCE.getEFactory(ModelicaMoPackage.eNS_URI);
      if (theModelicaMoFactory != null)
      {
        return theModelicaMoFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new ModelicaMoFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ModelicaMoFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case ModelicaMoPackage.PROGRAM: return createProgram();
      case ModelicaMoPackage.CLASS_DEFINITION: return createClassDefinition();
      case ModelicaMoPackage.CLASS_PREFIXES: return createClassPrefixes();
      case ModelicaMoPackage.CLASS_SPECIFIER: return createClassSpecifier();
      case ModelicaMoPackage.LONG_CLASS_SPECIFIER: return createLongClassSpecifier();
      case ModelicaMoPackage.SHORT_CLASS_SPECIFIER: return createShortClassSpecifier();
      case ModelicaMoPackage.DER_CLASS_SPECIFIER: return createDerClassSpecifier();
      case ModelicaMoPackage.BASE_PREFIX: return createBasePrefix();
      case ModelicaMoPackage.ENUM_LIST: return createEnumList();
      case ModelicaMoPackage.ENUMERATION_LITERAL: return createEnumerationLiteral();
      case ModelicaMoPackage.COMPOSITION: return createComposition();
      case ModelicaMoPackage.ELEMENT_LIST: return createElementList();
      case ModelicaMoPackage.ELEMENT: return createElement();
      case ModelicaMoPackage.IMPORT_CLAUSE: return createImportClause();
      case ModelicaMoPackage.IMPORT_LIST: return createImportList();
      case ModelicaMoPackage.EXTEND_CLAUSE: return createExtendClause();
      case ModelicaMoPackage.CONSTRAINING_CLAUSE: return createConstrainingClause();
      case ModelicaMoPackage.MODIFICATION: return createModification();
      case ModelicaMoPackage.CLASS_MODIFICATION: return createClassModification();
      case ModelicaMoPackage.ARGUMENT_LIST: return createArgumentList();
      case ModelicaMoPackage.ARGUMENT: return createArgument();
      case ModelicaMoPackage.ELEMENT_MODIFICATION_OR_REPLACEABLE: return createElementModificationOrReplaceable();
      case ModelicaMoPackage.ELEMENT_MODIFICATION: return createElementModification();
      case ModelicaMoPackage.ELEMENT_REDECLARATION: return createElementRedeclaration();
      case ModelicaMoPackage.ELEMENT_REPLACEABLE: return createElementReplaceable();
      case ModelicaMoPackage.COMPONENT_CLAUSE1: return createComponentClause1();
      case ModelicaMoPackage.COMPONENT_DECLARATION1: return createComponentDeclaration1();
      case ModelicaMoPackage.SHORT_CLASS_DEFINITION: return createShortClassDefinition();
      case ModelicaMoPackage.COMPONENT_CLAUSE: return createComponentClause();
      case ModelicaMoPackage.TYPE_PREFIX: return createTypePrefix();
      case ModelicaMoPackage.TYPE_SPECIFIER: return createTypeSpecifier();
      case ModelicaMoPackage.COMPONENT_LIST: return createComponentList();
      case ModelicaMoPackage.COMPONENT_DECLARATION: return createComponentDeclaration();
      case ModelicaMoPackage.CONDITION_ATTRIBUTE: return createConditionAttribute();
      case ModelicaMoPackage.DECLARATION: return createDeclaration();
      case ModelicaMoPackage.EQUATION_SECTION: return createEquationSection();
      case ModelicaMoPackage.ALGORITHM_SECTION: return createAlgorithmSection();
      case ModelicaMoPackage.EQUATION: return createEquation();
      case ModelicaMoPackage.STATEMENT: return createStatement();
      case ModelicaMoPackage.EQUATION_IF: return createEquationIf();
      case ModelicaMoPackage.STATEMENT_IF: return createStatementIf();
      case ModelicaMoPackage.EQUATION_FOR: return createEquationFor();
      case ModelicaMoPackage.STATEMENT_FOR: return createStatementFor();
      case ModelicaMoPackage.FOR_INDICES: return createForIndices();
      case ModelicaMoPackage.FOR_INDEX: return createForIndex();
      case ModelicaMoPackage.STATEMENT_WHILE: return createStatementWhile();
      case ModelicaMoPackage.EQUATION_WHEN: return createEquationWhen();
      case ModelicaMoPackage.STATEMENT_WHEN: return createStatementWhen();
      case ModelicaMoPackage.CONNECT_CLAUSE: return createConnectClause();
      case ModelicaMoPackage.EXPRESSION: return createExpression();
      case ModelicaMoPackage.NAME: return createName();
      case ModelicaMoPackage.COMPONENT_REFERENCE: return createComponentReference();
      case ModelicaMoPackage.FUNCTION_CALL_ARGS: return createFunctionCallArgs();
      case ModelicaMoPackage.FUNCTION_ARGUMENTS: return createFunctionArguments();
      case ModelicaMoPackage.NAMED_ARGUMENTS: return createNamedArguments();
      case ModelicaMoPackage.NAMED_ARGUMENT: return createNamedArgument();
      case ModelicaMoPackage.FUNCTION_ARGUMENT: return createFunctionArgument();
      case ModelicaMoPackage.OUTPUT_EXPRESSION_LIST: return createOutputExpressionList();
      case ModelicaMoPackage.EXPR_EXPRESSION_LIST: return createExprExpressionList();
      case ModelicaMoPackage.ARRAY_SUBSCRIPTS: return createArraySubscripts();
      case ModelicaMoPackage.SUBSCRIPT: return createSubscript();
      case ModelicaMoPackage.COMMENT: return createComment();
      case ModelicaMoPackage.STRING_COMMENT: return createStringComment();
      case ModelicaMoPackage.ASSERT: return createAssert();
      case ModelicaMoPackage.ANNOTATION: return createAnnotation();
      case ModelicaMoPackage.ANNOTATION_ARG: return createAnnotationArg();
      case ModelicaMoPackage.DEF_COMPONENT_NAME: return createDefComponentName();
      case ModelicaMoPackage.CHOICES: return createChoices();
      case ModelicaMoPackage.ANNOTATION_CODE: return createAnnotationCode();
      case ModelicaMoPackage.ANNOTATION_LAYER: return createAnnotationLayer();
      case ModelicaMoPackage.LAYER_ICON: return createLayerIcon();
      case ModelicaMoPackage.LAYER_DIAGRAM: return createLayerDiagram();
      case ModelicaMoPackage.COORDINATE_SPECIFICATION: return createCoordinateSpecification();
      case ModelicaMoPackage.COORDINATE_SPECIFICATION_ARGS: return createCoordinateSpecificationArgs();
      case ModelicaMoPackage.EXTENT: return createExtent();
      case ModelicaMoPackage.PRESERVE_AR: return createPreserveAR();
      case ModelicaMoPackage.INITIAL_SCALE: return createInitialScale();
      case ModelicaMoPackage.GRID: return createGrid();
      case ModelicaMoPackage.PLACEMENT: return createPlacement();
      case ModelicaMoPackage.PLACEMENT_ARG: return createPlacementArg();
      case ModelicaMoPackage.VISIBLE: return createVisible();
      case ModelicaMoPackage.TRANSFORMATION: return createTransformation();
      case ModelicaMoPackage.TRANSFORMATION_ARG: return createTransformationArg();
      case ModelicaMoPackage.ROTATION: return createRotation();
      case ModelicaMoPackage.ORIGIN: return createOrigin();
      case ModelicaMoPackage.POINT: return createPoint();
      case ModelicaMoPackage.RADIUS: return createRadius();
      case ModelicaMoPackage.SMOOTH: return createSmooth();
      case ModelicaMoPackage.COLOR: return createColor();
      case ModelicaMoPackage.THICKNESS: return createThickness();
      case ModelicaMoPackage.GRAPHICS: return createGraphics();
      case ModelicaMoPackage.GRAPHICAL_PRIMITIVE: return createGraphicalPrimitive();
      case ModelicaMoPackage.LINE: return createLine();
      case ModelicaMoPackage.POLYGON: return createPolygon();
      case ModelicaMoPackage.RECTANGLE: return createRectangle();
      case ModelicaMoPackage.ELLIPSE: return createEllipse();
      case ModelicaMoPackage.TEXT: return createText();
      case ModelicaMoPackage.BITMAP: return createBitmap();
      case ModelicaMoPackage.GRAPHICAL_PRIMITIVE_ARGS: return createGraphicalPrimitiveArgs();
      case ModelicaMoPackage.DIALOG: return createDialog();
      case ModelicaMoPackage.DIALOG_ARG: return createDialogArg();
      case ModelicaMoPackage.ENABLE: return createEnable();
      case ModelicaMoPackage.GROUP: return createGroup();
      case ModelicaMoPackage.TAB: return createTab();
      case ModelicaMoPackage.ANNOTATION_DOCUMENTATION: return createAnnotationDocumentation();
      case ModelicaMoPackage.ANNOTATION_EXPERIMENT: return createAnnotationExperiment();
      case ModelicaMoPackage.EXPERIMENT_OPTION: return createExperimentOption();
      case ModelicaMoPackage.LOGICAL_EXPRESSION: return createLogicalExpression();
      case ModelicaMoPackage.LOGICAL_TERM: return createLogicalTerm();
      case ModelicaMoPackage.RELATION: return createRelation();
      case ModelicaMoPackage.ARITHMETIC_EXPRESSION: return createArithmeticExpression();
      case ModelicaMoPackage.ARITHMETIC_EXPRESSION2: return createArithmeticExpression2();
      case ModelicaMoPackage.TERM: return createTerm();
      case ModelicaMoPackage.FACTOR: return createFactor();
      case ModelicaMoPackage.PRIMARY: return createPrimary();
      case ModelicaMoPackage.OUTPUT_EXPRESION_LIST: return createOutputExpresionList();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case ModelicaMoPackage.ASSERTION_LEVEL:
        return createAssertionLevelFromString(eDataType, initialValue);
      case ModelicaMoPackage.LINE_PATTERN:
        return createLinePatternFromString(eDataType, initialValue);
      case ModelicaMoPackage.FILL_PATTERN:
        return createFillPatternFromString(eDataType, initialValue);
      case ModelicaMoPackage.BORDER_PATTERN:
        return createBorderPatternFromString(eDataType, initialValue);
      case ModelicaMoPackage.SMOOTH_ENUM:
        return createSmoothEnumFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case ModelicaMoPackage.ASSERTION_LEVEL:
        return convertAssertionLevelToString(eDataType, instanceValue);
      case ModelicaMoPackage.LINE_PATTERN:
        return convertLinePatternToString(eDataType, instanceValue);
      case ModelicaMoPackage.FILL_PATTERN:
        return convertFillPatternToString(eDataType, instanceValue);
      case ModelicaMoPackage.BORDER_PATTERN:
        return convertBorderPatternToString(eDataType, instanceValue);
      case ModelicaMoPackage.SMOOTH_ENUM:
        return convertSmoothEnumToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Program createProgram()
  {
    ProgramImpl program = new ProgramImpl();
    return program;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ClassDefinition createClassDefinition()
  {
    ClassDefinitionImpl classDefinition = new ClassDefinitionImpl();
    return classDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ClassPrefixes createClassPrefixes()
  {
    ClassPrefixesImpl classPrefixes = new ClassPrefixesImpl();
    return classPrefixes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ClassSpecifier createClassSpecifier()
  {
    ClassSpecifierImpl classSpecifier = new ClassSpecifierImpl();
    return classSpecifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LongClassSpecifier createLongClassSpecifier()
  {
    LongClassSpecifierImpl longClassSpecifier = new LongClassSpecifierImpl();
    return longClassSpecifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ShortClassSpecifier createShortClassSpecifier()
  {
    ShortClassSpecifierImpl shortClassSpecifier = new ShortClassSpecifierImpl();
    return shortClassSpecifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DerClassSpecifier createDerClassSpecifier()
  {
    DerClassSpecifierImpl derClassSpecifier = new DerClassSpecifierImpl();
    return derClassSpecifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BasePrefix createBasePrefix()
  {
    BasePrefixImpl basePrefix = new BasePrefixImpl();
    return basePrefix;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EnumList createEnumList()
  {
    EnumListImpl enumList = new EnumListImpl();
    return enumList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EnumerationLiteral createEnumerationLiteral()
  {
    EnumerationLiteralImpl enumerationLiteral = new EnumerationLiteralImpl();
    return enumerationLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Composition createComposition()
  {
    CompositionImpl composition = new CompositionImpl();
    return composition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ElementList createElementList()
  {
    ElementListImpl elementList = new ElementListImpl();
    return elementList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Element createElement()
  {
    ElementImpl element = new ElementImpl();
    return element;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ImportClause createImportClause()
  {
    ImportClauseImpl importClause = new ImportClauseImpl();
    return importClause;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ImportList createImportList()
  {
    ImportListImpl importList = new ImportListImpl();
    return importList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExtendClause createExtendClause()
  {
    ExtendClauseImpl extendClause = new ExtendClauseImpl();
    return extendClause;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConstrainingClause createConstrainingClause()
  {
    ConstrainingClauseImpl constrainingClause = new ConstrainingClauseImpl();
    return constrainingClause;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Modification createModification()
  {
    ModificationImpl modification = new ModificationImpl();
    return modification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ClassModification createClassModification()
  {
    ClassModificationImpl classModification = new ClassModificationImpl();
    return classModification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ArgumentList createArgumentList()
  {
    ArgumentListImpl argumentList = new ArgumentListImpl();
    return argumentList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Argument createArgument()
  {
    ArgumentImpl argument = new ArgumentImpl();
    return argument;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ElementModificationOrReplaceable createElementModificationOrReplaceable()
  {
    ElementModificationOrReplaceableImpl elementModificationOrReplaceable = new ElementModificationOrReplaceableImpl();
    return elementModificationOrReplaceable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ElementModification createElementModification()
  {
    ElementModificationImpl elementModification = new ElementModificationImpl();
    return elementModification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ElementRedeclaration createElementRedeclaration()
  {
    ElementRedeclarationImpl elementRedeclaration = new ElementRedeclarationImpl();
    return elementRedeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ElementReplaceable createElementReplaceable()
  {
    ElementReplaceableImpl elementReplaceable = new ElementReplaceableImpl();
    return elementReplaceable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComponentClause1 createComponentClause1()
  {
    ComponentClause1Impl componentClause1 = new ComponentClause1Impl();
    return componentClause1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComponentDeclaration1 createComponentDeclaration1()
  {
    ComponentDeclaration1Impl componentDeclaration1 = new ComponentDeclaration1Impl();
    return componentDeclaration1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ShortClassDefinition createShortClassDefinition()
  {
    ShortClassDefinitionImpl shortClassDefinition = new ShortClassDefinitionImpl();
    return shortClassDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComponentClause createComponentClause()
  {
    ComponentClauseImpl componentClause = new ComponentClauseImpl();
    return componentClause;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypePrefix createTypePrefix()
  {
    TypePrefixImpl typePrefix = new TypePrefixImpl();
    return typePrefix;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypeSpecifier createTypeSpecifier()
  {
    TypeSpecifierImpl typeSpecifier = new TypeSpecifierImpl();
    return typeSpecifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComponentList createComponentList()
  {
    ComponentListImpl componentList = new ComponentListImpl();
    return componentList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComponentDeclaration createComponentDeclaration()
  {
    ComponentDeclarationImpl componentDeclaration = new ComponentDeclarationImpl();
    return componentDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConditionAttribute createConditionAttribute()
  {
    ConditionAttributeImpl conditionAttribute = new ConditionAttributeImpl();
    return conditionAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Declaration createDeclaration()
  {
    DeclarationImpl declaration = new DeclarationImpl();
    return declaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EquationSection createEquationSection()
  {
    EquationSectionImpl equationSection = new EquationSectionImpl();
    return equationSection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AlgorithmSection createAlgorithmSection()
  {
    AlgorithmSectionImpl algorithmSection = new AlgorithmSectionImpl();
    return algorithmSection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Equation createEquation()
  {
    EquationImpl equation = new EquationImpl();
    return equation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Statement createStatement()
  {
    StatementImpl statement = new StatementImpl();
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EquationIf createEquationIf()
  {
    EquationIfImpl equationIf = new EquationIfImpl();
    return equationIf;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StatementIf createStatementIf()
  {
    StatementIfImpl statementIf = new StatementIfImpl();
    return statementIf;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EquationFor createEquationFor()
  {
    EquationForImpl equationFor = new EquationForImpl();
    return equationFor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StatementFor createStatementFor()
  {
    StatementForImpl statementFor = new StatementForImpl();
    return statementFor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ForIndices createForIndices()
  {
    ForIndicesImpl forIndices = new ForIndicesImpl();
    return forIndices;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ForIndex createForIndex()
  {
    ForIndexImpl forIndex = new ForIndexImpl();
    return forIndex;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StatementWhile createStatementWhile()
  {
    StatementWhileImpl statementWhile = new StatementWhileImpl();
    return statementWhile;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EquationWhen createEquationWhen()
  {
    EquationWhenImpl equationWhen = new EquationWhenImpl();
    return equationWhen;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StatementWhen createStatementWhen()
  {
    StatementWhenImpl statementWhen = new StatementWhenImpl();
    return statementWhen;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConnectClause createConnectClause()
  {
    ConnectClauseImpl connectClause = new ConnectClauseImpl();
    return connectClause;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Name createName()
  {
    NameImpl name = new NameImpl();
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComponentReference createComponentReference()
  {
    ComponentReferenceImpl componentReference = new ComponentReferenceImpl();
    return componentReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FunctionCallArgs createFunctionCallArgs()
  {
    FunctionCallArgsImpl functionCallArgs = new FunctionCallArgsImpl();
    return functionCallArgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FunctionArguments createFunctionArguments()
  {
    FunctionArgumentsImpl functionArguments = new FunctionArgumentsImpl();
    return functionArguments;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NamedArguments createNamedArguments()
  {
    NamedArgumentsImpl namedArguments = new NamedArgumentsImpl();
    return namedArguments;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NamedArgument createNamedArgument()
  {
    NamedArgumentImpl namedArgument = new NamedArgumentImpl();
    return namedArgument;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FunctionArgument createFunctionArgument()
  {
    FunctionArgumentImpl functionArgument = new FunctionArgumentImpl();
    return functionArgument;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OutputExpressionList createOutputExpressionList()
  {
    OutputExpressionListImpl outputExpressionList = new OutputExpressionListImpl();
    return outputExpressionList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExprExpressionList createExprExpressionList()
  {
    ExprExpressionListImpl exprExpressionList = new ExprExpressionListImpl();
    return exprExpressionList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ArraySubscripts createArraySubscripts()
  {
    ArraySubscriptsImpl arraySubscripts = new ArraySubscriptsImpl();
    return arraySubscripts;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Subscript createSubscript()
  {
    SubscriptImpl subscript = new SubscriptImpl();
    return subscript;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Comment createComment()
  {
    CommentImpl comment = new CommentImpl();
    return comment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StringComment createStringComment()
  {
    StringCommentImpl stringComment = new StringCommentImpl();
    return stringComment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Assert createAssert()
  {
    AssertImpl assert_ = new AssertImpl();
    return assert_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Annotation createAnnotation()
  {
    AnnotationImpl annotation = new AnnotationImpl();
    return annotation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AnnotationArg createAnnotationArg()
  {
    AnnotationArgImpl annotationArg = new AnnotationArgImpl();
    return annotationArg;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DefComponentName createDefComponentName()
  {
    DefComponentNameImpl defComponentName = new DefComponentNameImpl();
    return defComponentName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Choices createChoices()
  {
    ChoicesImpl choices = new ChoicesImpl();
    return choices;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AnnotationCode createAnnotationCode()
  {
    AnnotationCodeImpl annotationCode = new AnnotationCodeImpl();
    return annotationCode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AnnotationLayer createAnnotationLayer()
  {
    AnnotationLayerImpl annotationLayer = new AnnotationLayerImpl();
    return annotationLayer;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LayerIcon createLayerIcon()
  {
    LayerIconImpl layerIcon = new LayerIconImpl();
    return layerIcon;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LayerDiagram createLayerDiagram()
  {
    LayerDiagramImpl layerDiagram = new LayerDiagramImpl();
    return layerDiagram;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CoordinateSpecification createCoordinateSpecification()
  {
    CoordinateSpecificationImpl coordinateSpecification = new CoordinateSpecificationImpl();
    return coordinateSpecification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CoordinateSpecificationArgs createCoordinateSpecificationArgs()
  {
    CoordinateSpecificationArgsImpl coordinateSpecificationArgs = new CoordinateSpecificationArgsImpl();
    return coordinateSpecificationArgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Extent createExtent()
  {
    ExtentImpl extent = new ExtentImpl();
    return extent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PreserveAR createPreserveAR()
  {
    PreserveARImpl preserveAR = new PreserveARImpl();
    return preserveAR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InitialScale createInitialScale()
  {
    InitialScaleImpl initialScale = new InitialScaleImpl();
    return initialScale;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Grid createGrid()
  {
    GridImpl grid = new GridImpl();
    return grid;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Placement createPlacement()
  {
    PlacementImpl placement = new PlacementImpl();
    return placement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PlacementArg createPlacementArg()
  {
    PlacementArgImpl placementArg = new PlacementArgImpl();
    return placementArg;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Visible createVisible()
  {
    VisibleImpl visible = new VisibleImpl();
    return visible;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Transformation createTransformation()
  {
    TransformationImpl transformation = new TransformationImpl();
    return transformation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TransformationArg createTransformationArg()
  {
    TransformationArgImpl transformationArg = new TransformationArgImpl();
    return transformationArg;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Rotation createRotation()
  {
    RotationImpl rotation = new RotationImpl();
    return rotation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Origin createOrigin()
  {
    OriginImpl origin = new OriginImpl();
    return origin;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Point createPoint()
  {
    PointImpl point = new PointImpl();
    return point;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Radius createRadius()
  {
    RadiusImpl radius = new RadiusImpl();
    return radius;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Smooth createSmooth()
  {
    SmoothImpl smooth = new SmoothImpl();
    return smooth;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Color createColor()
  {
    ColorImpl color = new ColorImpl();
    return color;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Thickness createThickness()
  {
    ThicknessImpl thickness = new ThicknessImpl();
    return thickness;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Graphics createGraphics()
  {
    GraphicsImpl graphics = new GraphicsImpl();
    return graphics;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GraphicalPrimitive createGraphicalPrimitive()
  {
    GraphicalPrimitiveImpl graphicalPrimitive = new GraphicalPrimitiveImpl();
    return graphicalPrimitive;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Line createLine()
  {
    LineImpl line = new LineImpl();
    return line;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Polygon createPolygon()
  {
    PolygonImpl polygon = new PolygonImpl();
    return polygon;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Rectangle createRectangle()
  {
    RectangleImpl rectangle = new RectangleImpl();
    return rectangle;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Ellipse createEllipse()
  {
    EllipseImpl ellipse = new EllipseImpl();
    return ellipse;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Text createText()
  {
    TextImpl text = new TextImpl();
    return text;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Bitmap createBitmap()
  {
    BitmapImpl bitmap = new BitmapImpl();
    return bitmap;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GraphicalPrimitiveArgs createGraphicalPrimitiveArgs()
  {
    GraphicalPrimitiveArgsImpl graphicalPrimitiveArgs = new GraphicalPrimitiveArgsImpl();
    return graphicalPrimitiveArgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Dialog createDialog()
  {
    DialogImpl dialog = new DialogImpl();
    return dialog;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DialogArg createDialogArg()
  {
    DialogArgImpl dialogArg = new DialogArgImpl();
    return dialogArg;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Enable createEnable()
  {
    EnableImpl enable = new EnableImpl();
    return enable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Group createGroup()
  {
    GroupImpl group = new GroupImpl();
    return group;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Tab createTab()
  {
    TabImpl tab = new TabImpl();
    return tab;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AnnotationDocumentation createAnnotationDocumentation()
  {
    AnnotationDocumentationImpl annotationDocumentation = new AnnotationDocumentationImpl();
    return annotationDocumentation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AnnotationExperiment createAnnotationExperiment()
  {
    AnnotationExperimentImpl annotationExperiment = new AnnotationExperimentImpl();
    return annotationExperiment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExperimentOption createExperimentOption()
  {
    ExperimentOptionImpl experimentOption = new ExperimentOptionImpl();
    return experimentOption;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LogicalExpression createLogicalExpression()
  {
    LogicalExpressionImpl logicalExpression = new LogicalExpressionImpl();
    return logicalExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LogicalTerm createLogicalTerm()
  {
    LogicalTermImpl logicalTerm = new LogicalTermImpl();
    return logicalTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Relation createRelation()
  {
    RelationImpl relation = new RelationImpl();
    return relation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ArithmeticExpression createArithmeticExpression()
  {
    ArithmeticExpressionImpl arithmeticExpression = new ArithmeticExpressionImpl();
    return arithmeticExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ArithmeticExpression2 createArithmeticExpression2()
  {
    ArithmeticExpression2Impl arithmeticExpression2 = new ArithmeticExpression2Impl();
    return arithmeticExpression2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Term createTerm()
  {
    TermImpl term = new TermImpl();
    return term;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Factor createFactor()
  {
    FactorImpl factor = new FactorImpl();
    return factor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Primary createPrimary()
  {
    PrimaryImpl primary = new PrimaryImpl();
    return primary;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OutputExpresionList createOutputExpresionList()
  {
    OutputExpresionListImpl outputExpresionList = new OutputExpresionListImpl();
    return outputExpresionList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AssertionLevel createAssertionLevelFromString(EDataType eDataType, String initialValue)
  {
    AssertionLevel result = AssertionLevel.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertAssertionLevelToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LinePattern createLinePatternFromString(EDataType eDataType, String initialValue)
  {
    LinePattern result = LinePattern.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertLinePatternToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FillPattern createFillPatternFromString(EDataType eDataType, String initialValue)
  {
    FillPattern result = FillPattern.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertFillPatternToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BorderPattern createBorderPatternFromString(EDataType eDataType, String initialValue)
  {
    BorderPattern result = BorderPattern.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertBorderPatternToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SmoothEnum createSmoothEnumFromString(EDataType eDataType, String initialValue)
  {
    SmoothEnum result = SmoothEnum.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertSmoothEnumToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ModelicaMoPackage getModelicaMoPackage()
  {
    return (ModelicaMoPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static ModelicaMoPackage getPackage()
  {
    return ModelicaMoPackage.eINSTANCE;
  }

} //ModelicaMoFactoryImpl
