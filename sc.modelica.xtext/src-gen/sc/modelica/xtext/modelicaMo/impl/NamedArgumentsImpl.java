/**
 * generated by Xtext 2.10.0-SNAPSHOT
 */
package sc.modelica.xtext.modelicaMo.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import sc.modelica.xtext.modelicaMo.ModelicaMoPackage;
import sc.modelica.xtext.modelicaMo.NamedArgument;
import sc.modelica.xtext.modelicaMo.NamedArguments;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Named Arguments</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link sc.modelica.xtext.modelicaMo.impl.NamedArgumentsImpl#getNamedArgument <em>Named Argument</em>}</li>
 *   <li>{@link sc.modelica.xtext.modelicaMo.impl.NamedArgumentsImpl#getNamedArguments <em>Named Arguments</em>}</li>
 * </ul>
 *
 * @generated
 */
public class NamedArgumentsImpl extends MinimalEObjectImpl.Container implements NamedArguments
{
  /**
   * The cached value of the '{@link #getNamedArgument() <em>Named Argument</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNamedArgument()
   * @generated
   * @ordered
   */
  protected EList<NamedArgument> namedArgument;

  /**
   * The cached value of the '{@link #getNamedArguments() <em>Named Arguments</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNamedArguments()
   * @generated
   * @ordered
   */
  protected NamedArguments namedArguments;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NamedArgumentsImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ModelicaMoPackage.Literals.NAMED_ARGUMENTS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<NamedArgument> getNamedArgument()
  {
    if (namedArgument == null)
    {
      namedArgument = new EObjectContainmentEList<NamedArgument>(NamedArgument.class, this, ModelicaMoPackage.NAMED_ARGUMENTS__NAMED_ARGUMENT);
    }
    return namedArgument;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NamedArguments getNamedArguments()
  {
    return namedArguments;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetNamedArguments(NamedArguments newNamedArguments, NotificationChain msgs)
  {
    NamedArguments oldNamedArguments = namedArguments;
    namedArguments = newNamedArguments;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ModelicaMoPackage.NAMED_ARGUMENTS__NAMED_ARGUMENTS, oldNamedArguments, newNamedArguments);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setNamedArguments(NamedArguments newNamedArguments)
  {
    if (newNamedArguments != namedArguments)
    {
      NotificationChain msgs = null;
      if (namedArguments != null)
        msgs = ((InternalEObject)namedArguments).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ModelicaMoPackage.NAMED_ARGUMENTS__NAMED_ARGUMENTS, null, msgs);
      if (newNamedArguments != null)
        msgs = ((InternalEObject)newNamedArguments).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ModelicaMoPackage.NAMED_ARGUMENTS__NAMED_ARGUMENTS, null, msgs);
      msgs = basicSetNamedArguments(newNamedArguments, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ModelicaMoPackage.NAMED_ARGUMENTS__NAMED_ARGUMENTS, newNamedArguments, newNamedArguments));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ModelicaMoPackage.NAMED_ARGUMENTS__NAMED_ARGUMENT:
        return ((InternalEList<?>)getNamedArgument()).basicRemove(otherEnd, msgs);
      case ModelicaMoPackage.NAMED_ARGUMENTS__NAMED_ARGUMENTS:
        return basicSetNamedArguments(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ModelicaMoPackage.NAMED_ARGUMENTS__NAMED_ARGUMENT:
        return getNamedArgument();
      case ModelicaMoPackage.NAMED_ARGUMENTS__NAMED_ARGUMENTS:
        return getNamedArguments();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ModelicaMoPackage.NAMED_ARGUMENTS__NAMED_ARGUMENT:
        getNamedArgument().clear();
        getNamedArgument().addAll((Collection<? extends NamedArgument>)newValue);
        return;
      case ModelicaMoPackage.NAMED_ARGUMENTS__NAMED_ARGUMENTS:
        setNamedArguments((NamedArguments)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ModelicaMoPackage.NAMED_ARGUMENTS__NAMED_ARGUMENT:
        getNamedArgument().clear();
        return;
      case ModelicaMoPackage.NAMED_ARGUMENTS__NAMED_ARGUMENTS:
        setNamedArguments((NamedArguments)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ModelicaMoPackage.NAMED_ARGUMENTS__NAMED_ARGUMENT:
        return namedArgument != null && !namedArgument.isEmpty();
      case ModelicaMoPackage.NAMED_ARGUMENTS__NAMED_ARGUMENTS:
        return namedArguments != null;
    }
    return super.eIsSet(featureID);
  }

} //NamedArgumentsImpl
