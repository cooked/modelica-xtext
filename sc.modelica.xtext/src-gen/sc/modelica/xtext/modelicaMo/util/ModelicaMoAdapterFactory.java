/**
 * generated by Xtext 2.10.0-SNAPSHOT
 */
package sc.modelica.xtext.modelicaMo.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import sc.modelica.xtext.modelicaMo.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see sc.modelica.xtext.modelicaMo.ModelicaMoPackage
 * @generated
 */
public class ModelicaMoAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static ModelicaMoPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ModelicaMoAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = ModelicaMoPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ModelicaMoSwitch<Adapter> modelSwitch =
    new ModelicaMoSwitch<Adapter>()
    {
      @Override
      public Adapter caseProgram(Program object)
      {
        return createProgramAdapter();
      }
      @Override
      public Adapter caseClassDefinition(ClassDefinition object)
      {
        return createClassDefinitionAdapter();
      }
      @Override
      public Adapter caseClassPrefixes(ClassPrefixes object)
      {
        return createClassPrefixesAdapter();
      }
      @Override
      public Adapter caseClassSpecifier(ClassSpecifier object)
      {
        return createClassSpecifierAdapter();
      }
      @Override
      public Adapter caseLongClassSpecifier(LongClassSpecifier object)
      {
        return createLongClassSpecifierAdapter();
      }
      @Override
      public Adapter caseShortClassSpecifier(ShortClassSpecifier object)
      {
        return createShortClassSpecifierAdapter();
      }
      @Override
      public Adapter caseDerClassSpecifier(DerClassSpecifier object)
      {
        return createDerClassSpecifierAdapter();
      }
      @Override
      public Adapter caseBasePrefix(BasePrefix object)
      {
        return createBasePrefixAdapter();
      }
      @Override
      public Adapter caseEnumList(EnumList object)
      {
        return createEnumListAdapter();
      }
      @Override
      public Adapter caseEnumerationLiteral(EnumerationLiteral object)
      {
        return createEnumerationLiteralAdapter();
      }
      @Override
      public Adapter caseComposition(Composition object)
      {
        return createCompositionAdapter();
      }
      @Override
      public Adapter caseElementList(ElementList object)
      {
        return createElementListAdapter();
      }
      @Override
      public Adapter caseElement(Element object)
      {
        return createElementAdapter();
      }
      @Override
      public Adapter caseImportClause(ImportClause object)
      {
        return createImportClauseAdapter();
      }
      @Override
      public Adapter caseImportList(ImportList object)
      {
        return createImportListAdapter();
      }
      @Override
      public Adapter caseExtendClause(ExtendClause object)
      {
        return createExtendClauseAdapter();
      }
      @Override
      public Adapter caseConstrainingClause(ConstrainingClause object)
      {
        return createConstrainingClauseAdapter();
      }
      @Override
      public Adapter caseModification(Modification object)
      {
        return createModificationAdapter();
      }
      @Override
      public Adapter caseClassModification(ClassModification object)
      {
        return createClassModificationAdapter();
      }
      @Override
      public Adapter caseArgumentList(ArgumentList object)
      {
        return createArgumentListAdapter();
      }
      @Override
      public Adapter caseArgument(Argument object)
      {
        return createArgumentAdapter();
      }
      @Override
      public Adapter caseElementModificationOrReplaceable(ElementModificationOrReplaceable object)
      {
        return createElementModificationOrReplaceableAdapter();
      }
      @Override
      public Adapter caseElementModification(ElementModification object)
      {
        return createElementModificationAdapter();
      }
      @Override
      public Adapter caseElementRedeclaration(ElementRedeclaration object)
      {
        return createElementRedeclarationAdapter();
      }
      @Override
      public Adapter caseElementReplaceable(ElementReplaceable object)
      {
        return createElementReplaceableAdapter();
      }
      @Override
      public Adapter caseComponentClause1(ComponentClause1 object)
      {
        return createComponentClause1Adapter();
      }
      @Override
      public Adapter caseComponentDeclaration1(ComponentDeclaration1 object)
      {
        return createComponentDeclaration1Adapter();
      }
      @Override
      public Adapter caseShortClassDefinition(ShortClassDefinition object)
      {
        return createShortClassDefinitionAdapter();
      }
      @Override
      public Adapter caseComponentClause(ComponentClause object)
      {
        return createComponentClauseAdapter();
      }
      @Override
      public Adapter caseTypePrefix(TypePrefix object)
      {
        return createTypePrefixAdapter();
      }
      @Override
      public Adapter caseTypeSpecifier(TypeSpecifier object)
      {
        return createTypeSpecifierAdapter();
      }
      @Override
      public Adapter caseComponentList(ComponentList object)
      {
        return createComponentListAdapter();
      }
      @Override
      public Adapter caseComponentDeclaration(ComponentDeclaration object)
      {
        return createComponentDeclarationAdapter();
      }
      @Override
      public Adapter caseConditionAttribute(ConditionAttribute object)
      {
        return createConditionAttributeAdapter();
      }
      @Override
      public Adapter caseDeclaration(Declaration object)
      {
        return createDeclarationAdapter();
      }
      @Override
      public Adapter caseEquationSection(EquationSection object)
      {
        return createEquationSectionAdapter();
      }
      @Override
      public Adapter caseAlgorithmSection(AlgorithmSection object)
      {
        return createAlgorithmSectionAdapter();
      }
      @Override
      public Adapter caseEquation(Equation object)
      {
        return createEquationAdapter();
      }
      @Override
      public Adapter caseStatement(Statement object)
      {
        return createStatementAdapter();
      }
      @Override
      public Adapter caseEquationIf(EquationIf object)
      {
        return createEquationIfAdapter();
      }
      @Override
      public Adapter caseStatementIf(StatementIf object)
      {
        return createStatementIfAdapter();
      }
      @Override
      public Adapter caseEquationFor(EquationFor object)
      {
        return createEquationForAdapter();
      }
      @Override
      public Adapter caseStatementFor(StatementFor object)
      {
        return createStatementForAdapter();
      }
      @Override
      public Adapter caseForIndices(ForIndices object)
      {
        return createForIndicesAdapter();
      }
      @Override
      public Adapter caseForIndex(ForIndex object)
      {
        return createForIndexAdapter();
      }
      @Override
      public Adapter caseStatementWhile(StatementWhile object)
      {
        return createStatementWhileAdapter();
      }
      @Override
      public Adapter caseEquationWhen(EquationWhen object)
      {
        return createEquationWhenAdapter();
      }
      @Override
      public Adapter caseStatementWhen(StatementWhen object)
      {
        return createStatementWhenAdapter();
      }
      @Override
      public Adapter caseConnectClause(ConnectClause object)
      {
        return createConnectClauseAdapter();
      }
      @Override
      public Adapter caseExpression(Expression object)
      {
        return createExpressionAdapter();
      }
      @Override
      public Adapter caseName(Name object)
      {
        return createNameAdapter();
      }
      @Override
      public Adapter caseComponentReference(ComponentReference object)
      {
        return createComponentReferenceAdapter();
      }
      @Override
      public Adapter caseFunctionCallArgs(FunctionCallArgs object)
      {
        return createFunctionCallArgsAdapter();
      }
      @Override
      public Adapter caseFunctionArguments(FunctionArguments object)
      {
        return createFunctionArgumentsAdapter();
      }
      @Override
      public Adapter caseNamedArguments(NamedArguments object)
      {
        return createNamedArgumentsAdapter();
      }
      @Override
      public Adapter caseNamedArgument(NamedArgument object)
      {
        return createNamedArgumentAdapter();
      }
      @Override
      public Adapter caseFunctionArgument(FunctionArgument object)
      {
        return createFunctionArgumentAdapter();
      }
      @Override
      public Adapter caseOutputExpressionList(OutputExpressionList object)
      {
        return createOutputExpressionListAdapter();
      }
      @Override
      public Adapter caseExprExpressionList(ExprExpressionList object)
      {
        return createExprExpressionListAdapter();
      }
      @Override
      public Adapter caseArraySubscripts(ArraySubscripts object)
      {
        return createArraySubscriptsAdapter();
      }
      @Override
      public Adapter caseSubscript(Subscript object)
      {
        return createSubscriptAdapter();
      }
      @Override
      public Adapter caseComment(Comment object)
      {
        return createCommentAdapter();
      }
      @Override
      public Adapter caseStringComment(StringComment object)
      {
        return createStringCommentAdapter();
      }
      @Override
      public Adapter caseAssert(Assert object)
      {
        return createAssertAdapter();
      }
      @Override
      public Adapter caseAnnotation(Annotation object)
      {
        return createAnnotationAdapter();
      }
      @Override
      public Adapter caseAnnotationArg(AnnotationArg object)
      {
        return createAnnotationArgAdapter();
      }
      @Override
      public Adapter caseDefComponentName(DefComponentName object)
      {
        return createDefComponentNameAdapter();
      }
      @Override
      public Adapter caseChoices(Choices object)
      {
        return createChoicesAdapter();
      }
      @Override
      public Adapter caseAnnotationCode(AnnotationCode object)
      {
        return createAnnotationCodeAdapter();
      }
      @Override
      public Adapter caseAnnotationLayer(AnnotationLayer object)
      {
        return createAnnotationLayerAdapter();
      }
      @Override
      public Adapter caseLayerIcon(LayerIcon object)
      {
        return createLayerIconAdapter();
      }
      @Override
      public Adapter caseLayerDiagram(LayerDiagram object)
      {
        return createLayerDiagramAdapter();
      }
      @Override
      public Adapter caseCoordinateSpecification(CoordinateSpecification object)
      {
        return createCoordinateSpecificationAdapter();
      }
      @Override
      public Adapter caseCoordinateSpecificationArgs(CoordinateSpecificationArgs object)
      {
        return createCoordinateSpecificationArgsAdapter();
      }
      @Override
      public Adapter caseExtent(Extent object)
      {
        return createExtentAdapter();
      }
      @Override
      public Adapter casePreserveAR(PreserveAR object)
      {
        return createPreserveARAdapter();
      }
      @Override
      public Adapter caseInitialScale(InitialScale object)
      {
        return createInitialScaleAdapter();
      }
      @Override
      public Adapter caseGrid(Grid object)
      {
        return createGridAdapter();
      }
      @Override
      public Adapter casePlacement(Placement object)
      {
        return createPlacementAdapter();
      }
      @Override
      public Adapter casePlacementArg(PlacementArg object)
      {
        return createPlacementArgAdapter();
      }
      @Override
      public Adapter caseVisible(Visible object)
      {
        return createVisibleAdapter();
      }
      @Override
      public Adapter caseTransformation(Transformation object)
      {
        return createTransformationAdapter();
      }
      @Override
      public Adapter caseTransformationArg(TransformationArg object)
      {
        return createTransformationArgAdapter();
      }
      @Override
      public Adapter caseRotation(Rotation object)
      {
        return createRotationAdapter();
      }
      @Override
      public Adapter caseOrigin(Origin object)
      {
        return createOriginAdapter();
      }
      @Override
      public Adapter casePoint(Point object)
      {
        return createPointAdapter();
      }
      @Override
      public Adapter caseRadius(Radius object)
      {
        return createRadiusAdapter();
      }
      @Override
      public Adapter caseSmooth(Smooth object)
      {
        return createSmoothAdapter();
      }
      @Override
      public Adapter caseColor(Color object)
      {
        return createColorAdapter();
      }
      @Override
      public Adapter caseThickness(Thickness object)
      {
        return createThicknessAdapter();
      }
      @Override
      public Adapter caseGraphics(Graphics object)
      {
        return createGraphicsAdapter();
      }
      @Override
      public Adapter caseGraphicalPrimitive(GraphicalPrimitive object)
      {
        return createGraphicalPrimitiveAdapter();
      }
      @Override
      public Adapter caseLine(Line object)
      {
        return createLineAdapter();
      }
      @Override
      public Adapter casePolygon(Polygon object)
      {
        return createPolygonAdapter();
      }
      @Override
      public Adapter caseRectangle(Rectangle object)
      {
        return createRectangleAdapter();
      }
      @Override
      public Adapter caseEllipse(Ellipse object)
      {
        return createEllipseAdapter();
      }
      @Override
      public Adapter caseText(Text object)
      {
        return createTextAdapter();
      }
      @Override
      public Adapter caseBitmap(Bitmap object)
      {
        return createBitmapAdapter();
      }
      @Override
      public Adapter caseGraphicalPrimitiveArgs(GraphicalPrimitiveArgs object)
      {
        return createGraphicalPrimitiveArgsAdapter();
      }
      @Override
      public Adapter caseDialog(Dialog object)
      {
        return createDialogAdapter();
      }
      @Override
      public Adapter caseDialogArg(DialogArg object)
      {
        return createDialogArgAdapter();
      }
      @Override
      public Adapter caseEnable(Enable object)
      {
        return createEnableAdapter();
      }
      @Override
      public Adapter caseGroup(Group object)
      {
        return createGroupAdapter();
      }
      @Override
      public Adapter caseTab(Tab object)
      {
        return createTabAdapter();
      }
      @Override
      public Adapter caseAnnotationDocumentation(AnnotationDocumentation object)
      {
        return createAnnotationDocumentationAdapter();
      }
      @Override
      public Adapter caseAnnotationExperiment(AnnotationExperiment object)
      {
        return createAnnotationExperimentAdapter();
      }
      @Override
      public Adapter caseExperimentOption(ExperimentOption object)
      {
        return createExperimentOptionAdapter();
      }
      @Override
      public Adapter caseLogicalExpression(LogicalExpression object)
      {
        return createLogicalExpressionAdapter();
      }
      @Override
      public Adapter caseLogicalTerm(LogicalTerm object)
      {
        return createLogicalTermAdapter();
      }
      @Override
      public Adapter caseRelation(Relation object)
      {
        return createRelationAdapter();
      }
      @Override
      public Adapter caseArithmeticExpression(ArithmeticExpression object)
      {
        return createArithmeticExpressionAdapter();
      }
      @Override
      public Adapter caseArithmeticExpression2(ArithmeticExpression2 object)
      {
        return createArithmeticExpression2Adapter();
      }
      @Override
      public Adapter caseTerm(Term object)
      {
        return createTermAdapter();
      }
      @Override
      public Adapter caseFactor(Factor object)
      {
        return createFactorAdapter();
      }
      @Override
      public Adapter casePrimary(Primary object)
      {
        return createPrimaryAdapter();
      }
      @Override
      public Adapter caseOutputExpresionList(OutputExpresionList object)
      {
        return createOutputExpresionListAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.Program <em>Program</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.Program
   * @generated
   */
  public Adapter createProgramAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.ClassDefinition <em>Class Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.ClassDefinition
   * @generated
   */
  public Adapter createClassDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.ClassPrefixes <em>Class Prefixes</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.ClassPrefixes
   * @generated
   */
  public Adapter createClassPrefixesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.ClassSpecifier <em>Class Specifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.ClassSpecifier
   * @generated
   */
  public Adapter createClassSpecifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.LongClassSpecifier <em>Long Class Specifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.LongClassSpecifier
   * @generated
   */
  public Adapter createLongClassSpecifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.ShortClassSpecifier <em>Short Class Specifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.ShortClassSpecifier
   * @generated
   */
  public Adapter createShortClassSpecifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.DerClassSpecifier <em>Der Class Specifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.DerClassSpecifier
   * @generated
   */
  public Adapter createDerClassSpecifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.BasePrefix <em>Base Prefix</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.BasePrefix
   * @generated
   */
  public Adapter createBasePrefixAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.EnumList <em>Enum List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.EnumList
   * @generated
   */
  public Adapter createEnumListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.EnumerationLiteral <em>Enumeration Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.EnumerationLiteral
   * @generated
   */
  public Adapter createEnumerationLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.Composition <em>Composition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.Composition
   * @generated
   */
  public Adapter createCompositionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.ElementList <em>Element List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.ElementList
   * @generated
   */
  public Adapter createElementListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.Element <em>Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.Element
   * @generated
   */
  public Adapter createElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.ImportClause <em>Import Clause</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.ImportClause
   * @generated
   */
  public Adapter createImportClauseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.ImportList <em>Import List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.ImportList
   * @generated
   */
  public Adapter createImportListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.ExtendClause <em>Extend Clause</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.ExtendClause
   * @generated
   */
  public Adapter createExtendClauseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.ConstrainingClause <em>Constraining Clause</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.ConstrainingClause
   * @generated
   */
  public Adapter createConstrainingClauseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.Modification <em>Modification</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.Modification
   * @generated
   */
  public Adapter createModificationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.ClassModification <em>Class Modification</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.ClassModification
   * @generated
   */
  public Adapter createClassModificationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.ArgumentList <em>Argument List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.ArgumentList
   * @generated
   */
  public Adapter createArgumentListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.Argument <em>Argument</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.Argument
   * @generated
   */
  public Adapter createArgumentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.ElementModificationOrReplaceable <em>Element Modification Or Replaceable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.ElementModificationOrReplaceable
   * @generated
   */
  public Adapter createElementModificationOrReplaceableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.ElementModification <em>Element Modification</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.ElementModification
   * @generated
   */
  public Adapter createElementModificationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.ElementRedeclaration <em>Element Redeclaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.ElementRedeclaration
   * @generated
   */
  public Adapter createElementRedeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.ElementReplaceable <em>Element Replaceable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.ElementReplaceable
   * @generated
   */
  public Adapter createElementReplaceableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.ComponentClause1 <em>Component Clause1</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.ComponentClause1
   * @generated
   */
  public Adapter createComponentClause1Adapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.ComponentDeclaration1 <em>Component Declaration1</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.ComponentDeclaration1
   * @generated
   */
  public Adapter createComponentDeclaration1Adapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.ShortClassDefinition <em>Short Class Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.ShortClassDefinition
   * @generated
   */
  public Adapter createShortClassDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.ComponentClause <em>Component Clause</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.ComponentClause
   * @generated
   */
  public Adapter createComponentClauseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.TypePrefix <em>Type Prefix</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.TypePrefix
   * @generated
   */
  public Adapter createTypePrefixAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.TypeSpecifier <em>Type Specifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.TypeSpecifier
   * @generated
   */
  public Adapter createTypeSpecifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.ComponentList <em>Component List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.ComponentList
   * @generated
   */
  public Adapter createComponentListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.ComponentDeclaration <em>Component Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.ComponentDeclaration
   * @generated
   */
  public Adapter createComponentDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.ConditionAttribute <em>Condition Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.ConditionAttribute
   * @generated
   */
  public Adapter createConditionAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.Declaration <em>Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.Declaration
   * @generated
   */
  public Adapter createDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.EquationSection <em>Equation Section</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.EquationSection
   * @generated
   */
  public Adapter createEquationSectionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.AlgorithmSection <em>Algorithm Section</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.AlgorithmSection
   * @generated
   */
  public Adapter createAlgorithmSectionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.Equation <em>Equation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.Equation
   * @generated
   */
  public Adapter createEquationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.Statement <em>Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.Statement
   * @generated
   */
  public Adapter createStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.EquationIf <em>Equation If</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.EquationIf
   * @generated
   */
  public Adapter createEquationIfAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.StatementIf <em>Statement If</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.StatementIf
   * @generated
   */
  public Adapter createStatementIfAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.EquationFor <em>Equation For</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.EquationFor
   * @generated
   */
  public Adapter createEquationForAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.StatementFor <em>Statement For</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.StatementFor
   * @generated
   */
  public Adapter createStatementForAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.ForIndices <em>For Indices</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.ForIndices
   * @generated
   */
  public Adapter createForIndicesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.ForIndex <em>For Index</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.ForIndex
   * @generated
   */
  public Adapter createForIndexAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.StatementWhile <em>Statement While</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.StatementWhile
   * @generated
   */
  public Adapter createStatementWhileAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.EquationWhen <em>Equation When</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.EquationWhen
   * @generated
   */
  public Adapter createEquationWhenAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.StatementWhen <em>Statement When</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.StatementWhen
   * @generated
   */
  public Adapter createStatementWhenAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.ConnectClause <em>Connect Clause</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.ConnectClause
   * @generated
   */
  public Adapter createConnectClauseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.Expression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.Expression
   * @generated
   */
  public Adapter createExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.Name <em>Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.Name
   * @generated
   */
  public Adapter createNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.ComponentReference <em>Component Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.ComponentReference
   * @generated
   */
  public Adapter createComponentReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.FunctionCallArgs <em>Function Call Args</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.FunctionCallArgs
   * @generated
   */
  public Adapter createFunctionCallArgsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.FunctionArguments <em>Function Arguments</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.FunctionArguments
   * @generated
   */
  public Adapter createFunctionArgumentsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.NamedArguments <em>Named Arguments</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.NamedArguments
   * @generated
   */
  public Adapter createNamedArgumentsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.NamedArgument <em>Named Argument</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.NamedArgument
   * @generated
   */
  public Adapter createNamedArgumentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.FunctionArgument <em>Function Argument</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.FunctionArgument
   * @generated
   */
  public Adapter createFunctionArgumentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.OutputExpressionList <em>Output Expression List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.OutputExpressionList
   * @generated
   */
  public Adapter createOutputExpressionListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.ExprExpressionList <em>Expr Expression List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.ExprExpressionList
   * @generated
   */
  public Adapter createExprExpressionListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.ArraySubscripts <em>Array Subscripts</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.ArraySubscripts
   * @generated
   */
  public Adapter createArraySubscriptsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.Subscript <em>Subscript</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.Subscript
   * @generated
   */
  public Adapter createSubscriptAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.Comment <em>Comment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.Comment
   * @generated
   */
  public Adapter createCommentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.StringComment <em>String Comment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.StringComment
   * @generated
   */
  public Adapter createStringCommentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.Assert <em>Assert</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.Assert
   * @generated
   */
  public Adapter createAssertAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.Annotation <em>Annotation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.Annotation
   * @generated
   */
  public Adapter createAnnotationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.AnnotationArg <em>Annotation Arg</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.AnnotationArg
   * @generated
   */
  public Adapter createAnnotationArgAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.DefComponentName <em>Def Component Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.DefComponentName
   * @generated
   */
  public Adapter createDefComponentNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.Choices <em>Choices</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.Choices
   * @generated
   */
  public Adapter createChoicesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.AnnotationCode <em>Annotation Code</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.AnnotationCode
   * @generated
   */
  public Adapter createAnnotationCodeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.AnnotationLayer <em>Annotation Layer</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.AnnotationLayer
   * @generated
   */
  public Adapter createAnnotationLayerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.LayerIcon <em>Layer Icon</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.LayerIcon
   * @generated
   */
  public Adapter createLayerIconAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.LayerDiagram <em>Layer Diagram</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.LayerDiagram
   * @generated
   */
  public Adapter createLayerDiagramAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.CoordinateSpecification <em>Coordinate Specification</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.CoordinateSpecification
   * @generated
   */
  public Adapter createCoordinateSpecificationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.CoordinateSpecificationArgs <em>Coordinate Specification Args</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.CoordinateSpecificationArgs
   * @generated
   */
  public Adapter createCoordinateSpecificationArgsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.Extent <em>Extent</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.Extent
   * @generated
   */
  public Adapter createExtentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.PreserveAR <em>Preserve AR</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.PreserveAR
   * @generated
   */
  public Adapter createPreserveARAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.InitialScale <em>Initial Scale</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.InitialScale
   * @generated
   */
  public Adapter createInitialScaleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.Grid <em>Grid</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.Grid
   * @generated
   */
  public Adapter createGridAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.Placement <em>Placement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.Placement
   * @generated
   */
  public Adapter createPlacementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.PlacementArg <em>Placement Arg</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.PlacementArg
   * @generated
   */
  public Adapter createPlacementArgAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.Visible <em>Visible</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.Visible
   * @generated
   */
  public Adapter createVisibleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.Transformation <em>Transformation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.Transformation
   * @generated
   */
  public Adapter createTransformationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.TransformationArg <em>Transformation Arg</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.TransformationArg
   * @generated
   */
  public Adapter createTransformationArgAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.Rotation <em>Rotation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.Rotation
   * @generated
   */
  public Adapter createRotationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.Origin <em>Origin</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.Origin
   * @generated
   */
  public Adapter createOriginAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.Point <em>Point</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.Point
   * @generated
   */
  public Adapter createPointAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.Radius <em>Radius</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.Radius
   * @generated
   */
  public Adapter createRadiusAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.Smooth <em>Smooth</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.Smooth
   * @generated
   */
  public Adapter createSmoothAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.Color <em>Color</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.Color
   * @generated
   */
  public Adapter createColorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.Thickness <em>Thickness</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.Thickness
   * @generated
   */
  public Adapter createThicknessAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.Graphics <em>Graphics</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.Graphics
   * @generated
   */
  public Adapter createGraphicsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.GraphicalPrimitive <em>Graphical Primitive</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.GraphicalPrimitive
   * @generated
   */
  public Adapter createGraphicalPrimitiveAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.Line <em>Line</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.Line
   * @generated
   */
  public Adapter createLineAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.Polygon <em>Polygon</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.Polygon
   * @generated
   */
  public Adapter createPolygonAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.Rectangle <em>Rectangle</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.Rectangle
   * @generated
   */
  public Adapter createRectangleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.Ellipse <em>Ellipse</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.Ellipse
   * @generated
   */
  public Adapter createEllipseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.Text <em>Text</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.Text
   * @generated
   */
  public Adapter createTextAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.Bitmap <em>Bitmap</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.Bitmap
   * @generated
   */
  public Adapter createBitmapAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.GraphicalPrimitiveArgs <em>Graphical Primitive Args</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.GraphicalPrimitiveArgs
   * @generated
   */
  public Adapter createGraphicalPrimitiveArgsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.Dialog <em>Dialog</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.Dialog
   * @generated
   */
  public Adapter createDialogAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.DialogArg <em>Dialog Arg</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.DialogArg
   * @generated
   */
  public Adapter createDialogArgAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.Enable <em>Enable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.Enable
   * @generated
   */
  public Adapter createEnableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.Group <em>Group</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.Group
   * @generated
   */
  public Adapter createGroupAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.Tab <em>Tab</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.Tab
   * @generated
   */
  public Adapter createTabAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.AnnotationDocumentation <em>Annotation Documentation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.AnnotationDocumentation
   * @generated
   */
  public Adapter createAnnotationDocumentationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.AnnotationExperiment <em>Annotation Experiment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.AnnotationExperiment
   * @generated
   */
  public Adapter createAnnotationExperimentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.ExperimentOption <em>Experiment Option</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.ExperimentOption
   * @generated
   */
  public Adapter createExperimentOptionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.LogicalExpression <em>Logical Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.LogicalExpression
   * @generated
   */
  public Adapter createLogicalExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.LogicalTerm <em>Logical Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.LogicalTerm
   * @generated
   */
  public Adapter createLogicalTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.Relation <em>Relation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.Relation
   * @generated
   */
  public Adapter createRelationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.ArithmeticExpression <em>Arithmetic Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.ArithmeticExpression
   * @generated
   */
  public Adapter createArithmeticExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.ArithmeticExpression2 <em>Arithmetic Expression2</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.ArithmeticExpression2
   * @generated
   */
  public Adapter createArithmeticExpression2Adapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.Term <em>Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.Term
   * @generated
   */
  public Adapter createTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.Factor <em>Factor</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.Factor
   * @generated
   */
  public Adapter createFactorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.Primary <em>Primary</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.Primary
   * @generated
   */
  public Adapter createPrimaryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link sc.modelica.xtext.modelicaMo.OutputExpresionList <em>Output Expresion List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see sc.modelica.xtext.modelicaMo.OutputExpresionList
   * @generated
   */
  public Adapter createOutputExpresionListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //ModelicaMoAdapterFactory
