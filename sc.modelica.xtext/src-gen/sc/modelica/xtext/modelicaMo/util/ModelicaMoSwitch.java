/**
 * generated by Xtext 2.10.0-SNAPSHOT
 */
package sc.modelica.xtext.modelicaMo.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import sc.modelica.xtext.modelicaMo.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see sc.modelica.xtext.modelicaMo.ModelicaMoPackage
 * @generated
 */
public class ModelicaMoSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static ModelicaMoPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ModelicaMoSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = ModelicaMoPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case ModelicaMoPackage.PROGRAM:
      {
        Program program = (Program)theEObject;
        T result = caseProgram(program);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.CLASS_DEFINITION:
      {
        ClassDefinition classDefinition = (ClassDefinition)theEObject;
        T result = caseClassDefinition(classDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.CLASS_PREFIXES:
      {
        ClassPrefixes classPrefixes = (ClassPrefixes)theEObject;
        T result = caseClassPrefixes(classPrefixes);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.CLASS_SPECIFIER:
      {
        ClassSpecifier classSpecifier = (ClassSpecifier)theEObject;
        T result = caseClassSpecifier(classSpecifier);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.LONG_CLASS_SPECIFIER:
      {
        LongClassSpecifier longClassSpecifier = (LongClassSpecifier)theEObject;
        T result = caseLongClassSpecifier(longClassSpecifier);
        if (result == null) result = caseClassSpecifier(longClassSpecifier);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.SHORT_CLASS_SPECIFIER:
      {
        ShortClassSpecifier shortClassSpecifier = (ShortClassSpecifier)theEObject;
        T result = caseShortClassSpecifier(shortClassSpecifier);
        if (result == null) result = caseClassSpecifier(shortClassSpecifier);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.DER_CLASS_SPECIFIER:
      {
        DerClassSpecifier derClassSpecifier = (DerClassSpecifier)theEObject;
        T result = caseDerClassSpecifier(derClassSpecifier);
        if (result == null) result = caseClassSpecifier(derClassSpecifier);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.BASE_PREFIX:
      {
        BasePrefix basePrefix = (BasePrefix)theEObject;
        T result = caseBasePrefix(basePrefix);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.ENUM_LIST:
      {
        EnumList enumList = (EnumList)theEObject;
        T result = caseEnumList(enumList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.ENUMERATION_LITERAL:
      {
        EnumerationLiteral enumerationLiteral = (EnumerationLiteral)theEObject;
        T result = caseEnumerationLiteral(enumerationLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.COMPOSITION:
      {
        Composition composition = (Composition)theEObject;
        T result = caseComposition(composition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.ELEMENT_LIST:
      {
        ElementList elementList = (ElementList)theEObject;
        T result = caseElementList(elementList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.ELEMENT:
      {
        Element element = (Element)theEObject;
        T result = caseElement(element);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.IMPORT_CLAUSE:
      {
        ImportClause importClause = (ImportClause)theEObject;
        T result = caseImportClause(importClause);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.IMPORT_LIST:
      {
        ImportList importList = (ImportList)theEObject;
        T result = caseImportList(importList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.EXTEND_CLAUSE:
      {
        ExtendClause extendClause = (ExtendClause)theEObject;
        T result = caseExtendClause(extendClause);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.CONSTRAINING_CLAUSE:
      {
        ConstrainingClause constrainingClause = (ConstrainingClause)theEObject;
        T result = caseConstrainingClause(constrainingClause);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.MODIFICATION:
      {
        Modification modification = (Modification)theEObject;
        T result = caseModification(modification);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.CLASS_MODIFICATION:
      {
        ClassModification classModification = (ClassModification)theEObject;
        T result = caseClassModification(classModification);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.ARGUMENT_LIST:
      {
        ArgumentList argumentList = (ArgumentList)theEObject;
        T result = caseArgumentList(argumentList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.ARGUMENT:
      {
        Argument argument = (Argument)theEObject;
        T result = caseArgument(argument);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.ELEMENT_MODIFICATION_OR_REPLACEABLE:
      {
        ElementModificationOrReplaceable elementModificationOrReplaceable = (ElementModificationOrReplaceable)theEObject;
        T result = caseElementModificationOrReplaceable(elementModificationOrReplaceable);
        if (result == null) result = caseArgument(elementModificationOrReplaceable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.ELEMENT_MODIFICATION:
      {
        ElementModification elementModification = (ElementModification)theEObject;
        T result = caseElementModification(elementModification);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.ELEMENT_REDECLARATION:
      {
        ElementRedeclaration elementRedeclaration = (ElementRedeclaration)theEObject;
        T result = caseElementRedeclaration(elementRedeclaration);
        if (result == null) result = caseArgument(elementRedeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.ELEMENT_REPLACEABLE:
      {
        ElementReplaceable elementReplaceable = (ElementReplaceable)theEObject;
        T result = caseElementReplaceable(elementReplaceable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.COMPONENT_CLAUSE1:
      {
        ComponentClause1 componentClause1 = (ComponentClause1)theEObject;
        T result = caseComponentClause1(componentClause1);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.COMPONENT_DECLARATION1:
      {
        ComponentDeclaration1 componentDeclaration1 = (ComponentDeclaration1)theEObject;
        T result = caseComponentDeclaration1(componentDeclaration1);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.SHORT_CLASS_DEFINITION:
      {
        ShortClassDefinition shortClassDefinition = (ShortClassDefinition)theEObject;
        T result = caseShortClassDefinition(shortClassDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.COMPONENT_CLAUSE:
      {
        ComponentClause componentClause = (ComponentClause)theEObject;
        T result = caseComponentClause(componentClause);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.TYPE_PREFIX:
      {
        TypePrefix typePrefix = (TypePrefix)theEObject;
        T result = caseTypePrefix(typePrefix);
        if (result == null) result = caseBasePrefix(typePrefix);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.TYPE_SPECIFIER:
      {
        TypeSpecifier typeSpecifier = (TypeSpecifier)theEObject;
        T result = caseTypeSpecifier(typeSpecifier);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.COMPONENT_LIST:
      {
        ComponentList componentList = (ComponentList)theEObject;
        T result = caseComponentList(componentList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.COMPONENT_DECLARATION:
      {
        ComponentDeclaration componentDeclaration = (ComponentDeclaration)theEObject;
        T result = caseComponentDeclaration(componentDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.CONDITION_ATTRIBUTE:
      {
        ConditionAttribute conditionAttribute = (ConditionAttribute)theEObject;
        T result = caseConditionAttribute(conditionAttribute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.DECLARATION:
      {
        Declaration declaration = (Declaration)theEObject;
        T result = caseDeclaration(declaration);
        if (result == null) result = caseComponentDeclaration1(declaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.EQUATION_SECTION:
      {
        EquationSection equationSection = (EquationSection)theEObject;
        T result = caseEquationSection(equationSection);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.ALGORITHM_SECTION:
      {
        AlgorithmSection algorithmSection = (AlgorithmSection)theEObject;
        T result = caseAlgorithmSection(algorithmSection);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.EQUATION:
      {
        Equation equation = (Equation)theEObject;
        T result = caseEquation(equation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.STATEMENT:
      {
        Statement statement = (Statement)theEObject;
        T result = caseStatement(statement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.EQUATION_IF:
      {
        EquationIf equationIf = (EquationIf)theEObject;
        T result = caseEquationIf(equationIf);
        if (result == null) result = caseEquation(equationIf);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.STATEMENT_IF:
      {
        StatementIf statementIf = (StatementIf)theEObject;
        T result = caseStatementIf(statementIf);
        if (result == null) result = caseStatement(statementIf);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.EQUATION_FOR:
      {
        EquationFor equationFor = (EquationFor)theEObject;
        T result = caseEquationFor(equationFor);
        if (result == null) result = caseEquation(equationFor);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.STATEMENT_FOR:
      {
        StatementFor statementFor = (StatementFor)theEObject;
        T result = caseStatementFor(statementFor);
        if (result == null) result = caseStatement(statementFor);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.FOR_INDICES:
      {
        ForIndices forIndices = (ForIndices)theEObject;
        T result = caseForIndices(forIndices);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.FOR_INDEX:
      {
        ForIndex forIndex = (ForIndex)theEObject;
        T result = caseForIndex(forIndex);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.STATEMENT_WHILE:
      {
        StatementWhile statementWhile = (StatementWhile)theEObject;
        T result = caseStatementWhile(statementWhile);
        if (result == null) result = caseStatement(statementWhile);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.EQUATION_WHEN:
      {
        EquationWhen equationWhen = (EquationWhen)theEObject;
        T result = caseEquationWhen(equationWhen);
        if (result == null) result = caseEquation(equationWhen);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.STATEMENT_WHEN:
      {
        StatementWhen statementWhen = (StatementWhen)theEObject;
        T result = caseStatementWhen(statementWhen);
        if (result == null) result = caseStatement(statementWhen);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.CONNECT_CLAUSE:
      {
        ConnectClause connectClause = (ConnectClause)theEObject;
        T result = caseConnectClause(connectClause);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.EXPRESSION:
      {
        Expression expression = (Expression)theEObject;
        T result = caseExpression(expression);
        if (result == null) result = caseEquation(expression);
        if (result == null) result = caseSubscript(expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.NAME:
      {
        Name name = (Name)theEObject;
        T result = caseName(name);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.COMPONENT_REFERENCE:
      {
        ComponentReference componentReference = (ComponentReference)theEObject;
        T result = caseComponentReference(componentReference);
        if (result == null) result = caseExpression(componentReference);
        if (result == null) result = caseEquation(componentReference);
        if (result == null) result = caseSubscript(componentReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.FUNCTION_CALL_ARGS:
      {
        FunctionCallArgs functionCallArgs = (FunctionCallArgs)theEObject;
        T result = caseFunctionCallArgs(functionCallArgs);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.FUNCTION_ARGUMENTS:
      {
        FunctionArguments functionArguments = (FunctionArguments)theEObject;
        T result = caseFunctionArguments(functionArguments);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.NAMED_ARGUMENTS:
      {
        NamedArguments namedArguments = (NamedArguments)theEObject;
        T result = caseNamedArguments(namedArguments);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.NAMED_ARGUMENT:
      {
        NamedArgument namedArgument = (NamedArgument)theEObject;
        T result = caseNamedArgument(namedArgument);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.FUNCTION_ARGUMENT:
      {
        FunctionArgument functionArgument = (FunctionArgument)theEObject;
        T result = caseFunctionArgument(functionArgument);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.OUTPUT_EXPRESSION_LIST:
      {
        OutputExpressionList outputExpressionList = (OutputExpressionList)theEObject;
        T result = caseOutputExpressionList(outputExpressionList);
        if (result == null) result = caseExpression(outputExpressionList);
        if (result == null) result = caseEquation(outputExpressionList);
        if (result == null) result = caseSubscript(outputExpressionList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.EXPR_EXPRESSION_LIST:
      {
        ExprExpressionList exprExpressionList = (ExprExpressionList)theEObject;
        T result = caseExprExpressionList(exprExpressionList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.ARRAY_SUBSCRIPTS:
      {
        ArraySubscripts arraySubscripts = (ArraySubscripts)theEObject;
        T result = caseArraySubscripts(arraySubscripts);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.SUBSCRIPT:
      {
        Subscript subscript = (Subscript)theEObject;
        T result = caseSubscript(subscript);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.COMMENT:
      {
        Comment comment = (Comment)theEObject;
        T result = caseComment(comment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.STRING_COMMENT:
      {
        StringComment stringComment = (StringComment)theEObject;
        T result = caseStringComment(stringComment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.ASSERT:
      {
        Assert assert_ = (Assert)theEObject;
        T result = caseAssert(assert_);
        if (result == null) result = caseEquation(assert_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.ANNOTATION:
      {
        Annotation annotation = (Annotation)theEObject;
        T result = caseAnnotation(annotation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.ANNOTATION_ARG:
      {
        AnnotationArg annotationArg = (AnnotationArg)theEObject;
        T result = caseAnnotationArg(annotationArg);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.DEF_COMPONENT_NAME:
      {
        DefComponentName defComponentName = (DefComponentName)theEObject;
        T result = caseDefComponentName(defComponentName);
        if (result == null) result = caseAnnotationArg(defComponentName);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.CHOICES:
      {
        Choices choices = (Choices)theEObject;
        T result = caseChoices(choices);
        if (result == null) result = caseAnnotationArg(choices);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.ANNOTATION_CODE:
      {
        AnnotationCode annotationCode = (AnnotationCode)theEObject;
        T result = caseAnnotationCode(annotationCode);
        if (result == null) result = caseAnnotationArg(annotationCode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.ANNOTATION_LAYER:
      {
        AnnotationLayer annotationLayer = (AnnotationLayer)theEObject;
        T result = caseAnnotationLayer(annotationLayer);
        if (result == null) result = caseAnnotationArg(annotationLayer);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.LAYER_ICON:
      {
        LayerIcon layerIcon = (LayerIcon)theEObject;
        T result = caseLayerIcon(layerIcon);
        if (result == null) result = caseAnnotationLayer(layerIcon);
        if (result == null) result = caseAnnotationArg(layerIcon);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.LAYER_DIAGRAM:
      {
        LayerDiagram layerDiagram = (LayerDiagram)theEObject;
        T result = caseLayerDiagram(layerDiagram);
        if (result == null) result = caseAnnotationLayer(layerDiagram);
        if (result == null) result = caseAnnotationArg(layerDiagram);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.COORDINATE_SPECIFICATION:
      {
        CoordinateSpecification coordinateSpecification = (CoordinateSpecification)theEObject;
        T result = caseCoordinateSpecification(coordinateSpecification);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.COORDINATE_SPECIFICATION_ARGS:
      {
        CoordinateSpecificationArgs coordinateSpecificationArgs = (CoordinateSpecificationArgs)theEObject;
        T result = caseCoordinateSpecificationArgs(coordinateSpecificationArgs);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.EXTENT:
      {
        Extent extent = (Extent)theEObject;
        T result = caseExtent(extent);
        if (result == null) result = caseCoordinateSpecificationArgs(extent);
        if (result == null) result = caseTransformationArg(extent);
        if (result == null) result = caseGraphicalPrimitiveArgs(extent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.PRESERVE_AR:
      {
        PreserveAR preserveAR = (PreserveAR)theEObject;
        T result = casePreserveAR(preserveAR);
        if (result == null) result = caseCoordinateSpecificationArgs(preserveAR);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.INITIAL_SCALE:
      {
        InitialScale initialScale = (InitialScale)theEObject;
        T result = caseInitialScale(initialScale);
        if (result == null) result = caseCoordinateSpecificationArgs(initialScale);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.GRID:
      {
        Grid grid = (Grid)theEObject;
        T result = caseGrid(grid);
        if (result == null) result = caseCoordinateSpecificationArgs(grid);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.PLACEMENT:
      {
        Placement placement = (Placement)theEObject;
        T result = casePlacement(placement);
        if (result == null) result = caseAnnotationArg(placement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.PLACEMENT_ARG:
      {
        PlacementArg placementArg = (PlacementArg)theEObject;
        T result = casePlacementArg(placementArg);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.VISIBLE:
      {
        Visible visible = (Visible)theEObject;
        T result = caseVisible(visible);
        if (result == null) result = casePlacementArg(visible);
        if (result == null) result = caseGraphicalPrimitiveArgs(visible);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.TRANSFORMATION:
      {
        Transformation transformation = (Transformation)theEObject;
        T result = caseTransformation(transformation);
        if (result == null) result = casePlacementArg(transformation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.TRANSFORMATION_ARG:
      {
        TransformationArg transformationArg = (TransformationArg)theEObject;
        T result = caseTransformationArg(transformationArg);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.ROTATION:
      {
        Rotation rotation = (Rotation)theEObject;
        T result = caseRotation(rotation);
        if (result == null) result = caseTransformationArg(rotation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.ORIGIN:
      {
        Origin origin = (Origin)theEObject;
        T result = caseOrigin(origin);
        if (result == null) result = caseTransformationArg(origin);
        if (result == null) result = caseGraphicalPrimitiveArgs(origin);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.POINT:
      {
        Point point = (Point)theEObject;
        T result = casePoint(point);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.RADIUS:
      {
        Radius radius = (Radius)theEObject;
        T result = caseRadius(radius);
        if (result == null) result = caseGraphicalPrimitiveArgs(radius);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.SMOOTH:
      {
        Smooth smooth = (Smooth)theEObject;
        T result = caseSmooth(smooth);
        if (result == null) result = caseGraphicalPrimitiveArgs(smooth);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.COLOR:
      {
        Color color = (Color)theEObject;
        T result = caseColor(color);
        if (result == null) result = caseGraphicalPrimitiveArgs(color);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.THICKNESS:
      {
        Thickness thickness = (Thickness)theEObject;
        T result = caseThickness(thickness);
        if (result == null) result = caseGraphicalPrimitiveArgs(thickness);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.GRAPHICS:
      {
        Graphics graphics = (Graphics)theEObject;
        T result = caseGraphics(graphics);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.GRAPHICAL_PRIMITIVE:
      {
        GraphicalPrimitive graphicalPrimitive = (GraphicalPrimitive)theEObject;
        T result = caseGraphicalPrimitive(graphicalPrimitive);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.LINE:
      {
        Line line = (Line)theEObject;
        T result = caseLine(line);
        if (result == null) result = caseAnnotationArg(line);
        if (result == null) result = caseGraphicalPrimitive(line);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.POLYGON:
      {
        Polygon polygon = (Polygon)theEObject;
        T result = casePolygon(polygon);
        if (result == null) result = caseGraphicalPrimitive(polygon);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.RECTANGLE:
      {
        Rectangle rectangle = (Rectangle)theEObject;
        T result = caseRectangle(rectangle);
        if (result == null) result = caseGraphicalPrimitive(rectangle);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.ELLIPSE:
      {
        Ellipse ellipse = (Ellipse)theEObject;
        T result = caseEllipse(ellipse);
        if (result == null) result = caseGraphicalPrimitive(ellipse);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.TEXT:
      {
        Text text = (Text)theEObject;
        T result = caseText(text);
        if (result == null) result = caseGraphicalPrimitive(text);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.BITMAP:
      {
        Bitmap bitmap = (Bitmap)theEObject;
        T result = caseBitmap(bitmap);
        if (result == null) result = caseGraphicalPrimitive(bitmap);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.GRAPHICAL_PRIMITIVE_ARGS:
      {
        GraphicalPrimitiveArgs graphicalPrimitiveArgs = (GraphicalPrimitiveArgs)theEObject;
        T result = caseGraphicalPrimitiveArgs(graphicalPrimitiveArgs);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.DIALOG:
      {
        Dialog dialog = (Dialog)theEObject;
        T result = caseDialog(dialog);
        if (result == null) result = caseAnnotationArg(dialog);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.DIALOG_ARG:
      {
        DialogArg dialogArg = (DialogArg)theEObject;
        T result = caseDialogArg(dialogArg);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.ENABLE:
      {
        Enable enable = (Enable)theEObject;
        T result = caseEnable(enable);
        if (result == null) result = caseDialogArg(enable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.GROUP:
      {
        Group group = (Group)theEObject;
        T result = caseGroup(group);
        if (result == null) result = caseDialogArg(group);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.TAB:
      {
        Tab tab = (Tab)theEObject;
        T result = caseTab(tab);
        if (result == null) result = caseDialogArg(tab);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.ANNOTATION_DOCUMENTATION:
      {
        AnnotationDocumentation annotationDocumentation = (AnnotationDocumentation)theEObject;
        T result = caseAnnotationDocumentation(annotationDocumentation);
        if (result == null) result = caseAnnotationArg(annotationDocumentation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.ANNOTATION_EXPERIMENT:
      {
        AnnotationExperiment annotationExperiment = (AnnotationExperiment)theEObject;
        T result = caseAnnotationExperiment(annotationExperiment);
        if (result == null) result = caseAnnotationArg(annotationExperiment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.EXPERIMENT_OPTION:
      {
        ExperimentOption experimentOption = (ExperimentOption)theEObject;
        T result = caseExperimentOption(experimentOption);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.LOGICAL_EXPRESSION:
      {
        LogicalExpression logicalExpression = (LogicalExpression)theEObject;
        T result = caseLogicalExpression(logicalExpression);
        if (result == null) result = caseExpression(logicalExpression);
        if (result == null) result = caseEquation(logicalExpression);
        if (result == null) result = caseSubscript(logicalExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.LOGICAL_TERM:
      {
        LogicalTerm logicalTerm = (LogicalTerm)theEObject;
        T result = caseLogicalTerm(logicalTerm);
        if (result == null) result = caseExpression(logicalTerm);
        if (result == null) result = caseEquation(logicalTerm);
        if (result == null) result = caseSubscript(logicalTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.RELATION:
      {
        Relation relation = (Relation)theEObject;
        T result = caseRelation(relation);
        if (result == null) result = caseExpression(relation);
        if (result == null) result = caseEquation(relation);
        if (result == null) result = caseSubscript(relation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.ARITHMETIC_EXPRESSION:
      {
        ArithmeticExpression arithmeticExpression = (ArithmeticExpression)theEObject;
        T result = caseArithmeticExpression(arithmeticExpression);
        if (result == null) result = caseExpression(arithmeticExpression);
        if (result == null) result = caseEquation(arithmeticExpression);
        if (result == null) result = caseSubscript(arithmeticExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.ARITHMETIC_EXPRESSION2:
      {
        ArithmeticExpression2 arithmeticExpression2 = (ArithmeticExpression2)theEObject;
        T result = caseArithmeticExpression2(arithmeticExpression2);
        if (result == null) result = caseExpression(arithmeticExpression2);
        if (result == null) result = caseEquation(arithmeticExpression2);
        if (result == null) result = caseSubscript(arithmeticExpression2);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.TERM:
      {
        Term term = (Term)theEObject;
        T result = caseTerm(term);
        if (result == null) result = caseExpression(term);
        if (result == null) result = caseEquation(term);
        if (result == null) result = caseSubscript(term);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.FACTOR:
      {
        Factor factor = (Factor)theEObject;
        T result = caseFactor(factor);
        if (result == null) result = caseExpression(factor);
        if (result == null) result = caseEquation(factor);
        if (result == null) result = caseSubscript(factor);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.PRIMARY:
      {
        Primary primary = (Primary)theEObject;
        T result = casePrimary(primary);
        if (result == null) result = caseExpression(primary);
        if (result == null) result = caseEquation(primary);
        if (result == null) result = caseSubscript(primary);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ModelicaMoPackage.OUTPUT_EXPRESION_LIST:
      {
        OutputExpresionList outputExpresionList = (OutputExpresionList)theEObject;
        T result = caseOutputExpresionList(outputExpresionList);
        if (result == null) result = caseOutputExpressionList(outputExpresionList);
        if (result == null) result = caseExpression(outputExpresionList);
        if (result == null) result = caseEquation(outputExpresionList);
        if (result == null) result = caseSubscript(outputExpresionList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Program</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Program</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProgram(Program object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Class Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Class Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseClassDefinition(ClassDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Class Prefixes</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Class Prefixes</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseClassPrefixes(ClassPrefixes object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Class Specifier</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Class Specifier</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseClassSpecifier(ClassSpecifier object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Long Class Specifier</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Long Class Specifier</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLongClassSpecifier(LongClassSpecifier object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Short Class Specifier</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Short Class Specifier</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseShortClassSpecifier(ShortClassSpecifier object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Der Class Specifier</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Der Class Specifier</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDerClassSpecifier(DerClassSpecifier object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Base Prefix</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Base Prefix</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBasePrefix(BasePrefix object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Enum List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Enum List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnumList(EnumList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Enumeration Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Enumeration Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnumerationLiteral(EnumerationLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Composition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Composition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComposition(Composition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Element List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Element List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseElementList(ElementList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseElement(Element object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Import Clause</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Import Clause</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseImportClause(ImportClause object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Import List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Import List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseImportList(ImportList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Extend Clause</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Extend Clause</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExtendClause(ExtendClause object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Constraining Clause</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Constraining Clause</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConstrainingClause(ConstrainingClause object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Modification</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Modification</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModification(Modification object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Class Modification</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Class Modification</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseClassModification(ClassModification object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Argument List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Argument List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArgumentList(ArgumentList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Argument</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Argument</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArgument(Argument object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Element Modification Or Replaceable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Element Modification Or Replaceable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseElementModificationOrReplaceable(ElementModificationOrReplaceable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Element Modification</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Element Modification</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseElementModification(ElementModification object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Element Redeclaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Element Redeclaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseElementRedeclaration(ElementRedeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Element Replaceable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Element Replaceable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseElementReplaceable(ElementReplaceable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Component Clause1</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Component Clause1</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComponentClause1(ComponentClause1 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Component Declaration1</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Component Declaration1</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComponentDeclaration1(ComponentDeclaration1 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Short Class Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Short Class Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseShortClassDefinition(ShortClassDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Component Clause</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Component Clause</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComponentClause(ComponentClause object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Prefix</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Prefix</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypePrefix(TypePrefix object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Specifier</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Specifier</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeSpecifier(TypeSpecifier object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Component List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Component List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComponentList(ComponentList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Component Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Component Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComponentDeclaration(ComponentDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Condition Attribute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Condition Attribute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConditionAttribute(ConditionAttribute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDeclaration(Declaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Equation Section</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Equation Section</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEquationSection(EquationSection object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Algorithm Section</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Algorithm Section</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAlgorithmSection(AlgorithmSection object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Equation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Equation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEquation(Equation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatement(Statement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Equation If</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Equation If</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEquationIf(EquationIf object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statement If</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statement If</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatementIf(StatementIf object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Equation For</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Equation For</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEquationFor(EquationFor object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statement For</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statement For</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatementFor(StatementFor object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>For Indices</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>For Indices</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseForIndices(ForIndices object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>For Index</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>For Index</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseForIndex(ForIndex object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statement While</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statement While</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatementWhile(StatementWhile object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Equation When</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Equation When</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEquationWhen(EquationWhen object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statement When</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statement When</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatementWhen(StatementWhen object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Connect Clause</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Connect Clause</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConnectClause(ConnectClause object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpression(Expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Name</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Name</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseName(Name object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Component Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Component Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComponentReference(ComponentReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Call Args</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Call Args</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionCallArgs(FunctionCallArgs object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Arguments</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Arguments</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionArguments(FunctionArguments object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Named Arguments</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Named Arguments</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNamedArguments(NamedArguments object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Named Argument</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Named Argument</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNamedArgument(NamedArgument object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Argument</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Argument</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionArgument(FunctionArgument object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Output Expression List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Output Expression List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOutputExpressionList(OutputExpressionList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expr Expression List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expr Expression List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExprExpressionList(ExprExpressionList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Array Subscripts</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Array Subscripts</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArraySubscripts(ArraySubscripts object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Subscript</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Subscript</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSubscript(Subscript object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Comment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Comment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComment(Comment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>String Comment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>String Comment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStringComment(StringComment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Assert</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Assert</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAssert(Assert object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Annotation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Annotation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAnnotation(Annotation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Annotation Arg</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Annotation Arg</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAnnotationArg(AnnotationArg object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Def Component Name</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Def Component Name</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDefComponentName(DefComponentName object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Choices</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Choices</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseChoices(Choices object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Annotation Code</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Annotation Code</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAnnotationCode(AnnotationCode object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Annotation Layer</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Annotation Layer</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAnnotationLayer(AnnotationLayer object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Layer Icon</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Layer Icon</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLayerIcon(LayerIcon object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Layer Diagram</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Layer Diagram</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLayerDiagram(LayerDiagram object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Coordinate Specification</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Coordinate Specification</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCoordinateSpecification(CoordinateSpecification object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Coordinate Specification Args</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Coordinate Specification Args</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCoordinateSpecificationArgs(CoordinateSpecificationArgs object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Extent</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Extent</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExtent(Extent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Preserve AR</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Preserve AR</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePreserveAR(PreserveAR object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Initial Scale</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Initial Scale</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInitialScale(InitialScale object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Grid</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Grid</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGrid(Grid object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Placement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Placement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlacement(Placement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Placement Arg</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Placement Arg</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlacementArg(PlacementArg object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Visible</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Visible</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVisible(Visible object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Transformation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Transformation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTransformation(Transformation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Transformation Arg</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Transformation Arg</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTransformationArg(TransformationArg object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Rotation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Rotation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRotation(Rotation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Origin</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Origin</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOrigin(Origin object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Point</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Point</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePoint(Point object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Radius</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Radius</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRadius(Radius object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Smooth</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Smooth</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSmooth(Smooth object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Color</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Color</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseColor(Color object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Thickness</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Thickness</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseThickness(Thickness object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Graphics</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Graphics</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGraphics(Graphics object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Graphical Primitive</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Graphical Primitive</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGraphicalPrimitive(GraphicalPrimitive object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Line</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Line</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLine(Line object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Polygon</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Polygon</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePolygon(Polygon object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Rectangle</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Rectangle</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRectangle(Rectangle object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ellipse</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ellipse</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEllipse(Ellipse object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Text</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Text</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseText(Text object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bitmap</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bitmap</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBitmap(Bitmap object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Graphical Primitive Args</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Graphical Primitive Args</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGraphicalPrimitiveArgs(GraphicalPrimitiveArgs object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Dialog</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Dialog</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDialog(Dialog object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Dialog Arg</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Dialog Arg</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDialogArg(DialogArg object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Enable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Enable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnable(Enable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Group</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Group</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGroup(Group object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Tab</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Tab</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTab(Tab object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Annotation Documentation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Annotation Documentation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAnnotationDocumentation(AnnotationDocumentation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Annotation Experiment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Annotation Experiment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAnnotationExperiment(AnnotationExperiment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Experiment Option</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Experiment Option</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExperimentOption(ExperimentOption object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalExpression(LogicalExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalTerm(LogicalTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Relation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Relation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRelation(Relation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Arithmetic Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Arithmetic Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArithmeticExpression(ArithmeticExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Arithmetic Expression2</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Arithmetic Expression2</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArithmeticExpression2(ArithmeticExpression2 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTerm(Term object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Factor</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Factor</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFactor(Factor object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Primary</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Primary</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrimary(Primary object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Output Expresion List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Output Expresion List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOutputExpresionList(OutputExpresionList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //ModelicaMoSwitch
