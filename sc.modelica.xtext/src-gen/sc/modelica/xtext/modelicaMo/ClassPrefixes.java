/**
 * generated by Xtext 2.10.0-SNAPSHOT
 */
package sc.modelica.xtext.modelicaMo;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Class Prefixes</b></em>'.
 * <!-- end-user-doc -->
 *
 * <p>
 * The following features are supported:
 * </p>
 * <ul>
 *   <li>{@link sc.modelica.xtext.modelicaMo.ClassPrefixes#isPartial <em>Partial</em>}</li>
 *   <li>{@link sc.modelica.xtext.modelicaMo.ClassPrefixes#isClass <em>Class</em>}</li>
 *   <li>{@link sc.modelica.xtext.modelicaMo.ClassPrefixes#isModel <em>Model</em>}</li>
 *   <li>{@link sc.modelica.xtext.modelicaMo.ClassPrefixes#isOperator <em>Operator</em>}</li>
 *   <li>{@link sc.modelica.xtext.modelicaMo.ClassPrefixes#isRecord <em>Record</em>}</li>
 *   <li>{@link sc.modelica.xtext.modelicaMo.ClassPrefixes#isBlock <em>Block</em>}</li>
 *   <li>{@link sc.modelica.xtext.modelicaMo.ClassPrefixes#isExpandable <em>Expandable</em>}</li>
 *   <li>{@link sc.modelica.xtext.modelicaMo.ClassPrefixes#isConnector <em>Connector</em>}</li>
 *   <li>{@link sc.modelica.xtext.modelicaMo.ClassPrefixes#isType <em>Type</em>}</li>
 *   <li>{@link sc.modelica.xtext.modelicaMo.ClassPrefixes#isPackage <em>Package</em>}</li>
 *   <li>{@link sc.modelica.xtext.modelicaMo.ClassPrefixes#isPure <em>Pure</em>}</li>
 *   <li>{@link sc.modelica.xtext.modelicaMo.ClassPrefixes#isFunction <em>Function</em>}</li>
 * </ul>
 *
 * @see sc.modelica.xtext.modelicaMo.ModelicaMoPackage#getClassPrefixes()
 * @model
 * @generated
 */
public interface ClassPrefixes extends EObject
{
  /**
   * Returns the value of the '<em><b>Partial</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Partial</em>' attribute isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Partial</em>' attribute.
   * @see #setPartial(boolean)
   * @see sc.modelica.xtext.modelicaMo.ModelicaMoPackage#getClassPrefixes_Partial()
   * @model
   * @generated
   */
  boolean isPartial();

  /**
   * Sets the value of the '{@link sc.modelica.xtext.modelicaMo.ClassPrefixes#isPartial <em>Partial</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Partial</em>' attribute.
   * @see #isPartial()
   * @generated
   */
  void setPartial(boolean value);

  /**
   * Returns the value of the '<em><b>Class</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Class</em>' attribute isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Class</em>' attribute.
   * @see #setClass(boolean)
   * @see sc.modelica.xtext.modelicaMo.ModelicaMoPackage#getClassPrefixes_Class()
   * @model
   * @generated
   */
  boolean isClass();

  /**
   * Sets the value of the '{@link sc.modelica.xtext.modelicaMo.ClassPrefixes#isClass <em>Class</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Class</em>' attribute.
   * @see #isClass()
   * @generated
   */
  void setClass(boolean value);

  /**
   * Returns the value of the '<em><b>Model</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Model</em>' attribute isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Model</em>' attribute.
   * @see #setModel(boolean)
   * @see sc.modelica.xtext.modelicaMo.ModelicaMoPackage#getClassPrefixes_Model()
   * @model
   * @generated
   */
  boolean isModel();

  /**
   * Sets the value of the '{@link sc.modelica.xtext.modelicaMo.ClassPrefixes#isModel <em>Model</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Model</em>' attribute.
   * @see #isModel()
   * @generated
   */
  void setModel(boolean value);

  /**
   * Returns the value of the '<em><b>Operator</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Operator</em>' attribute isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Operator</em>' attribute.
   * @see #setOperator(boolean)
   * @see sc.modelica.xtext.modelicaMo.ModelicaMoPackage#getClassPrefixes_Operator()
   * @model
   * @generated
   */
  boolean isOperator();

  /**
   * Sets the value of the '{@link sc.modelica.xtext.modelicaMo.ClassPrefixes#isOperator <em>Operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Operator</em>' attribute.
   * @see #isOperator()
   * @generated
   */
  void setOperator(boolean value);

  /**
   * Returns the value of the '<em><b>Record</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Record</em>' attribute isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Record</em>' attribute.
   * @see #setRecord(boolean)
   * @see sc.modelica.xtext.modelicaMo.ModelicaMoPackage#getClassPrefixes_Record()
   * @model
   * @generated
   */
  boolean isRecord();

  /**
   * Sets the value of the '{@link sc.modelica.xtext.modelicaMo.ClassPrefixes#isRecord <em>Record</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Record</em>' attribute.
   * @see #isRecord()
   * @generated
   */
  void setRecord(boolean value);

  /**
   * Returns the value of the '<em><b>Block</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Block</em>' attribute isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Block</em>' attribute.
   * @see #setBlock(boolean)
   * @see sc.modelica.xtext.modelicaMo.ModelicaMoPackage#getClassPrefixes_Block()
   * @model
   * @generated
   */
  boolean isBlock();

  /**
   * Sets the value of the '{@link sc.modelica.xtext.modelicaMo.ClassPrefixes#isBlock <em>Block</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Block</em>' attribute.
   * @see #isBlock()
   * @generated
   */
  void setBlock(boolean value);

  /**
   * Returns the value of the '<em><b>Expandable</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Expandable</em>' attribute isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Expandable</em>' attribute.
   * @see #setExpandable(boolean)
   * @see sc.modelica.xtext.modelicaMo.ModelicaMoPackage#getClassPrefixes_Expandable()
   * @model
   * @generated
   */
  boolean isExpandable();

  /**
   * Sets the value of the '{@link sc.modelica.xtext.modelicaMo.ClassPrefixes#isExpandable <em>Expandable</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Expandable</em>' attribute.
   * @see #isExpandable()
   * @generated
   */
  void setExpandable(boolean value);

  /**
   * Returns the value of the '<em><b>Connector</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Connector</em>' attribute isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Connector</em>' attribute.
   * @see #setConnector(boolean)
   * @see sc.modelica.xtext.modelicaMo.ModelicaMoPackage#getClassPrefixes_Connector()
   * @model
   * @generated
   */
  boolean isConnector();

  /**
   * Sets the value of the '{@link sc.modelica.xtext.modelicaMo.ClassPrefixes#isConnector <em>Connector</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Connector</em>' attribute.
   * @see #isConnector()
   * @generated
   */
  void setConnector(boolean value);

  /**
   * Returns the value of the '<em><b>Type</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Type</em>' attribute isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Type</em>' attribute.
   * @see #setType(boolean)
   * @see sc.modelica.xtext.modelicaMo.ModelicaMoPackage#getClassPrefixes_Type()
   * @model
   * @generated
   */
  boolean isType();

  /**
   * Sets the value of the '{@link sc.modelica.xtext.modelicaMo.ClassPrefixes#isType <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Type</em>' attribute.
   * @see #isType()
   * @generated
   */
  void setType(boolean value);

  /**
   * Returns the value of the '<em><b>Package</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Package</em>' attribute isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Package</em>' attribute.
   * @see #setPackage(boolean)
   * @see sc.modelica.xtext.modelicaMo.ModelicaMoPackage#getClassPrefixes_Package()
   * @model
   * @generated
   */
  boolean isPackage();

  /**
   * Sets the value of the '{@link sc.modelica.xtext.modelicaMo.ClassPrefixes#isPackage <em>Package</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Package</em>' attribute.
   * @see #isPackage()
   * @generated
   */
  void setPackage(boolean value);

  /**
   * Returns the value of the '<em><b>Pure</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Pure</em>' attribute isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Pure</em>' attribute.
   * @see #setPure(boolean)
   * @see sc.modelica.xtext.modelicaMo.ModelicaMoPackage#getClassPrefixes_Pure()
   * @model
   * @generated
   */
  boolean isPure();

  /**
   * Sets the value of the '{@link sc.modelica.xtext.modelicaMo.ClassPrefixes#isPure <em>Pure</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Pure</em>' attribute.
   * @see #isPure()
   * @generated
   */
  void setPure(boolean value);

  /**
   * Returns the value of the '<em><b>Function</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Function</em>' attribute isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Function</em>' attribute.
   * @see #setFunction(boolean)
   * @see sc.modelica.xtext.modelicaMo.ModelicaMoPackage#getClassPrefixes_Function()
   * @model
   * @generated
   */
  boolean isFunction();

  /**
   * Sets the value of the '{@link sc.modelica.xtext.modelicaMo.ClassPrefixes#isFunction <em>Function</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Function</em>' attribute.
   * @see #isFunction()
   * @generated
   */
  void setFunction(boolean value);

} // ClassPrefixes
